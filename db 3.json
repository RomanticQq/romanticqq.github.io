{"meta":{"version":1,"warehouse":"4.0.0"},"models":{"Asset":[{"_id":"source/CNAME","path":"CNAME","modified":1,"renderable":0},{"_id":"themes/next/source/love.js","path":"love.js","modified":1,"renderable":1},{"_id":"themes/next/source/css/main.styl","path":"css/main.styl","modified":1,"renderable":1},{"_id":"themes/next/source/images/alipay.png","path":"images/alipay.png","modified":1,"renderable":1},{"_id":"themes/next/source/images/apple-touch-icon-next.png","path":"images/apple-touch-icon-next.png","modified":1,"renderable":1},{"_id":"themes/next/source/images/avatar.jpg","path":"images/avatar.jpg","modified":1,"renderable":1},{"_id":"themes/next/source/images/cc-by-nc-nd.svg","path":"images/cc-by-nc-nd.svg","modified":1,"renderable":1},{"_id":"themes/next/source/images/cc-by-nc-sa.svg","path":"images/cc-by-nc-sa.svg","modified":1,"renderable":1},{"_id":"themes/next/source/images/cc-by-nc.svg","path":"images/cc-by-nc.svg","modified":1,"renderable":1},{"_id":"themes/next/source/images/cc-by-nd.svg","path":"images/cc-by-nd.svg","modified":1,"renderable":1},{"_id":"themes/next/source/images/cc-by-sa.svg","path":"images/cc-by-sa.svg","modified":1,"renderable":1},{"_id":"themes/next/source/images/cc-by.svg","path":"images/cc-by.svg","modified":1,"renderable":1},{"_id":"themes/next/source/images/cc-zero.svg","path":"images/cc-zero.svg","modified":1,"renderable":1},{"_id":"themes/next/source/images/favicon-16x16-next.png","path":"images/favicon-16x16-next.png","modified":1,"renderable":1},{"_id":"themes/next/source/images/favicon-32x32-next.png","path":"images/favicon-32x32-next.png","modified":1,"renderable":1},{"_id":"themes/next/source/images/logo-algolia-nebula-blue-full.svg","path":"images/logo-algolia-nebula-blue-full.svg","modified":1,"renderable":1},{"_id":"themes/next/source/images/logo.svg","path":"images/logo.svg","modified":1,"renderable":1},{"_id":"themes/next/source/images/wechatpay.png","path":"images/wechatpay.png","modified":1,"renderable":1},{"_id":"themes/next/source/js/algolia-search.js","path":"js/algolia-search.js","modified":1,"renderable":1},{"_id":"themes/next/source/js/bookmark.js","path":"js/bookmark.js","modified":1,"renderable":1},{"_id":"themes/next/source/js/local-search.js","path":"js/local-search.js","modified":1,"renderable":1},{"_id":"themes/next/source/js/motion.js","path":"js/motion.js","modified":1,"renderable":1},{"_id":"themes/next/source/js/next-boot.js","path":"js/next-boot.js","modified":1,"renderable":1},{"_id":"themes/next/source/js/schedule.js","path":"js/schedule.js","modified":1,"renderable":1},{"_id":"themes/next/source/js/utils.js","path":"js/utils.js","modified":1,"renderable":1},{"_id":"themes/next/source/js/schemes/muse.js","path":"js/schemes/muse.js","modified":1,"renderable":1}],"Cache":[{"_id":"source/.DS_Store","hash":"cc75fbdb977a72e3c33a32b977ec965c1597d5c5","modified":1627438392175},{"_id":"source/404.html","hash":"f8a2cca59748cfa80976ba2c2f0bd6140220bcaa","modified":1627396648000},{"_id":"source/CNAME","hash":"867a33d9b8987dcef70cf30d0fc23737b7604f43","modified":1627396648000},{"_id":"source/baidu_verify_code-wmM3n7u2hd.html","hash":"59928b97f9d654c19a20304f5e1709a1f01c53b7","modified":1627396648000},{"_id":"source/google5e79a31eb19e1434.html","hash":"f507080679c3434ab354e64bf79daa894ddd4592","modified":1627396648000},{"_id":"source/_discarded/test.md","hash":"069cec7e1576f4e01751e475dd22c0237d210541","modified":1627436018136},{"_id":"source/about/index.md","hash":"290363f84662dbb3432076c4a1e406751dbc10bb","modified":1627396648000},{"_id":"source/_posts/.DS_Store","hash":"df2fbeb1400acda0909a32c1cf6bf492f1121e07","modified":1627438397284},{"_id":"source/_posts/2015年程序设计复试真题.md","hash":"ea0c097f26177d27a7a318fc668b198942d31346","modified":1627397503493},{"_id":"source/_posts/Ajax原理和使用.md","hash":"0e3bf36e2cebf6afcad9b647500dfc2b20d513e5","modified":1627397503495},{"_id":"source/_posts/Ajax实现文件上传.md","hash":"c75d3808d1cca1706631499cc2f645cb9696ffb3","modified":1627397503496},{"_id":"source/_posts/Anaconda安装库时遇到的坑.md","hash":"e7dd42482811c5674912ed2ec4cbeeb7ee3230a4","modified":1627397503497},{"_id":"source/_posts/C语言函数数组传值.md","hash":"26bc02ab48dfb247233201ff96cdf09a713acf93","modified":1627397503498},{"_id":"source/_posts/Java笔记(第二天).md","hash":"7497992e45f7088206436bd32a9974d4c5b5bbdd","modified":1627397503500},{"_id":"source/_posts/Linux环境下搭建LAMP.md","hash":"8b503f4b7e3c843af223a66a8a261b13448e732a","modified":1627397503501},{"_id":"source/_posts/Pycharm基本使用.md","hash":"2cbfd64c4e03286587621b045a951f9a53c0f70c","modified":1627397503502},{"_id":"source/_posts/Pyecharts遇到的坑.md","hash":"2bd7f9fe515ac4af632dc141ebc4d8e2ca4da935","modified":1627397503503},{"_id":"source/_posts/Python2和Python3的区别(更新中).md","hash":"d640552263b44f1b3d005e8a2eda0a35387c25b5","modified":1627397503504},{"_id":"source/_posts/Python中函数的使用.md","hash":"4f7d3bf418a20b9ccc9c2db298803f5c1f007b5b","modified":1627397503505},{"_id":"source/_posts/Python中浅拷贝和深拷贝.md","hash":"1d44601472398215ce12780faefcd36002c02c23","modified":1627397503507},{"_id":"source/_posts/Python中进制和数据类型转换.md","hash":"ccc02abc0ed7978fc10651ca27ec4b2412cd1609","modified":1627397503508},{"_id":"source/_posts/Python元组、列表、字典.md","hash":"d0e7e0872ad878b53441f5f1b1c781b34bdd19a4","modified":1627397503509},{"_id":"source/_posts/Python分支语句和循环语句.md","hash":"6b9c831cc11c7b785772d82d26aaf1756373e38d","modified":1627397503511},{"_id":"source/_posts/Python可变数据类型和不可变数据类型.md","hash":"4ed618d30b8187e03612a0938b77b2efb5939b2d","modified":1627397503512},{"_id":"source/_posts/Python基本语法.md","hash":"f2a1efeef26fcb773b21ab3d1f70d33696e292b7","modified":1627397503513},{"_id":"source/_posts/Python字符串.md","hash":"ea54274ded3ab851adc403aad4539593bbed430e","modified":1627397503514},{"_id":"source/_posts/Python经典问题.md","hash":"970aecf25255a75dcf868a35749b277e8f040931","modified":1627397503515},{"_id":"source/_posts/Python运算符.md","hash":"6b6e2a460ff5e288e2ee92cb9fb386c8497dd7b7","modified":1627397503516},{"_id":"source/_posts/createjs小游戏笔记.md","hash":"eeb9590cf3892c3c3f342cc26096ce7de6332246","modified":1627397503517},{"_id":"source/_posts/happyBirthday.md","hash":"87afd93c368ec6d5c5cca9aaf0b44b94a3b053e1","modified":1627397503518},{"_id":"source/_posts/hexo-PicGo-gitee图床.md","hash":"1e9e343a6dce06c192d662dd99015cccaa3f9c92","modified":1627397503519},{"_id":"source/_posts/hexo备份与恢复.md","hash":"0163d18ff86bf9c0124bd4f231435ab347105d83","modified":1627397503520},{"_id":"source/_posts/hexo插入图片.md","hash":"4299e90239d4348b4be6f0d69e9a6ffd6e4056de","modified":1627397503520},{"_id":"source/_posts/hexo绑定域名.md","hash":"4f2f9111def388f653e2a3a6ee3d90077b2d3904","modified":1627397503521},{"_id":"source/_posts/hexo部署.md","hash":"c0e72479bb79d35b1a74533496f135099b484a3f","modified":1627397503522},{"_id":"source/_posts/java笔记(第一天).md","hash":"a3be9192808f312ded5dc8360a18e71c6fa76ff2","modified":1627397503523},{"_id":"source/_posts/js文件的写法.md","hash":"7b8dbf8c94c32ff9dd84d8fafb8b892947c1a3e8","modified":1627397503524},{"_id":"source/_posts/laravel8路由.md","hash":"cd5f5c04e4c6c7fdb36823ab2d53caf7b86bbc9b","modified":1627397503525},{"_id":"source/_posts/单例模式.md","hash":"783897ba4058a9c95a0b0d3fa4347304c40a3702","modified":1627397503526},{"_id":"source/_posts/学习Python遇到的坑(更新中).md","hash":"31f86b6f6e22e9015ecb494988a2007895e1ff08","modified":1627397503527},{"_id":"source/_posts/搭建hexo个人博客.md","hash":"2c08f8761e9c87f38c59affde31e7a4c87a85c77","modified":1627397503527},{"_id":"source/_posts/生活杂记.md","hash":"b6eea0d5c15bba780854bfb96c4aa255b431030d","modified":1627397503529},{"_id":"source/_posts/解决createjs适配手机横屏的问题.md","hash":"1e2cd46dbc627c7f7b5803f7579cfbc76b2c8405","modified":1627397503530},{"_id":"source/_posts/解决innerHTML不能解析数据.md","hash":"53ed4781e083a6c0cb38d5fb88208898778f94f8","modified":1627397503531},{"_id":"source/_posts/解决php中跨域问题.md","hash":"691fa1ca1d75bd674aeed594604ed8a54a97d082","modified":1627397503532},{"_id":"source/_posts/解决空html页面有hight的问题.md","hash":"4ef6239c0d78f8b73c34ddf8a437cf76105b60f2","modified":1627397503533},{"_id":"source/_posts/面试.md","hash":"c40c8f8eed855ea6dc6b6b200b51b0c179e04896","modified":1627397503534},{"_id":"source/categories/index.md","hash":"4bcdf1c6227beaacdcc3ca35074fdd3408bbdfd1","modified":1627396648000},{"_id":"source/guestbook/index.md","hash":"9f8e72646f1289a9ff83d5d6b60586875b9b5e7c","modified":1627396648000},{"_id":"source/tags/index.md","hash":"4117163ee08559500b718e2c245d0394d5070a66","modified":1627396648000},{"_id":"themes/next/.editorconfig","hash":"8570735a8d8d034a3a175afd1dd40b39140b3e6a","modified":1627396648000},{"_id":"themes/next/.eslintrc.json","hash":"9c0762486f24a8c5e60f8b6c875e4c4728942649","modified":1627396648000},{"_id":"themes/next/.gitattributes","hash":"ec43734985e1cafd53d88ded3020103f7416123c","modified":1627396648000},{"_id":"themes/next/.gitignore","hash":"10fa9758d8f934669c1781564ed9ce83436b11f7","modified":1627396648000},{"_id":"themes/next/.npmignore","hash":"b5753ace1856548855d1f2c31c05da85781629e6","modified":1627396648000},{"_id":"themes/next/.stylintrc","hash":"2cf4d637b56d8eb423f59656a11f6403aa90f550","modified":1627396648000},{"_id":"themes/next/LICENSE.md","hash":"63ea7df5a8dc1b23cc92ca9de3ed16d53367f360","modified":1627396648000},{"_id":"themes/next/README.md","hash":"f373cc6b97311ecfdcc1d2cb279faf6560de1cc6","modified":1627396648000},{"_id":"themes/next/_config.yml","hash":"16719ecc9ced31ef68cbe3d3f801ec508aed3853","modified":1627396648000},{"_id":"themes/next/_vendors.yml","hash":"744133cdb17c7a91649c343d6e1a05d3d30854b9","modified":1627396648000},{"_id":"themes/next/crowdin.yml","hash":"e026078448c77dcdd9ef50256bb6635a8f83dca6","modified":1627396648000},{"_id":"themes/next/package.json","hash":"4141b58d7146be5faa8deaf9c48f34c1885680f2","modified":1627396648000},{"_id":"themes/next/renovate.json","hash":"cb29cc16e61b0b8a6dac34657d76822ae29ad5aa","modified":1627396648000},{"_id":"themes/next/.github/CODE_OF_CONDUCT.md","hash":"81dbb25800165f68c21859cd3c09276b9f4cc417","modified":1627396648000},{"_id":"themes/next/.github/CONTRIBUTING.md","hash":"eefd073dfb68884cd946f7ec6d3b3619031d7650","modified":1627396648000},{"_id":"themes/next/.github/PULL_REQUEST_TEMPLATE.md","hash":"3e9fbb78e3dee0ca1dc886d0c28b0148ba0ca499","modified":1627396648000},{"_id":"themes/next/.github/config.yml","hash":"7984e665e9de481a0e0e51fca5668337713f810b","modified":1627396648000},{"_id":"themes/next/.github/issue_label_bot.yaml","hash":"fca600ddef6f80c5e61aeed21722d191e5606e5b","modified":1627396648000},{"_id":"themes/next/.github/label-commenter-config.yml","hash":"1097fc47beeacfc1edb0248c27b17bf64bde3565","modified":1627396648000},{"_id":"themes/next/.github/labeler.yml","hash":"a45e489c62bf5bb5eb1866371af331b8cb9c6320","modified":1627396648000},{"_id":"themes/next/.github/release-drafter.yml","hash":"7662e31224a24154c4fe06b95ccbdff51ab8f2cc","modified":1627396648000},{"_id":"themes/next/.github/stale.yml","hash":"0e40b9975455152a690eaf7047135be348966e39","modified":1627396648000},{"_id":"themes/next/docs/AGPL3.md","hash":"0d2b8c5fa8a614723be0767cc3bca39c49578036","modified":1627396648000},{"_id":"themes/next/docs/AUTHORS.md","hash":"a648823121563c34a177ae91f5a774b5e29f01a0","modified":1627396648000},{"_id":"themes/next/docs/LICENSE.txt","hash":"8ef5fc1147c196680b06e1accab80c8d236ab951","modified":1627396648000},{"_id":"themes/next/languages/README.md","hash":"b2567e32805dda79601157351a07e5ca9fe01315","modified":1627396648000},{"_id":"themes/next/languages/ar.yml","hash":"7a62243ec54196e3d1bea7364f05aded490bc234","modified":1627396648000},{"_id":"themes/next/languages/de.yml","hash":"dc448f724c7d436233e9567711a09e0d56e60e3b","modified":1627396648000},{"_id":"themes/next/languages/default.yml","hash":"ea5e6aee4cb14510793ac4593a3bddffe23e530c","modified":1627396648000},{"_id":"themes/next/languages/en.yml","hash":"48a76170d70ef7c1fac96720bc5064b43061708d","modified":1627396648000},{"_id":"themes/next/languages/es.yml","hash":"c3506dfaa771e827ae6adb322477c6e835cd0f09","modified":1627396648000},{"_id":"themes/next/languages/fa.yml","hash":"649823297167b902455c0aec8ddebb462df71c7d","modified":1627396648000},{"_id":"themes/next/languages/fr.yml","hash":"8ddfe98e7847ee8f1eaba9119f9fbdc42d7ec120","modified":1627396648000},{"_id":"themes/next/languages/id.yml","hash":"ac018805190bc4bdc06091f5a6444e612fc700b0","modified":1627396648000},{"_id":"themes/next/languages/it.yml","hash":"82a93c32b3fcf6517441cdc73f75bc6173beb392","modified":1627396648000},{"_id":"themes/next/languages/ja.yml","hash":"fec1e1c15ad2df7ed1249173cc719ccba6d3b842","modified":1627396648000},{"_id":"themes/next/languages/ko.yml","hash":"8342df2f4190ba4ee004b70d1d6ccd341033dbe7","modified":1627396648000},{"_id":"themes/next/languages/nl.yml","hash":"0d3b56613197cb190900311507535db41daec7d4","modified":1627396648000},{"_id":"themes/next/languages/pt-BR.yml","hash":"47daeaa23c4db073e77761c9a6f62d3932af06ec","modified":1627396648000},{"_id":"themes/next/languages/pt.yml","hash":"e0e2675261e2e80f7ce7d19c945c08217b068d81","modified":1627396648000},{"_id":"themes/next/languages/ru.yml","hash":"fdf5c623890db24cb56ab5ffe0c49db3542477c8","modified":1627396648000},{"_id":"themes/next/languages/tr.yml","hash":"54de3d8d85e3c7b14b163c3d322411b7301a09b3","modified":1627396648000},{"_id":"themes/next/languages/uk.yml","hash":"1c9a0b8d8160c77cc62064207d57f460f365cae9","modified":1627396648000},{"_id":"themes/next/languages/vi.yml","hash":"1f9657b58e11db21f93eb895c90123b8f91751a7","modified":1627396648000},{"_id":"themes/next/languages/zh-CN.yml","hash":"28aebb0c1cc74021daf1a330cd24f8f126860094","modified":1627396648000},{"_id":"themes/next/languages/zh-HK.yml","hash":"149fccd0afdbc8db76e372cbc73d7b5f07bb7515","modified":1627396648000},{"_id":"themes/next/languages/zh-TW.yml","hash":"d534f321ee0c235e1ebfea383eb1892bbd7d7e95","modified":1627396648000},{"_id":"themes/next/layout/_layout.njk","hash":"667079962554c8e955383413cc52028d55bdb1b3","modified":1627396648000},{"_id":"themes/next/layout/archive.njk","hash":"08885f48d5878c92c910f8c41e3209eb07b9b80e","modified":1627396648000},{"_id":"themes/next/layout/category.njk","hash":"434fc2b27120ebae91522002eb40e16f2158bd4f","modified":1627396648000},{"_id":"themes/next/layout/index.njk","hash":"d8fa14549fa061e7bdba4ec1472cb45ecea96382","modified":1627396648000},{"_id":"themes/next/layout/page.njk","hash":"4f8f377e4f5511e27de1c2e4a1c13374b6a5d9bd","modified":1627396648000},{"_id":"themes/next/layout/post.njk","hash":"6abeb85fb3e4c382ed4bb6049b12a807e6226e67","modified":1627396648000},{"_id":"themes/next/layout/tag.njk","hash":"09075c80b53b06826e7eb9ce838bca9dc363fac1","modified":1627396648000},{"_id":"themes/next/scripts/renderer.js","hash":"c53dbede2ad5f68d7349bc5ed8ac7157d723e987","modified":1627396648000},{"_id":"themes/next/source/love.js","hash":"da1ac4e3a0141ca7d1e73904577ed8a78ec95266","modified":1627396648000},{"_id":"themes/next/test/index.js","hash":"6bf0289846538be3e9a63809af98f00e1fbdd90b","modified":1627396648000},{"_id":"themes/next/.github/ISSUE_TEMPLATE/bug-report.md","hash":"fc4dce84ed9a5d21d3a8833ff6d776c46f876115","modified":1627396648000},{"_id":"themes/next/.github/ISSUE_TEMPLATE/feature-request.md","hash":"4ecac91716eac59d7c2bc53cf6e95612d44da97b","modified":1627396648000},{"_id":"themes/next/.github/ISSUE_TEMPLATE/other.md","hash":"b47f529d059ef337b4f14ddf746c3a42744028f0","modified":1627396648000},{"_id":"themes/next/.github/ISSUE_TEMPLATE/question.md","hash":"d0d16ae88623d33946c16cfb68beb6ecab1ba69b","modified":1627396648000},{"_id":"themes/next/.github/workflows/label-commenter.yml","hash":"b6d8162264dc4d6d31f1f9c2a940718f12cff874","modified":1627396648000},{"_id":"themes/next/.github/workflows/labeler.yml","hash":"3acd5189488e720f23e904f2d9d24cf4b15ac1de","modified":1627396648000},{"_id":"themes/next/.github/workflows/linter.yml","hash":"f499ad31aea9ec598308475ef0b19b7e4177103c","modified":1627396648000},{"_id":"themes/next/.github/workflows/lock.yml","hash":"70bd0be3f33774e4b0ada3a59c901f8f9cff1013","modified":1627396648000},{"_id":"themes/next/.github/workflows/release-drafter.yml","hash":"4f3af81009cb922be91f718a67425377515ea69d","modified":1627396648000},{"_id":"themes/next/.github/workflows/tester.yml","hash":"3a740e76151cc0a696273594731d7864a8db5374","modified":1627396648000},{"_id":"themes/next/docs/ru/README.md","hash":"6da6d8e75eab558630b7c6a2e5a80dc981362f47","modified":1627396648000},{"_id":"themes/next/docs/zh-CN/CODE_OF_CONDUCT.md","hash":"0e204dde6d21f100cba6ca7751de71848490759e","modified":1627396648000},{"_id":"themes/next/docs/zh-CN/CONTRIBUTING.md","hash":"8ee5ca39ac4a372a5c0f16e344bbe578af4aeae4","modified":1627396648000},{"_id":"themes/next/docs/zh-CN/README.md","hash":"b5adf2afa918e2eb1000d63e0d8928a524829a35","modified":1627396648000},{"_id":"themes/next/layout/_macro/post-collapse.njk","hash":"1a30d751871dabfa80940042ddb1f77d07d830b9","modified":1627396648000},{"_id":"themes/next/layout/_macro/post.njk","hash":"0a6e47fc04d211c416e00119011f7614d98c31cf","modified":1627396648000},{"_id":"themes/next/layout/_macro/sidebar.njk","hash":"c0a843a3019f0bb8f2e734dc173028ead732b3c0","modified":1627396648000},{"_id":"themes/next/layout/_partials/comments.njk","hash":"334e8d8117a46c8c097788811322a62627952219","modified":1627396648000},{"_id":"themes/next/layout/_partials/footer.njk","hash":"44060deff92a8fe331548dafeb27e5c188a8a6c2","modified":1627396648000},{"_id":"themes/next/layout/_partials/languages.njk","hash":"ba9e272f1065b8f0e8848648caa7dea3f02c6be1","modified":1627396648000},{"_id":"themes/next/layout/_partials/pagination.njk","hash":"9876dbfc15713c7a47d4bcaa301f4757bd978269","modified":1627396648000},{"_id":"themes/next/layout/_partials/widgets.njk","hash":"24eb5b683310810f93c1d7f68f8f70f1a29fd217","modified":1627396648000},{"_id":"themes/next/layout/_scripts/index.njk","hash":"48cbbca0e4f97b8c25f2a5c408071603cd257a65","modified":1627396648000},{"_id":"themes/next/layout/_scripts/noscript.njk","hash":"4f250d0bf80be06dd2c95c1d4c2ba2624b59cf2a","modified":1627396648000},{"_id":"themes/next/layout/_scripts/pjax.njk","hash":"28a3bcb1ce50924a5a48b0f3756ac3a8736867f1","modified":1627396648000},{"_id":"themes/next/layout/_scripts/vendors.njk","hash":"bada07da2a47ed6de6081796367b19dd9e906cfb","modified":1627396648000},{"_id":"themes/next/layout/_third-party/baidu-push.njk","hash":"8627c8c8b031ecee16c522433b66fa4d6979b8ea","modified":1627396648000},{"_id":"themes/next/layout/_third-party/index.njk","hash":"4ca039707745c6a22615741b7411ff2cb0763e6d","modified":1627396648000},{"_id":"themes/next/layout/_third-party/quicklink.njk","hash":"294b7f6a4fa566e369d8be0ce7b28f35b6c14563","modified":1627396648000},{"_id":"themes/next/layout/_third-party/nprogress.njk","hash":"271139c3896a6d294f46f767cb21b2e848050841","modified":1627396648000},{"_id":"themes/next/layout/_third-party/rating.njk","hash":"2731e262a6b88eaee2a3ca61e6a3583a7f594702","modified":1627396648000},{"_id":"themes/next/scripts/events/index.js","hash":"89091bc943cd8b8c63b8af3d26fb0a027048e9ba","modified":1627396648000},{"_id":"themes/next/scripts/filters/default-injects.js","hash":"872f01cb10e422a648ea505436532e776e92926b","modified":1627396648000},{"_id":"themes/next/scripts/filters/locals.js","hash":"fa1e558f058f93455acdd553ab1be30b26f137e4","modified":1627396648000},{"_id":"themes/next/scripts/filters/minify.js","hash":"be0574c64a38210e449c99d38a760452015060a3","modified":1627396648000},{"_id":"themes/next/scripts/filters/post.js","hash":"bac5646993153f9f6a630c9f0052bb17fa760a9c","modified":1627396648000},{"_id":"themes/next/scripts/helpers/engine.js","hash":"248c1b9c858dcd4632e96eb4c31a17402220f188","modified":1627396648000},{"_id":"themes/next/scripts/helpers/font.js","hash":"9cf01a3cf62d9b5a1a0db8145088774bf94045c8","modified":1627396648000},{"_id":"themes/next/scripts/helpers/next-config.js","hash":"cff5f7f4d4c68499cfbf9890d4656156bd0ea1db","modified":1627396648000},{"_id":"themes/next/scripts/helpers/next-url.js","hash":"577c510374cf9bcfa8d3a1027e42411a9324805e","modified":1627396648000},{"_id":"themes/next/scripts/helpers/next-vendors.js","hash":"afdd6a188a74c188f0dd154fac70efd4080ca262","modified":1627396648000},{"_id":"themes/next/scripts/tags/button.js","hash":"c6ad2ed544fbb25ecb5d820c36e76302504271b7","modified":1627396648000},{"_id":"themes/next/scripts/tags/caniuse.js","hash":"935a311142a409c1896b3ae3f01fe7a9e2db1134","modified":1627396648000},{"_id":"themes/next/scripts/tags/center-quote.js","hash":"92c19d796bdb3320df9caea59bf52df7a95d9da9","modified":1627396648000},{"_id":"themes/next/scripts/tags/group-pictures.js","hash":"9836e3212f889e94ada4c354c7b83f7d7caa9aa7","modified":1627396648000},{"_id":"themes/next/scripts/tags/index.js","hash":"17f9451ce1f10f78437f52218757d38d4e1591b0","modified":1627396648000},{"_id":"themes/next/scripts/tags/label.js","hash":"8a73348186113bae0a51ea2f891c1bb882fab05a","modified":1627396648000},{"_id":"themes/next/scripts/tags/link-grid.js","hash":"9e2c58d1a4d1dd84fa86144e5b4576b2fd10a37f","modified":1627396648000},{"_id":"themes/next/scripts/tags/mermaid.js","hash":"464effc08e757ce8e1bb094707d06ad829af9d62","modified":1627396648000},{"_id":"themes/next/scripts/tags/note.js","hash":"05be417a17385a31e1a021e1a54b15046cfd8408","modified":1627396648000},{"_id":"themes/next/scripts/tags/pdf.js","hash":"27129fc4014d723ba93ac77b11342da2ee445d96","modified":1627396648000},{"_id":"themes/next/scripts/tags/tabs.js","hash":"2bf00d56b3b289a7dd27e9b5820430a2457a19f3","modified":1627396648000},{"_id":"themes/next/scripts/tags/video.js","hash":"2ee926448583be8f95af1f2884ae2c9c4830151d","modified":1627396648000},{"_id":"themes/next/source/css/_colors.styl","hash":"b37f9847d2f95632e911df670b51921a7d748068","modified":1627396648000},{"_id":"themes/next/source/css/_mixins.styl","hash":"b9c3d3087a917c94cf34ffd6621528d377af8fc9","modified":1627396648000},{"_id":"themes/next/source/css/main.styl","hash":"766d406beffa0c2cdbd64518262286baaeb8ec3b","modified":1627396648000},{"_id":"themes/next/source/images/apple-touch-icon-next.png","hash":"2959dbc97f31c80283e67104fe0854e2369e40aa","modified":1627396648000},{"_id":"themes/next/source/images/avatar.jpg","hash":"7aa6b13cecc6eca64b8d5e1860b1c57a867bd5bf","modified":1627396648000},{"_id":"themes/next/source/images/cc-by-nc-nd.svg","hash":"c6524ece3f8039a5f612feaf865d21ec8a794564","modified":1627396648000},{"_id":"themes/next/source/images/cc-by-nc-sa.svg","hash":"3031be41e8753c70508aa88e84ed8f4f653f157e","modified":1627396648000},{"_id":"themes/next/source/images/cc-by-nc.svg","hash":"8d39b39d88f8501c0d27f8df9aae47136ebc59b7","modified":1627396648000},{"_id":"themes/next/source/images/cc-by-nd.svg","hash":"c563508ce9ced1e66948024ba1153400ac0e0621","modified":1627396648000},{"_id":"themes/next/source/images/cc-by-sa.svg","hash":"aa4742d733c8af8d38d4c183b8adbdcab045872e","modified":1627396648000},{"_id":"themes/next/source/images/cc-by.svg","hash":"28a0a4fe355a974a5e42f68031652b76798d4f7e","modified":1627396648000},{"_id":"themes/next/source/images/cc-zero.svg","hash":"87669bf8ac268a91d027a0a4802c92a1473e9030","modified":1627396648000},{"_id":"themes/next/source/images/favicon-16x16-next.png","hash":"943a0d67a9cdf8c198109b28f9dbd42f761d11c3","modified":1627396648000},{"_id":"themes/next/source/images/favicon-32x32-next.png","hash":"0749d7b24b0d2fae1c8eb7f671ad4646ee1894b1","modified":1627396648000},{"_id":"themes/next/source/images/logo-algolia-nebula-blue-full.svg","hash":"b85e274207b1392782476a0430feac98db1e7da0","modified":1627396648000},{"_id":"themes/next/source/images/logo.svg","hash":"d29cacbae1bdc4bbccb542107ee0524fe55ad6de","modified":1627396648000},{"_id":"themes/next/source/js/algolia-search.js","hash":"a6f78c4cfffa976e4b8043e3486ce99aaba02bda","modified":1627396648000},{"_id":"themes/next/source/js/bookmark.js","hash":"e45e1fbb7c6d645e9c410759486216e570d02bef","modified":1627396648000},{"_id":"themes/next/source/js/local-search.js","hash":"9f4fe7bbe0f16be72d26ccb8b22bd33767f83cff","modified":1627396648000},{"_id":"themes/next/source/js/motion.js","hash":"6d4bd07a6f8e1b4083119dca0acb5b289533b619","modified":1627396648000},{"_id":"themes/next/source/js/next-boot.js","hash":"da67f3eed604dcdc4e89280c9db69fe1f62818e9","modified":1627396648000},{"_id":"themes/next/source/js/schedule.js","hash":"ababd67895ce49049271601c6928fce56a1c6bbb","modified":1627396648000},{"_id":"themes/next/source/js/utils.js","hash":"bc4217f9779b81c0f56de985c46d73c21d3992d5","modified":1627396648000},{"_id":"themes/next/test/helpers/font.js","hash":"8930b1f16facc18dc6764bf6efd753ca50d3f1cb","modified":1627396648000},{"_id":"themes/next/test/helpers/index.js","hash":"63ba28afed697f7b3574436b1133b8ecc9c0c357","modified":1627396648000},{"_id":"themes/next/test/helpers/next-url.js","hash":"abc4ee5149df6172b2c36b6e85d1993ec748ddea","modified":1627396648000},{"_id":"themes/next/test/tags/button.js","hash":"48f2aa4c513e9e24bd6a811410520b74cd7ea88b","modified":1627396648000},{"_id":"themes/next/test/tags/caniuse.js","hash":"aa5e728445caeaf7c2ccd0f3fcb2cad0c93ca6d1","modified":1627396648000},{"_id":"themes/next/test/tags/center-quote.js","hash":"7667342fd1a1417eaf6a254012b84ae40e8d13dd","modified":1627396648000},{"_id":"themes/next/test/tags/group-pictures.js","hash":"caf9f6b9a72e41fb30aa24468a54496fba1fcdd8","modified":1627396648000},{"_id":"themes/next/test/tags/index.js","hash":"e8779e54f0979b221858f8bb74dd081bb503b910","modified":1627396648000},{"_id":"themes/next/test/tags/label.js","hash":"4ebf3698c258ca978b997acbdd0dece44069c09d","modified":1627396648000},{"_id":"themes/next/test/tags/link-grid.js","hash":"88ec69e4dc1d493d21254ed9296a2514e91f0f8b","modified":1627396648000},{"_id":"themes/next/test/tags/mermaid.js","hash":"ed5b5a70ee49842501c952c4d62483f1fc8eba6b","modified":1627396648000},{"_id":"themes/next/test/tags/note.js","hash":"1b6bac741212e7ca763ab7f92ed2d4e2868126f4","modified":1627396648000},{"_id":"themes/next/test/tags/pdf.js","hash":"bac003317e5bb5e046848522c5c4a7cf231e53f6","modified":1627396648000},{"_id":"themes/next/test/tags/tabs.js","hash":"d63722919f9da2e44d6b952801e10a2915ea9c12","modified":1627396648000},{"_id":"themes/next/test/tags/video.js","hash":"b796fc4dceb20a30e730c322bb5474c0162464cc","modified":1627396648000},{"_id":"themes/next/test/validate/index.js","hash":"ef716c1db8e3c93c320f73b6da4010e03b4eb0ae","modified":1627396648000},{"_id":"themes/next/layout/_partials/head/head-unique.njk","hash":"37bdf020591feb0cf72327c9efd755bf78a0afd6","modified":1627396648000},{"_id":"themes/next/layout/_partials/head/head.njk","hash":"e8a73353f1343d2354b1612bf9dbb3b41085a8ed","modified":1627396648000},{"_id":"themes/next/layout/_partials/header/brand.njk","hash":"c082a16163d1fb5d7cf858fb7522fca9d18f1ba6","modified":1627396648000},{"_id":"themes/next/layout/_partials/header/index.njk","hash":"53895b3af95667edc5bf5d7356f8a2b4fe091447","modified":1627396648000},{"_id":"themes/next/layout/_partials/header/menu-item.njk","hash":"61eec1fb84711369b9dabd1d2cae64858844c2eb","modified":1627396648000},{"_id":"themes/next/layout/_partials/header/menu.njk","hash":"c9390824b57f23b7c8a5c23a9834514123673766","modified":1627396648000},{"_id":"themes/next/layout/_partials/header/sub-menu.njk","hash":"75a158a5b54a3a76ee6590f5e0e2dd4a9f0be869","modified":1627396648000},{"_id":"themes/next/layout/_partials/page/breadcrumb.njk","hash":"edb3bb6d644b7407673c5ef3a426a244e98fcf89","modified":1627396648000},{"_id":"themes/next/layout/_partials/page/categories.njk","hash":"17156d99941f28a225951ffdcfa9a115e20dc2d2","modified":1627396648000},{"_id":"themes/next/layout/_partials/page/page-header.njk","hash":"789915339a6234d6dd7c710cc1f8e728d9b81d35","modified":1627396648000},{"_id":"themes/next/layout/_partials/page/schedule.njk","hash":"9d650333160ad1977fe42d9770869ff1660a95fe","modified":1627396648000},{"_id":"themes/next/layout/_partials/page/tags.njk","hash":"a18d1598e36cc72f2b0b24c3cc3c5990dfaa3254","modified":1627396648000},{"_id":"themes/next/layout/_partials/post/post-copyright.njk","hash":"133942922e34abae9e4de7ea5591d77c0caa4b37","modified":1627396648000},{"_id":"themes/next/layout/_partials/post/post-followme.njk","hash":"154df0bb323c332d8c25343f258ee865e5553423","modified":1627396648000},{"_id":"themes/next/layout/_partials/post/post-footer.njk","hash":"8f14f3f8a1b2998d5114cc56b680fb5c419a6b07","modified":1627396648000},{"_id":"themes/next/layout/_partials/post/post-meta.njk","hash":"fbdb5cdbd80970f201f5c75369eaa00aea369235","modified":1627396648000},{"_id":"themes/next/layout/_partials/post/post-related.njk","hash":"f79c44692451db26efce704813f7a8872b7e63a0","modified":1627396648000},{"_id":"themes/next/layout/_partials/post/post-reward.njk","hash":"a9bb52d0537d27cfe670d80e716da6780786ab8a","modified":1627396648000},{"_id":"themes/next/layout/_partials/sidebar/site-overview.njk","hash":"c419158e19805e2db614a5f5651e3e534e4a5e4e","modified":1627396648000},{"_id":"themes/next/layout/_partials/search/algolia-search.njk","hash":"c2ccaac9caeea1a43dc31f4f8368f8f548aab0af","modified":1627396648000},{"_id":"themes/next/layout/_partials/search/index.njk","hash":"b7a66a465e897c27624f0c441375c95c4cb7a5aa","modified":1627396648000},{"_id":"themes/next/layout/_partials/search/localsearch.njk","hash":"90156f42d6e6e326ed38482d6623a0aac0352016","modified":1627396648000},{"_id":"themes/next/layout/_third-party/analytics/baidu-analytics.njk","hash":"4790058691b7d36cf6d2d6b4e93795a7b8d608ad","modified":1627396648000},{"_id":"themes/next/layout/_third-party/analytics/google-analytics.njk","hash":"ad197fd728dd7ac90f910fdf80ce848eab3ff187","modified":1627396648000},{"_id":"themes/next/layout/_third-party/analytics/growingio.njk","hash":"5adea065641e8c55994dd2328ddae53215604928","modified":1627396648000},{"_id":"themes/next/layout/_third-party/analytics/index.njk","hash":"d87df68dff14cfb4d91a77230cd1ac795c2a22d5","modified":1627396648000},{"_id":"themes/next/layout/_third-party/chat/chatra.njk","hash":"f910618292c63871ca2e6c6e66c491f344fa7b1f","modified":1627396648000},{"_id":"themes/next/layout/_third-party/chat/tidio.njk","hash":"cba0e6e0fad08568a9e74ba9a5bee5341cfc04c1","modified":1627396648000},{"_id":"themes/next/layout/_third-party/comments/changyan.njk","hash":"5c2cd9b6f02bcb6248d3f18638a58e329fe8c0d1","modified":1627396648000},{"_id":"themes/next/layout/_third-party/comments/disqus.njk","hash":"cc1450d62d76e59968bdd25836694b8339207384","modified":1627396648000},{"_id":"themes/next/layout/_third-party/comments/disqusjs.njk","hash":"54eab4840443262432ec7c47e56e9859ace2a902","modified":1627396648000},{"_id":"themes/next/layout/_third-party/comments/gitalk.njk","hash":"ec0474e23ca122b34858ffb0bb8c99f241749c61","modified":1627396648000},{"_id":"themes/next/layout/_third-party/comments/livere.njk","hash":"6252b0353c6a36d03c68ebec1073293442221bd1","modified":1627396648000},{"_id":"themes/next/layout/_third-party/comments/valine.njk","hash":"72d7abe567fab181725d120cb27eb6a6379611ea","modified":1627396648000},{"_id":"themes/next/layout/_third-party/math/index.njk","hash":"b0efe26601037e621b5cb16f0fe2f347ee27acdb","modified":1627396648000},{"_id":"themes/next/layout/_third-party/math/katex.njk","hash":"b6746dfad32cc8a46ff8f4194a7a16ca41744803","modified":1627396648000},{"_id":"themes/next/layout/_third-party/math/mathjax.njk","hash":"a8239f99b316e6c060bad8173be3a25c67138697","modified":1627396648000},{"_id":"themes/next/layout/_third-party/search/algolia-search.njk","hash":"97035261aa85c7d39c6ce1211cdefc6248c0446d","modified":1627396648000},{"_id":"themes/next/layout/_third-party/search/localsearch.njk","hash":"767b6c714c22588bcd26ba70b0fc19b6810cbacd","modified":1627396648000},{"_id":"themes/next/layout/_third-party/search/swiftype.njk","hash":"ba0dbc06b9d244073a1c681ff7a722dcbf920b51","modified":1627396648000},{"_id":"themes/next/layout/_third-party/statistics/busuanzi-counter.njk","hash":"a4bc501da0f22f7e420f0ca47e83988ce90b1368","modified":1627396648000},{"_id":"themes/next/layout/_third-party/statistics/cnzz-analytics.njk","hash":"a17ace37876822327a2f9306a472974442c9005d","modified":1627396648000},{"_id":"themes/next/layout/_third-party/statistics/firestore.njk","hash":"8635b13aa1092c22252af4743fa194272f089b59","modified":1627396648000},{"_id":"themes/next/layout/_third-party/statistics/index.njk","hash":"8b956fb56284e8fa4a4731b1efd1f25e1b2b4a78","modified":1627396648000},{"_id":"themes/next/layout/_third-party/statistics/lean-analytics.njk","hash":"811a3ad58c0a15550100bdc199bef8add1ad526c","modified":1627396648000},{"_id":"themes/next/layout/_third-party/tags/mermaid.njk","hash":"007da98b913a62946c03a87f8fa25b3db856caa1","modified":1627396648000},{"_id":"themes/next/layout/_third-party/tags/pdf.njk","hash":"67d80a57f6b2cf23d56276ca8f30f25e3e8707e9","modified":1627396648000},{"_id":"themes/next/scripts/events/lib/config.js","hash":"545ebbd9f5aeb9f7a8e23737664c1f7d701275e1","modified":1627396648000},{"_id":"themes/next/scripts/events/lib/highlight.js","hash":"6aec7b2c38c50989a23bfaa0d560e75c7f553e12","modified":1627396648000},{"_id":"themes/next/scripts/events/lib/injects.js","hash":"7b0ea8d28ced63977dc6539920eb044b1098adcb","modified":1627396648000},{"_id":"themes/next/scripts/events/lib/utils.js","hash":"e227174a8ebab8d5b6e8e26faf4fd66c43f045ca","modified":1627396648000},{"_id":"themes/next/scripts/events/lib/vendors.js","hash":"f76c7e13fc4304f86260068c9d83d3477b64ee4b","modified":1627396648000},{"_id":"themes/next/scripts/filters/comment/changyan.js","hash":"199fa9a70914d0019cf0e47f55491183d53d1533","modified":1627396648000},{"_id":"themes/next/scripts/filters/comment/common.js","hash":"2486f3e0150c753e5f3af1a3665d074704b8ee2c","modified":1627396648000},{"_id":"themes/next/scripts/filters/comment/default-config.js","hash":"93ee5f9109dad885dc38c49bcee630c10f9dce6e","modified":1627396648000},{"_id":"themes/next/scripts/filters/comment/disqus.js","hash":"a9b18b7447cd5a56cb692c574463a27356eb7fa6","modified":1627396648000},{"_id":"themes/next/scripts/filters/comment/disqusjs.js","hash":"7b8ce8e9a71cf083f5337fb7c9586be8f7c316e8","modified":1627396648000},{"_id":"themes/next/scripts/filters/comment/gitalk.js","hash":"387e59cd396c62fe095b388c8ff8d4191cfbdeb9","modified":1627396648000},{"_id":"themes/next/scripts/filters/comment/livere.js","hash":"1198cb63375a53400431c2e65e3361416cdf8eb6","modified":1627396648000},{"_id":"themes/next/scripts/filters/comment/valine.js","hash":"c67984fc868d4799b3aa6d3b3cd060e5260b3a98","modified":1627396648000},{"_id":"themes/next/source/css/_variables/Gemini.styl","hash":"f4e694e5db81e57442c7e34505a416d818b3044a","modified":1627396648000},{"_id":"themes/next/source/css/_variables/Mist.styl","hash":"77dddb398fb1beefc2b824bec7b094030fdc3df9","modified":1627396648000},{"_id":"themes/next/source/css/_variables/Muse.styl","hash":"e3be898f5ebcf435a26542653a9297ff2c71aeb0","modified":1627396648000},{"_id":"themes/next/source/css/_variables/Pisces.styl","hash":"c65536a128b9bc9dbe2fbb1b235a3cded2891002","modified":1627396648000},{"_id":"themes/next/source/css/_variables/base.styl","hash":"efbeee48d208a3960b4e352fab3feb2b2dab7ef8","modified":1627396648000},{"_id":"themes/next/source/js/schemes/muse.js","hash":"d7a6c12bb534810eb748d0ba28aff67cccf0bb3f","modified":1627396648000},{"_id":"themes/next/source/css/_common/components/back-to-top-sidebar.styl","hash":"d4809783ded05625675b1b4bbd9e99d7f5f7d7f9","modified":1627396648000},{"_id":"themes/next/source/css/_common/components/back-to-top.styl","hash":"92915560810c0311dada43ed629b8fc4ff0fc7a4","modified":1627396648000},{"_id":"themes/next/source/css/_common/components/components.styl","hash":"1c75a837faae9aa2d0a5f30d2078aa8d2ccc2552","modified":1627396648000},{"_id":"themes/next/source/css/_common/components/reading-progress.styl","hash":"ee8fb8348aa76a9b346927ba4cae5666d8d777f7","modified":1627396648000},{"_id":"themes/next/source/css/_common/outline/mobile.styl","hash":"28368ac06d04ccf0bbf3dc9e0dfcf341c200b28c","modified":1627396648000},{"_id":"themes/next/source/css/_common/outline/outline.styl","hash":"0c9f72ad98807521cbdcee7b5bbe2e884311db39","modified":1627396648000},{"_id":"themes/next/source/css/_common/scaffolding/base.styl","hash":"ea96e86b6bcb160351c18a7edc4a561918a820cb","modified":1627396648000},{"_id":"themes/next/source/css/_common/scaffolding/buttons.styl","hash":"a042571d85ff7265f799004239a45f36b716b8a6","modified":1627396648000},{"_id":"themes/next/source/css/_common/scaffolding/comments.styl","hash":"e4fecc889ba3317a64e9abba5842c79dff9b7827","modified":1627396648000},{"_id":"themes/next/source/css/_common/scaffolding/normalize.styl","hash":"b56367ea676ea8e8783ea89cd4ab150c7da7a060","modified":1627396648000},{"_id":"themes/next/source/css/_common/scaffolding/pagination.styl","hash":"a472fb1afc6486266b85f773501a290e0a80c370","modified":1627396648000},{"_id":"themes/next/source/css/_common/scaffolding/scaffolding.styl","hash":"523fb7b653b87ae37fc91fc8813e4ffad87b0d7e","modified":1627396648000},{"_id":"themes/next/source/css/_common/scaffolding/tables.styl","hash":"e1c85ab2831fd7d4bb84aea1850a0160be0023e8","modified":1627396648000},{"_id":"themes/next/source/css/_common/scaffolding/toggles.styl","hash":"572a41499391677d84b16d8dbd6a996a3d5ce041","modified":1627396648000},{"_id":"themes/next/source/css/_schemes/Gemini/index.styl","hash":"7ad04d5a02a7618ebb09c1d5a435d46c4df2c620","modified":1627396648000},{"_id":"themes/next/source/css/_schemes/Mist/_header.styl","hash":"06786e1ed8774f8f08cbfc711296cf189aaf1b8c","modified":1627396648000},{"_id":"themes/next/source/css/_schemes/Mist/_layout.styl","hash":"5604ac1e161099a4d3e5657d53507268866dc717","modified":1627396648000},{"_id":"themes/next/source/css/_schemes/Mist/_menu.styl","hash":"f6d165dae928c12bde3f271d299a93b334116433","modified":1627396648000},{"_id":"themes/next/source/css/_schemes/Mist/_posts-expand.styl","hash":"faadd1616a18d626f145e9fbdbfb770deab35b2c","modified":1627396648000},{"_id":"themes/next/source/css/_schemes/Mist/index.styl","hash":"ab16a3dcdc0393b9b582ef59dcc13db9320e917c","modified":1627396648000},{"_id":"themes/next/source/css/_schemes/Muse/_header.styl","hash":"06080fd963c904d96c00eff098a284e337953013","modified":1627396648000},{"_id":"themes/next/source/css/_schemes/Muse/_layout.styl","hash":"82a29572dd90451f75358a2ee2522b87304a0bb8","modified":1627396648000},{"_id":"themes/next/source/css/_schemes/Muse/_menu.styl","hash":"c706733f5196776fe2657a9bebe0a727cf8fe8e5","modified":1627396648000},{"_id":"themes/next/source/css/_schemes/Muse/_sidebar.styl","hash":"a57dca7008b1f4721359a2a3b420ed2eec02b0a1","modified":1627396648000},{"_id":"themes/next/source/css/_schemes/Muse/_sub-menu.styl","hash":"c48ccd8d6651fe1a01faff8f01179456d39ba9b1","modified":1627396648000},{"_id":"themes/next/source/css/_schemes/Muse/index.styl","hash":"6ad168288b213cec357e9b5a97674ff2ef3a910c","modified":1627396648000},{"_id":"themes/next/source/css/_schemes/Pisces/_header.styl","hash":"be5c46b983df08b9dbac1b4749b1a101b54b6b50","modified":1627396648000},{"_id":"themes/next/source/css/_schemes/Pisces/_layout.styl","hash":"6eee86c8f0175d6c09e434053516cd8556f78d44","modified":1627396648000},{"_id":"themes/next/source/css/_schemes/Pisces/_menu.styl","hash":"c435cfd858bf82726fff2c85d384e2207bea0370","modified":1627396648000},{"_id":"themes/next/source/css/_schemes/Pisces/_sidebar.styl","hash":"031765bd4564d97ba694c1b73615ed631f1c64aa","modified":1627396648000},{"_id":"themes/next/source/css/_schemes/Pisces/_sub-menu.styl","hash":"78f0b6edc296a9ed5144da9f9752c0b96bebfaa5","modified":1627396648000},{"_id":"themes/next/source/css/_schemes/Pisces/index.styl","hash":"8000075b227749a7495eaf417cac6ccfbe441580","modified":1627396648000},{"_id":"themes/next/source/css/_common/components/pages/breadcrumb.styl","hash":"8afdc311c6b8db121758371f95cf1c5e77354f42","modified":1627396648000},{"_id":"themes/next/source/css/_common/components/pages/categories.styl","hash":"b6e2eb1550a7845cb2adf86081a4ab6c7bde1e68","modified":1627396648000},{"_id":"themes/next/source/css/_common/components/pages/pages.styl","hash":"7504dbc5c70262b048143b2c37d2b5aa2809afa2","modified":1627396648000},{"_id":"themes/next/source/css/_common/components/pages/schedule.styl","hash":"19fc5ca0784f5d2befddb9d8bc463b916c5c2518","modified":1627396648000},{"_id":"themes/next/source/css/_common/components/pages/tag-cloud.styl","hash":"1a81d1a71fcf0699629ce6e72dfd0a15f3a2dd0a","modified":1627396648000},{"_id":"themes/next/source/css/_common/components/post/post-body.styl","hash":"5d61dedb3bec1021d52894f9b379e4d0953f6a35","modified":1627396648000},{"_id":"themes/next/source/css/_common/components/post/post-collapse.styl","hash":"8998a07acf0dbd10811835c8dfc91d92e680bcae","modified":1627396648000},{"_id":"themes/next/source/css/_common/components/post/post-followme.styl","hash":"76d0dfb3a8b873a6180604ac6daecf38b6a963a2","modified":1627396648000},{"_id":"themes/next/source/css/_common/components/post/post-footer.styl","hash":"8a2e724df3d5cd14765eb951f0a9e1dba399fd35","modified":1627396648000},{"_id":"themes/next/source/css/_common/components/post/post-gallery.styl","hash":"aa366d37389760c8595529b850f461569577a1c5","modified":1627396648000},{"_id":"themes/next/source/css/_common/components/post/post-header.styl","hash":"d6ecc5dfd15c588782ba5e1df9f915b305622aef","modified":1627396648000},{"_id":"themes/next/source/css/_common/components/post/post-nav.styl","hash":"cf6540e12c2de5befcfb7e92d915e3b75fd53dfa","modified":1627396648000},{"_id":"themes/next/source/css/_common/components/post/post-reward.styl","hash":"27001ad06f69ff035639210ab2f614861b21a4f4","modified":1627396648000},{"_id":"themes/next/source/css/_common/components/post/post-widgets.styl","hash":"5b5649b9749e3fd8b63aef22ceeece0a6e1df605","modified":1627396648000},{"_id":"themes/next/source/css/_common/components/post/post.styl","hash":"b3fa752f72ca1413289b76c56fbd33a00e3d25d7","modified":1627396648000},{"_id":"themes/next/source/css/_common/components/third-party/gitalk.styl","hash":"8a7fc03a568b95be8d3337195e38bc7ec5ba2b23","modified":1627396648000},{"_id":"themes/next/source/css/_common/components/third-party/math.styl","hash":"48ee817d05ddc788423d7f10e9823e23fda81d04","modified":1627396648000},{"_id":"themes/next/source/css/_common/components/third-party/related-posts.styl","hash":"2c534d2b2dbc932ad65d335a720a7ba9612bac04","modified":1627396648000},{"_id":"themes/next/source/css/_common/components/third-party/search.styl","hash":"2896840ab8ac8ab2a7f76d18df893f290ac31625","modified":1627396648000},{"_id":"themes/next/source/css/_common/components/third-party/third-party.styl","hash":"5d8fc91cdb7ee313eb367dcec7d5b2429f98242f","modified":1627396648000},{"_id":"themes/next/source/css/_common/outline/footer/footer.styl","hash":"f11dca93e334b68a29e792f7abe682993fab7568","modified":1627396648000},{"_id":"themes/next/source/css/_common/outline/header/bookmark.styl","hash":"8cb89864e8245a356d08ef0fee3133810f646fea","modified":1627396648000},{"_id":"themes/next/source/css/_common/outline/header/github-banner.styl","hash":"254e781e7b25e31a1a589c8b38dc608802f1cc6e","modified":1627396648000},{"_id":"themes/next/source/css/_common/outline/header/header.styl","hash":"f1778d2c56974b96dae429456d5c55be325c4946","modified":1627396648000},{"_id":"themes/next/source/css/_common/outline/header/menu.styl","hash":"6d8afd8e23c40bb2b2a2edbe4eb0d2671cd81188","modified":1627396648000},{"_id":"themes/next/source/css/_common/outline/header/site-meta.styl","hash":"a83a1236564b81eab9a23dba9a634a6de90d4726","modified":1627396648000},{"_id":"themes/next/source/css/_common/outline/header/site-nav.styl","hash":"9c8abc55c9d94d384a245013951aba5ecca2f4fe","modified":1627396648000},{"_id":"themes/next/source/css/_common/outline/sidebar/sidebar-author-links.styl","hash":"66782e68f1c74a7d0aecef20e2ca16bbe6b52592","modified":1627396648000},{"_id":"themes/next/source/css/_common/outline/sidebar/sidebar-author.styl","hash":"5b38ac4a0f1ade0e681aff0e3366c481d9cf3dcd","modified":1627396648000},{"_id":"themes/next/source/css/_common/outline/sidebar/sidebar-blogroll.styl","hash":"9950c3188a28e1c63b5498b7bdcd14b12ace3e28","modified":1627396648000},{"_id":"themes/next/source/css/_common/outline/sidebar/sidebar-button.styl","hash":"ab715dbf2b98bfeb5e7b7c43e92e5c02496cc2ea","modified":1627396648000},{"_id":"themes/next/source/css/_common/outline/sidebar/sidebar-dimmer.styl","hash":"521b36ea7bb3a843029cbfbb6b5e76e91c40a19f","modified":1627396648000},{"_id":"themes/next/source/css/_common/outline/sidebar/sidebar-nav.styl","hash":"f7ff85fe6c4efb8ff036fab2c3277b7d8bed69a8","modified":1627396648000},{"_id":"themes/next/source/css/_common/outline/sidebar/sidebar-toc.styl","hash":"469855a72d2c2b63a21df8fbcb8cc41d32cb9bde","modified":1627396648000},{"_id":"themes/next/source/css/_common/outline/sidebar/sidebar-toggle.styl","hash":"432e73bc4f99322af6af1852e0ea6e674919c31a","modified":1627396648000},{"_id":"themes/next/source/css/_common/outline/sidebar/sidebar.styl","hash":"3378f4d1640033ebde25798f602fddf88f3dcadd","modified":1627396648000},{"_id":"themes/next/source/css/_common/outline/sidebar/site-state.styl","hash":"497fc002d7415d9bed8cad26ba74ac66045397b7","modified":1627396648000},{"_id":"themes/next/source/css/_common/scaffolding/highlight/copy-code.styl","hash":"83ee4993710fc8daa1c8dbfccd5d5091fd244c30","modified":1627396648000},{"_id":"themes/next/source/css/_common/scaffolding/highlight/highlight.styl","hash":"920f21dc03b28f006aef7e9d0fd444c2cd283efc","modified":1627396648000},{"_id":"themes/next/source/css/_common/scaffolding/tags/blockquote-center.styl","hash":"15a5e273a8137550c93c8d2a60f9fcf86e04a89e","modified":1627396648000},{"_id":"themes/next/source/css/_common/scaffolding/tags/group-pictures.styl","hash":"393ff96234e4196b569d4b11496774eb78e147de","modified":1627396648000},{"_id":"themes/next/source/css/_common/scaffolding/tags/label.styl","hash":"f09bc97e3681d73c38d7d3c5c271486c2c6537e2","modified":1627396648000},{"_id":"themes/next/source/css/_common/scaffolding/tags/link-grid.styl","hash":"acfdec45e56cdd6a5ea61e0154f8a6d1bc068214","modified":1627396648000},{"_id":"themes/next/source/css/_common/scaffolding/tags/mermaid.styl","hash":"3c029a003e9bf747e1b9cc7c0c127f6028374876","modified":1627396648000},{"_id":"themes/next/source/css/_common/scaffolding/tags/note.styl","hash":"29bef220307d86b1eafbb3714381df32d48b5a60","modified":1627396648000},{"_id":"themes/next/source/css/_common/scaffolding/tags/pdf.styl","hash":"b49c64f8e9a6ca1c45c0ba98febf1974fdd03616","modified":1627396648000},{"_id":"themes/next/source/css/_common/scaffolding/tags/tabs.styl","hash":"dcf426c2a4836386c0c27235de3f9a95c5de67cc","modified":1627396648000},{"_id":"themes/next/source/css/_common/scaffolding/tags/tags.styl","hash":"cef4e779473daa3761709958243c6b8a57bbd814","modified":1627396648000},{"_id":"themes/next/source/images/wechatpay.png","hash":"53dcf0b8adb566665b60b0913911a4f998930aa5","modified":1627396648000},{"_id":"themes/next/source/images/alipay.png","hash":"e7ba6888dbfe5f469f0631b338efacdaa1c0bb28","modified":1627396648000},{"_id":"public/baidu_verify_code-wmM3n7u2hd.html","hash":"3bbd48dccf699a160ba95c76769ecb365eb942a6","modified":1627438939994},{"_id":"public/google5e79a31eb19e1434.html","hash":"7f2bca1d239a7935e9a69404d00bf2e48cbff348","modified":1627438939994},{"_id":"public/baidu_urls.txt","hash":"ae4b0f1588d96088cb865ae263060294e83c401c","modified":1627438939994},{"_id":"public/baidusitemap.xml","hash":"1163824dde14b708ca7ffb1c583bd9ed102c9c2e","modified":1627438939994},{"_id":"public/search.xml","hash":"c98374668e3f0ca9443c51b7a49c11e0a81981aa","modified":1627438939994},{"_id":"public/sitemap.xml","hash":"2cc1d559ea0f8077d60cecaaf7f12a9a6bb2c26a","modified":1627438939994},{"_id":"public/404.html","hash":"b6932beb6ad5ff44cc45cb72147fcb369f6a2e6f","modified":1627438939994},{"_id":"public/about/index.html","hash":"c1a8bc0cb50ff12b07acd0d4bea24eb33fbac160","modified":1627438939994},{"_id":"public/guestbook/index.html","hash":"de6f2c60bda160e54ce6908feb94c2d81a3d74c1","modified":1627438939994},{"_id":"public/archives/2021/02/index.html","hash":"78eedb6be8d7b0f3281faa2210d189df7905bd31","modified":1627438939994},{"_id":"public/archives/2021/03/index.html","hash":"45b8a89d1481d31bbbc489bf1b2f2dbf9fcfbfab","modified":1627438939994},{"_id":"public/archives/2021/04/index.html","hash":"1304ea48ce4fab1373e8e4e99210e9280f064688","modified":1627438939994},{"_id":"public/archives/2021/07/index.html","hash":"3c3c16126c8c6edeeb2bd3c343df9f58c3122e82","modified":1627438939994},{"_id":"public/categories/C语言/index.html","hash":"28b586f8dd1116e63778fdd25179b97e6a7e66cb","modified":1627438939994},{"_id":"public/categories/机器学习/index.html","hash":"a8f34c5d13a753b2b3c7f29da1d9531e6144dc6d","modified":1627438939994},{"_id":"public/categories/Java/index.html","hash":"42f20971c229052f14c551e6aff3d782bd321e37","modified":1627438939994},{"_id":"public/categories/后端/index.html","hash":"b381f562c6d7d8a4ac030485022e4b4793ec149c","modified":1627438939994},{"_id":"public/categories/设计模式/index.html","hash":"75109b50962f5281b94e24c3f1f1dd848b713d11","modified":1627438939994},{"_id":"public/categories/碎碎念/index.html","hash":"fa1b88bfc670c648d6d3ae2984f62bd6896c11f2","modified":1627438939994},{"_id":"public/categories/面试/index.html","hash":"fa72f63135eecb78c5a7d2f80dc00e9b682bf7e6","modified":1627438939994},{"_id":"public/tags/F021程序设计/index.html","hash":"42aad10a3233fe3e1e9c755e5ad26bcf877e58ee","modified":1627438939994},{"_id":"public/tags/Ajax/index.html","hash":"4ced6b64ceec03aa173552ab35da266ae2b2cef6","modified":1627438939994},{"_id":"public/tags/机器学习/index.html","hash":"4e90ac5b1ca1296795f375db96ae3fa7c55852d3","modified":1627438939994},{"_id":"public/tags/C语言/index.html","hash":"f306d22b45ef857b2735c17ea1469542e7ecab5c","modified":1627438939994},{"_id":"public/tags/Java/index.html","hash":"00a1c66832ba826eeb7dfbb93e47f3e3b0bef7a3","modified":1627438939994},{"_id":"public/tags/Linux/index.html","hash":"0db91e3f690f6f108e30e273e0765c51c59bafa8","modified":1627438939994},{"_id":"public/tags/LAMP/index.html","hash":"5a8871158533a1ccb6ac92b379c89f2402b187b5","modified":1627438939994},{"_id":"public/tags/服务器/index.html","hash":"feedc5de91fc3d0719e8aa5aa15c13d80714317f","modified":1627438939994},{"_id":"public/tags/php/index.html","hash":"cb61210d94f5968d331b6c3366cbbc9a42fad543","modified":1627438939994},{"_id":"public/tags/createjs/index.html","hash":"73b3955b8f4706ef7c673776a315c43442be17f3","modified":1627438939994},{"_id":"public/tags/happyBirthday/index.html","hash":"af669b7b141e5724180054ead4df7aab2124ec6b","modified":1627438939994},{"_id":"public/tags/PicGo/index.html","hash":"1e84c3056adc17126714035a5d42a173ae24ded4","modified":1627438939994},{"_id":"public/tags/gitee/index.html","hash":"bc3a312a0231f3df810e29a18dd4f8b409477bba","modified":1627438939994},{"_id":"public/tags/Typora/index.html","hash":"2eb6b52c3b8d8ae926391f5c8499e54fcba4c076","modified":1627438939994},{"_id":"public/tags/图床/index.html","hash":"8cee231e9ad6a37c7ba07bbbdc7d7d6320b1676f","modified":1627438939994},{"_id":"public/tags/laravel/index.html","hash":"5eddd2318e38c197d925ed38982e6ca2184275a3","modified":1627438939994},{"_id":"public/tags/设计模式/index.html","hash":"79e1cc9bae93bc1ceed021b0073458d4a07d685f","modified":1627438939994},{"_id":"public/tags/碎碎念/index.html","hash":"c7e1e611c2b0437fd34c3a95fdf1af18e0cfac71","modified":1627438939994},{"_id":"public/tags/面试/index.html","hash":"3257ea52fb2a71e90d5f1262359cef812dd876dc","modified":1627438939994},{"_id":"public/categories/index.html","hash":"27e03ecbca67d7ade3b84250ed3234fd84e293e5","modified":1627438939994},{"_id":"public/tags/index.html","hash":"0081b6c83fb42718f23c1db6f645342c1e17294e","modified":1627438939994},{"_id":"public/posts/6052/index.html","hash":"8b8e6ec8c1a352291ba009d7f91a53b49852030d","modified":1627438939994},{"_id":"public/posts/12082/index.html","hash":"11e08650a6fbe9427911ea144fa2719685c8ee64","modified":1627438939994},{"_id":"public/posts/20921/index.html","hash":"ef8a46d971afc5f4af27e301f1d05f5e34d63030","modified":1627438939994},{"_id":"public/posts/30139/index.html","hash":"3f04758e8f98c73e07d794bbdf396139a14943d7","modified":1627438939994},{"_id":"public/posts/8665/index.html","hash":"74e73bde245fab65db37bc9ed6e2e3863521b280","modified":1627438939994},{"_id":"public/posts/8642/index.html","hash":"7fbe92ba33a71407fc71343e1c5ae9dc3fbec952","modified":1627438939994},{"_id":"public/posts/48614/index.html","hash":"19549d618517c1e21c202bb8a5ee2b9c9f32c2a3","modified":1627438939994},{"_id":"public/posts/46132/index.html","hash":"38ea984a13fb7bc28fd9e28ce5af819ec493431d","modified":1627438939994},{"_id":"public/posts/36363/index.html","hash":"0b585acc9e48acef5a57c2b7aa5999aea2a8adce","modified":1627438939994},{"_id":"public/posts/10295/index.html","hash":"b0574113672fa4924c5262b21ce60795a9d46e55","modified":1627438939994},{"_id":"public/posts/46614/index.html","hash":"67eb873737eeccc42790fe9ad17808891dca68ea","modified":1627438939994},{"_id":"public/posts/21767/index.html","hash":"f0168bd0c692c352f76e3af5d4a2f26bc1643312","modified":1627438939994},{"_id":"public/posts/7375/index.html","hash":"106e82fa45094dbe0f8d2fac729dc883748914e5","modified":1627438939994},{"_id":"public/posts/51387/index.html","hash":"b1e286a3c9233ddc61d38beed3879849d50f23c8","modified":1627438939994},{"_id":"public/posts/10521/index.html","hash":"13b95daa242e09a68640687f2129847d519ba40c","modified":1627438939994},{"_id":"public/posts/31746/index.html","hash":"83fda4e68f84b0f4cb8ac00dc76f57a2368b5240","modified":1627438939994},{"_id":"public/posts/60349/index.html","hash":"517f805283f77442a0e87a1e1c1ae80da5890cec","modified":1627438939994},{"_id":"public/posts/35823/index.html","hash":"4af0fd30d6c87030f1932a056db949445fe773ce","modified":1627438939994},{"_id":"public/posts/35573/index.html","hash":"ff092430bf72f133affe048a161e99958d47d9f3","modified":1627438939994},{"_id":"public/posts/17594/index.html","hash":"60c1e67cb64e99132b220fc0b8009e03d8c2e51d","modified":1627438939994},{"_id":"public/posts/59786/index.html","hash":"ae91c3715c24dbeb512c319dc328786b805011ad","modified":1627438939994},{"_id":"public/posts/35224/index.html","hash":"273e8a126a1dae14ec9549aed1d3e118a172ecbb","modified":1627438939994},{"_id":"public/posts/15278/index.html","hash":"e6067f9f7364d029ae3ccbcb32a7de7789d56fd2","modified":1627438939994},{"_id":"public/posts/16318/index.html","hash":"5b89d22bf4001fddd3053b3364fd9af4dea2290f","modified":1627438939994},{"_id":"public/posts/51896/index.html","hash":"44dcccadf67099f2751a01f0a8ae87eca78c307f","modified":1627438939994},{"_id":"public/posts/9223/index.html","hash":"40158f15dd7a6f84fa34b44000702e653ab91933","modified":1627438939994},{"_id":"public/posts/49927/index.html","hash":"661c69bbb9dd3edbbbcf3f309b04bc8e05d7459b","modified":1627438939994},{"_id":"public/posts/63675/index.html","hash":"84499f23d4aeab9a9f874f322588a5326a1f795e","modified":1627438939994},{"_id":"public/posts/57141/index.html","hash":"8424a2bb42db4eed9f163afabd7c8bf33d78a653","modified":1627438939994},{"_id":"public/posts/4895/index.html","hash":"b1b6e31022006cd8e5539079237dfde161b425aa","modified":1627438939994},{"_id":"public/posts/6348/index.html","hash":"c16060b3e84865755b63fe40da7fa55d56707395","modified":1627438939994},{"_id":"public/posts/24577/index.html","hash":"c3cea0f9d4f417db7cbad9b97ece1ee5776fe7cf","modified":1627438939994},{"_id":"public/posts/48994/index.html","hash":"ec424f091425369e7f0dddeb42c31c0999884d35","modified":1627438939994},{"_id":"public/posts/13481/index.html","hash":"2f74738be8c9d108c1d914b32dfcd2bb46cd896f","modified":1627438939994},{"_id":"public/posts/16600/index.html","hash":"094c52bc78ab39af976d6a3dc5cb54b902394099","modified":1627438939994},{"_id":"public/posts/49250/index.html","hash":"9788c535dddc871a316e4b97233e90d54a6d1a3c","modified":1627438939994},{"_id":"public/posts/55230/index.html","hash":"7feddb3b760383c58f501bf62e2bc5de6dd48723","modified":1627438939994},{"_id":"public/posts/13713/index.html","hash":"f9452e38292934ae45946d3085fbe1c1ecb7a2ca","modified":1627438939994},{"_id":"public/posts/30138/index.html","hash":"baa29ccc36f09901c2942a1b28db0c06dcdeb642","modified":1627438939994},{"_id":"public/archives/index.html","hash":"4fe0e13492b962e404bdc52fb4aab489bd95544c","modified":1627438939994},{"_id":"public/archives/page/2/index.html","hash":"eba5df868cd4893b6efe028852e21a9f51ad8ff5","modified":1627438939994},{"_id":"public/archives/page/3/index.html","hash":"d33aa6a3cc0430cc8ddd2a2ffbdb0492c342a6ff","modified":1627438939994},{"_id":"public/archives/page/4/index.html","hash":"23d45f61e58eb3a4c8849d45d2efe850cd856612","modified":1627438939994},{"_id":"public/archives/2021/index.html","hash":"12f9392745bc422a9f5f08621b5b1811400a55f6","modified":1627438939994},{"_id":"public/archives/2021/page/2/index.html","hash":"5a5fa43dac307066aa0148b724934a59041e8716","modified":1627438939994},{"_id":"public/archives/2021/page/3/index.html","hash":"bf4c375f860c8c749520f36b7aeea8dfa63fcd64","modified":1627438939994},{"_id":"public/archives/2021/page/4/index.html","hash":"df414b54087a71a45d3b8d09810700c6a6d35d0b","modified":1627438939994},{"_id":"public/archives/2021/01/index.html","hash":"bf3f2c48c4057514d50f154fe84e3ac70fc26106","modified":1627438939994},{"_id":"public/archives/2021/01/page/2/index.html","hash":"e8e8f300dc7fe3e16de42c937fa98813be0925fc","modified":1627438939994},{"_id":"public/archives/2021/01/page/3/index.html","hash":"3ca543573af5ca99678e2a53bfd12f943a118d67","modified":1627438939994},{"_id":"public/archives/2021/05/index.html","hash":"48abe71c6c57a1be2f37d24b137a936dfc1259ad","modified":1627438939994},{"_id":"public/archives/2021/06/index.html","hash":"3640165375c8cfcd559823f59b2f9d9a18c08678","modified":1627438939994},{"_id":"public/categories/前端/index.html","hash":"cf4a50388805dd30bd35a7d970a02445bf10128c","modified":1627438939994},{"_id":"public/categories/Python/index.html","hash":"70c9802cdd039bb46e6e255dc114584730191d1f","modified":1627438939994},{"_id":"public/categories/Python/page/2/index.html","hash":"7c330875862ef2e11e25215710f0eaede32c004b","modified":1627438939994},{"_id":"public/categories/hexo/index.html","hash":"72cd71ea8c67febb946d63f872f91006cebe9df0","modified":1627438939994},{"_id":"public/index.html","hash":"18b7a54ffd601f5448316c02d6f8d9d593fb794e","modified":1627438939994},{"_id":"public/page/2/index.html","hash":"c0f7229c04856a451e169493548040897ba9c26e","modified":1627438939994},{"_id":"public/page/3/index.html","hash":"f7a776fedf56e66ebab8aca2bc70a04a06d190fb","modified":1627438939994},{"_id":"public/page/4/index.html","hash":"8637fbd206d548ef23334104670a6aa8cf6c774f","modified":1627438939994},{"_id":"public/tags/前端/index.html","hash":"af6eefca3c384aa6688e1c2e8596a456a397284e","modified":1627438939994},{"_id":"public/tags/Python/index.html","hash":"8930a5965fbff93af156a9e6a77c56bf037416c9","modified":1627438939994},{"_id":"public/tags/Python/page/2/index.html","hash":"28ab4d86befcf231b4bdb160539c718f5184f009","modified":1627438939994},{"_id":"public/tags/hexo/index.html","hash":"e5eb7530c546dbc5d7a83cfff52de63b6ac09ccc","modified":1627438939994},{"_id":"public/tags/next/index.html","hash":"dd3ad275f47da04dfd6a2f287e97387aa126f199","modified":1627438939994},{"_id":"public/CNAME","hash":"867a33d9b8987dcef70cf30d0fc23737b7604f43","modified":1627438939994},{"_id":"public/images/apple-touch-icon-next.png","hash":"2959dbc97f31c80283e67104fe0854e2369e40aa","modified":1627438939994},{"_id":"public/images/avatar.jpg","hash":"7aa6b13cecc6eca64b8d5e1860b1c57a867bd5bf","modified":1627438939994},{"_id":"public/images/cc-by-nc-nd.svg","hash":"c6524ece3f8039a5f612feaf865d21ec8a794564","modified":1627438939994},{"_id":"public/images/cc-by-nc-sa.svg","hash":"3031be41e8753c70508aa88e84ed8f4f653f157e","modified":1627438939994},{"_id":"public/images/cc-by-nc.svg","hash":"8d39b39d88f8501c0d27f8df9aae47136ebc59b7","modified":1627438939994},{"_id":"public/images/cc-by-nd.svg","hash":"c563508ce9ced1e66948024ba1153400ac0e0621","modified":1627438939994},{"_id":"public/images/cc-by-sa.svg","hash":"aa4742d733c8af8d38d4c183b8adbdcab045872e","modified":1627438939994},{"_id":"public/images/cc-by.svg","hash":"28a0a4fe355a974a5e42f68031652b76798d4f7e","modified":1627438939994},{"_id":"public/images/cc-zero.svg","hash":"87669bf8ac268a91d027a0a4802c92a1473e9030","modified":1627438939994},{"_id":"public/images/favicon-16x16-next.png","hash":"943a0d67a9cdf8c198109b28f9dbd42f761d11c3","modified":1627438939994},{"_id":"public/images/favicon-32x32-next.png","hash":"0749d7b24b0d2fae1c8eb7f671ad4646ee1894b1","modified":1627438939994},{"_id":"public/images/logo-algolia-nebula-blue-full.svg","hash":"b85e274207b1392782476a0430feac98db1e7da0","modified":1627438939994},{"_id":"public/images/logo.svg","hash":"d29cacbae1bdc4bbccb542107ee0524fe55ad6de","modified":1627438939994},{"_id":"public/lib/hbe.js","hash":"136dba00826bdd086153bf0acb5473aea7183ad1","modified":1627438939994},{"_id":"public/css/hbe.style.css","hash":"b0a0077cb588c0941823905fcc383aa7509ade73","modified":1627438939994},{"_id":"public/images/wechatpay.png","hash":"53dcf0b8adb566665b60b0913911a4f998930aa5","modified":1627438939994},{"_id":"public/images/alipay.png","hash":"e7ba6888dbfe5f469f0631b338efacdaa1c0bb28","modified":1627438939994},{"_id":"public/love.js","hash":"da1ac4e3a0141ca7d1e73904577ed8a78ec95266","modified":1627438939994},{"_id":"public/js/bookmark.js","hash":"e45e1fbb7c6d645e9c410759486216e570d02bef","modified":1627438939994},{"_id":"public/js/motion.js","hash":"6d4bd07a6f8e1b4083119dca0acb5b289533b619","modified":1627438939994},{"_id":"public/js/algolia-search.js","hash":"a6f78c4cfffa976e4b8043e3486ce99aaba02bda","modified":1627438939994},{"_id":"public/js/local-search.js","hash":"9f4fe7bbe0f16be72d26ccb8b22bd33767f83cff","modified":1627438939994},{"_id":"public/js/next-boot.js","hash":"da67f3eed604dcdc4e89280c9db69fe1f62818e9","modified":1627438939994},{"_id":"public/js/utils.js","hash":"bc4217f9779b81c0f56de985c46d73c21d3992d5","modified":1627438939994},{"_id":"public/js/schedule.js","hash":"ababd67895ce49049271601c6928fce56a1c6bbb","modified":1627438939994},{"_id":"public/js/schemes/muse.js","hash":"d7a6c12bb534810eb748d0ba28aff67cccf0bb3f","modified":1627438939994},{"_id":"public/css/main.css","hash":"ddb2fde4949b1c76917eac0ba448ff3c26f1292b","modified":1627438939994}],"Category":[{"name":"C语言","_id":"ckrmv4jgj0004zrfyeq40cue8"},{"name":"前端","_id":"ckrmv4jgq000czrfyht1leq4q"},{"name":"机器学习","_id":"ckrmv4jh1000qzrfy4ltg4u3v"},{"name":"Java","_id":"ckrmv4jh5000wzrfyh2apefee"},{"name":"后端","_id":"ckrmv4jh80013zrfy09avhtd9"},{"name":"Python","_id":"ckrmv4jhb001azrfyd3orh6c3"},{"name":"hexo","_id":"ckrmv4ji7002yzrfy9j8d0tok"},{"name":"设计模式","_id":"ckrmv4jio003yzrfy07rb2bn6"},{"name":"碎碎念","_id":"ckrmv4jir0047zrfy73qt5gc8"},{"name":"面试","_id":"ckrmv4jis004czrfya06xg5t5"}],"Data":[],"Page":[{"_content":"<!DOCTYPE HTML>\n<html>\n<head>\n  <meta http-equiv=\"content-type\" content=\"text/html;charset=utf-8;\"/>\n  <meta http-equiv=\"X-UA-Compatible\" content=\"IE=edge,chrome=1\" />\n  <meta name=\"robots\" content=\"all\" />\n  <meta name=\"robots\" content=\"index,follow\"/>\n</head>\n<body>\n<script type=\"text/javascript\" src=\"//qzonestyle.gtimg.cn/qzone/hybrid/app/404/search_children.js\" charset=\"utf-8\" homePageUrl=\"https://romanticqq.github.io\" homePageName=\"回到我的主页\"></script>\n</body>\n</html>\n","source":"404.html","raw":"<!DOCTYPE HTML>\n<html>\n<head>\n  <meta http-equiv=\"content-type\" content=\"text/html;charset=utf-8;\"/>\n  <meta http-equiv=\"X-UA-Compatible\" content=\"IE=edge,chrome=1\" />\n  <meta name=\"robots\" content=\"all\" />\n  <meta name=\"robots\" content=\"index,follow\"/>\n</head>\n<body>\n<script type=\"text/javascript\" src=\"//qzonestyle.gtimg.cn/qzone/hybrid/app/404/search_children.js\" charset=\"utf-8\" homePageUrl=\"https://romanticqq.github.io\" homePageName=\"回到我的主页\"></script>\n</body>\n</html>\n","date":"2021-07-27T14:41:17.225Z","updated":"2021-07-27T14:37:28.000Z","path":"404.html","title":"","comments":1,"layout":"page","_id":"ckrmv4jg90000zrfyffk8b37m","content":"<!DOCTYPE HTML>\n<html>\n<head>\n  <meta http-equiv=\"content-type\" content=\"text/html;charset=utf-8;\">\n  <meta http-equiv=\"X-UA-Compatible\" content=\"IE=edge,chrome=1\">\n  <meta name=\"robots\" content=\"all\">\n  <meta name=\"robots\" content=\"index,follow\">\n</head>\n<body>\n<script type=\"text/javascript\" src=\"//qzonestyle.gtimg.cn/qzone/hybrid/app/404/search_children.js\" charset=\"utf-8\" homepageurl=\"https://romanticqq.github.io\" homepagename=\"回到我的主页\"></script>\n</body>\n</html>\n","site":{"data":{}},"length":0,"excerpt":"","more":"<!DOCTYPE HTML>\n<html>\n<head>\n  <meta http-equiv=\"content-type\" content=\"text/html;charset=utf-8;\">\n  <meta http-equiv=\"X-UA-Compatible\" content=\"IE=edge,chrome=1\">\n  <meta name=\"robots\" content=\"all\">\n  <meta name=\"robots\" content=\"index,follow\">\n</head>\n<body>\n<script type=\"text/javascript\" src=\"//qzonestyle.gtimg.cn/qzone/hybrid/app/404/search_children.js\" charset=\"utf-8\" homepageurl=\"https://romanticqq.github.io\" homepagename=\"回到我的主页\"></script>\n</body>\n</html>\n"},{"layout":"false","_content":"84febf4865f39eaaf4ac6723997aee89","source":"baidu_verify_code-wmM3n7u2hd.html","raw":"layout: false\n---\n84febf4865f39eaaf4ac6723997aee89","date":"2021-07-27T14:41:17.234Z","updated":"2021-07-27T14:37:28.000Z","path":"baidu_verify_code-wmM3n7u2hd.html","title":"","comments":1,"_id":"ckrmv4jgg0002zrfy8dhjg6v4","content":"84febf4865f39eaaf4ac6723997aee89","site":{"data":{}},"length":32,"excerpt":"","more":"84febf4865f39eaaf4ac6723997aee89"},{"layout":"false","_content":"google-site-verification: google5e79a31eb19e1434.html","source":"google5e79a31eb19e1434.html","raw":"layout: false\n---\ngoogle-site-verification: google5e79a31eb19e1434.html","date":"2021-07-27T14:41:17.240Z","updated":"2021-07-27T14:37:28.000Z","path":"google5e79a31eb19e1434.html","title":"","comments":1,"_id":"ckrmv4jgl0006zrfyglev4phg","content":"google-site-verification: google5e79a31eb19e1434.html","site":{"data":{}},"length":52,"excerpt":"","more":"google-site-verification: google5e79a31eb19e1434.html"},{"title":"关于","date":"2021-01-09T05:23:35.000Z","type":"about","comments":0,"_content":"","source":"about/index.md","raw":"---\ntitle: 关于\ndate: 2021-01-09 13:23:35\ntype: \"about\"\ncomments: false\n---\n","updated":"2021-07-27T14:37:28.000Z","path":"about/index.html","layout":"page","_id":"ckrmv4jgn0008zrfy5hxt5zqi","content":"","site":{"data":{}},"length":0,"excerpt":"","more":""},{"title":"分类","date":"2021-01-03T08:15:22.000Z","type":"categories","comments":0,"_content":"","source":"categories/index.md","raw":"---\ntitle: 分类\ndate: 2021-01-03 16:15:22\ntype: \"categories\"\ncomments: false\n---\n","updated":"2021-07-27T14:37:28.000Z","path":"categories/index.html","layout":"page","_id":"ckrmv4jgo000azrfy89rc6om2","content":"","site":{"data":{}},"length":0,"excerpt":"","more":""},{"title":"留言板","date":"2021-01-09T08:20:21.000Z","type":"guestbook","_content":"","source":"guestbook/index.md","raw":"---\ntitle: 留言板\ndate: 2021-01-09 16:20:21\ntype: \"guestbook\"\n---\n","updated":"2021-07-27T14:37:28.000Z","path":"guestbook/index.html","comments":1,"layout":"page","_id":"ckrmv4jgr000fzrfy865dccia","content":"","site":{"data":{}},"length":0,"excerpt":"","more":""},{"title":"标签","date":"2021-01-03T08:14:57.000Z","type":"tags","comments":0,"_content":"","source":"tags/index.md","raw":"---\ntitle: 标签\ndate: 2021-01-03 16:14:57\ntype: \"tags\"\ncomments: false\n---\n","updated":"2021-07-27T14:37:28.000Z","path":"tags/index.html","layout":"page","_id":"ckrmv4jgu000hzrfycpo425rb","content":"","site":{"data":{}},"length":0,"excerpt":"","more":""}],"Post":[{"title":"重邮程序设计复试真题(部分)","abbrlink":51387,"date":"2021-02-04T02:08:48.000Z","_content":"2015年：\n1. 求num各数字之和；\n2. 测试字符C在字符号串S中出现的次数；\n3. 中国有句俗话叫“三天打鱼两天晒网”。某人1990年1月1日起开始“三天打鱼两天晒网”，问这个人在以后的某一天中是打鱼还是晒网\n\n\n2017年：\n1. 选择分支结构，注意ceil函数\n2. 汉诺塔问题\n3. 字符串交换问题：字符串以A开头和以K结尾的单词进行交换\n4. 百钱买百鸡问题：百鸡问题：鸡翁一值钱五，鸡母一值钱三，鸡雏三值钱一。百钱买百鸡，问鸡翁、鸡母、鸡雏各几何？\n5. 最大约数辗转相除法；\n6. 文件操作：将数据写入fname.txt中\n7. 螺旋方阵\n8. 求方程组近似根：弦截法\n9. 斐波那契数列递归实现","source":"_posts/2015年程序设计复试真题.md","raw":"---\ntitle: 重邮程序设计复试真题(部分)\ntags:\n  - F021程序设计\ncategories: C语言\nabbrlink: 51387\ndate: 2021-02-04 10:08:48\n---\n2015年：\n1. 求num各数字之和；\n2. 测试字符C在字符号串S中出现的次数；\n3. 中国有句俗话叫“三天打鱼两天晒网”。某人1990年1月1日起开始“三天打鱼两天晒网”，问这个人在以后的某一天中是打鱼还是晒网\n\n\n2017年：\n1. 选择分支结构，注意ceil函数\n2. 汉诺塔问题\n3. 字符串交换问题：字符串以A开头和以K结尾的单词进行交换\n4. 百钱买百鸡问题：百鸡问题：鸡翁一值钱五，鸡母一值钱三，鸡雏三值钱一。百钱买百鸡，问鸡翁、鸡母、鸡雏各几何？\n5. 最大约数辗转相除法；\n6. 文件操作：将数据写入fname.txt中\n7. 螺旋方阵\n8. 求方程组近似根：弦截法\n9. 斐波那契数列递归实现","slug":"2015年程序设计复试真题","published":1,"updated":"2021-07-27T14:51:43.493Z","comments":1,"layout":"post","photos":[],"link":"","_id":"ckrmv4jgc0001zrfycnfs1qpo","content":"<p>2015年：</p>\n<ol>\n<li>求num各数字之和；</li>\n<li>测试字符C在字符号串S中出现的次数；</li>\n<li>中国有句俗话叫“三天打鱼两天晒网”。某人1990年1月1日起开始“三天打鱼两天晒网”，问这个人在以后的某一天中是打鱼还是晒网</li>\n</ol>\n<p>2017年：</p>\n<ol>\n<li>选择分支结构，注意ceil函数</li>\n<li>汉诺塔问题</li>\n<li>字符串交换问题：字符串以A开头和以K结尾的单词进行交换</li>\n<li>百钱买百鸡问题：百鸡问题：鸡翁一值钱五，鸡母一值钱三，鸡雏三值钱一。百钱买百鸡，问鸡翁、鸡母、鸡雏各几何？</li>\n<li>最大约数辗转相除法；</li>\n<li>文件操作：将数据写入fname.txt中</li>\n<li>螺旋方阵</li>\n<li>求方程组近似根：弦截法</li>\n<li>斐波那契数列递归实现</li>\n</ol>\n","site":{"data":{}},"length":257,"excerpt":"","more":"<p>2015年：</p>\n<ol>\n<li>求num各数字之和；</li>\n<li>测试字符C在字符号串S中出现的次数；</li>\n<li>中国有句俗话叫“三天打鱼两天晒网”。某人1990年1月1日起开始“三天打鱼两天晒网”，问这个人在以后的某一天中是打鱼还是晒网</li>\n</ol>\n<p>2017年：</p>\n<ol>\n<li>选择分支结构，注意ceil函数</li>\n<li>汉诺塔问题</li>\n<li>字符串交换问题：字符串以A开头和以K结尾的单词进行交换</li>\n<li>百钱买百鸡问题：百鸡问题：鸡翁一值钱五，鸡母一值钱三，鸡雏三值钱一。百钱买百鸡，问鸡翁、鸡母、鸡雏各几何？</li>\n<li>最大约数辗转相除法；</li>\n<li>文件操作：将数据写入fname.txt中</li>\n<li>螺旋方阵</li>\n<li>求方程组近似根：弦截法</li>\n<li>斐波那契数列递归实现</li>\n</ol>\n"},{"title":"Ajax原理和使用","abbrlink":35823,"date":"2021-01-15T04:26:31.000Z","_content":"1. #### http介绍\n&nbsp;&nbsp;&nbsp;&nbsp;HTTP基于TCP,是面向连接的协议，建立需要通过**三次握手**，断开需要通过**四次挥手**。\n&nbsp;&nbsp;&nbsp;&nbsp;当连接断开时，客户端的**最后一次挥手**后会等待两个单位时间，若两个单位时间内没有收到任何响应，说明服务器关闭了，然后客户端也关闭；若两个单位时间内又收到了消息，说明服务器还没有关，客户端和服务端将继续沟通。\n![](https://gitee.com/light_trap/for-picgo/raw/master/image/20210115125141.PNG)\n\n2. #### http协议的构成\n**请求**：\n+ 请求头--request header\n    + URL\n    + method\n    + query\n+ 请求体--request body\n**响应**：\n+ 响应头--request header\n    + content-type\n+ 响应体--response body\n    + 响应数据\n\n当是`get`请求时,信息在`URL`中；当是`post`请求时，信息在`request body`中。\n`content-type`中表示返回的数据类型，返回的数据在`response body `中。\n\n3. #### 同步和异步\n&nbsp;&nbsp;&nbsp;&nbsp;同步:代码按照前后顺序一行一行的执行；\n&nbsp;&nbsp;&nbsp;&nbsp;异步：同时执行多行代码；\n&nbsp;&nbsp;&nbsp;&nbsp;注：异步代码总是在同步代码之后执行；\n\n&nbsp;&nbsp;&nbsp;&nbsp;现在的前后端交互采取前后端分离，我们会采用异步的JavaScript和XML或JSON格式来完成数据的局部刷新。因为它是异步的，所以不等待整需要个页面的刷新，只需要发送一个异步请求，什么时候请求的内容过来了，什么时候刷新局部页面\n\n4. #### Ajax介绍\n&nbsp;&nbsp;&nbsp;&nbsp;传统的项目前后端不分离，用户触发一个http请求服务器，然后服务器收到之后再做出响应给用户，并且返回一个新的页面，也就是说交互都是通过页面刷新或页面跳转来实现的。\n\n&nbsp;&nbsp;&nbsp;&nbsp;这种方式对于用户体验来讲其实并不友好，少量的数据更新也会引发整个页面重新请求，浪费了很大一部分资源。\n\n&nbsp;&nbsp;&nbsp;&nbsp;因此，我们希望有一种更好的方式，可以不用重新请求整个页面而达到更新部分数据的效果。*2005年，ajax(Asynchronous JavaScript And XML)出现，给前端带来了巨大的变化与革新。*\n\n5. #### Ajax的特点\n优点：\n+ 不需要插件支持（一般浏览器且默认开启JavaScript即可）\n+ 用户体验极佳（不刷新页面即可获取可更新的数据）\n+ 提升Web程序的性能（在传递数据方面做到按需发送，不必整体提交）\n+ 减轻服务器和带宽的负担（将服务区的一些操作转移到客户端）\n\n缺点：\n+ 前进、后退功能被破坏（因为Ajax永远在当前页面，不会记录前后页面）\n+ 搜索引擎的支持度不够（因为搜索引擎爬虫还不能理解JS引起变化数据的内容）\n  \n6. #### 常见状态码\n+ 100-199：表示连接继续\n+ 200-299：表示各种意义上的成功\n+ 300-399：表示重定向\n+ 400-499：表示各种客户端错误\n+ 500-599：表示各种服务端错误\n\n7. #### Ajax原理\n&nbsp;&nbsp;&nbsp;&nbsp;1.准备页面请求，创建XMLHttpRequest对象\n&nbsp;&nbsp;&nbsp;&nbsp;2.使用XMLHttpRequest对象的open()和send()方法发送资源请求给服务器\n&nbsp;&nbsp;&nbsp;&nbsp;3.后台计算\n&nbsp;&nbsp;&nbsp;&nbsp;4.onreadystatechange函数，状态改变时发送数据回客户端，使用XMLHttpRequest对象的responseText或responseXML属性获得服务器的响应\n\n&nbsp;&nbsp;&nbsp;&nbsp;注：open()打开连接，send()向服务器发送资源;调用send()方法后要去监听onreadystatechange事件，当onreadystatechange状态改变时，说明后端发送数据给客户端，客户端接收数据。\n\n8. #### Ajax(get)\n具体流程看注释\n\nclient代码：\n```html\n<!DOCTYPE html>\n<html>\n<head>\n\t<title></title>\n</head>\n<body>\n\t<button onclick=\"sendMsg()\">发送请求</button>\n\t<div id=\"id1\"></div>\n\t<script type=\"text/javascript\">\n\t\tfunction sendMsg(){\n\t\t\t// 1.创建一个XMLHttpRequest对象\n\t\t\tvar xhr=new XMLHttpRequest();\n\t\t\t// 2.调用open方法打开连接\n\t\t\t// open方法有三个参数\n\t\t\t// 1.请求的method\n\t\t\t// 2.请求的url\n\t\t\t// 3.是否异步，默认值为true\n\t\t\txhr.open('get','http://127.0.0.1/data.php?id=1');\n\t\t\t//3.发送请求\n\t\t\txhr.send();\n\t\t\t//4.监听状态的改变\n\t\t\txhr.onreadystatechange=function (){\n\t\t\t\t// 判断状态值 0-4 五种状态，4代表最终的完成\n\t\t\t\tif(xhr.readyState === 4){\n\t\t\t\t\t// 判断状态码\n\t\t\t\t\tif(xhr.status === 200){\n\t\t\t\t\t\t//将返回的字符串转换成json对象\n\t\t\t\t\t\tvar resp=JSON.parse(xhr.responseText);\n\t\t\t\t\t\tconsole.log(resp);\n\t\t\t\t\t\tdocument.querySelector('div').innerHTML=`\n\t\t\t\t\t\t<h2>编号：${resp.id}</h2>\n\t\t\t\t\t\t<h2>标题：${resp.title}</h2>`\t\t\n\t\t\t\t\t}\n\t\t\t\t}\n\t\t\t}\n\t\t}\n\t</script>\n</body>\n</html>\n```\nserver代码：\n```php\n<?php\n// 解决跨域问题\nheader(\"Access-Control-Allow-Origin:*\");\nheader('Access-Control-Allow-Methods:POST');\nheader('Access-Control-Allow-Headers:x-requested-with, content-type');\n//获取客户端get请求过来的数据\n$id=$_GET['id'];\n//转换成json格式\necho json_encode(array('id'=>$id,'title'=>'Hello Ajax'));\n```\n\n8. #### Ajax(post)\nget请求和post请求有很多地方都相同，注意不同的地方(注释处)\nclient代码\n```html\n<!DOCTYPE html>\n<html>\n<head>\n    <title></title>\n</head>\n<body>\n<button onclick=\"sendMsg()\">发送请求</button>\n<div id=\"id1\"></div>\n<script type=\"text/javascript\">\n    function sendMsg(){\n        var xhr=new XMLHttpRequest();\n        // method为post\n        xhr.open('post','http://127.0.0.1/data.php');\n        //设置请求头的content-type  指定了参数的发送方式\n        xhr.setRequestHeader('Content-Type','application/x-www-form-urlencoded');\n        // 在send里写需要发送的数据\n        xhr.send('name=zhangsan&age=18');\n        xhr.onreadystatechange=function (){\n            if(xhr.readyState === 4){\n                if(xhr.status === 200){\n                    var resp=JSON.parse(xhr.responseText);\n                    console.log(resp);\n                    document.querySelector('div').innerHTML=`\n\t\t\t\t\t\t<h2>姓名：${resp.name}</h2>\n\t\t\t\t\t\t<h2>年龄：${resp.age}</h2>`\n                }\n            }\n        }\n    }\n</script>\n</body>\n</html>\n```\nserver代码：\n```php\n<?php\n// 解决跨域问题\nheader(\"Access-Control-Allow-Origin:*\");\nheader('Access-Control-Allow-Methods:POST');\nheader('Access-Control-Allow-Headers:x-requested-with, content-type');\n//获取客户端get请求过来的数据\n$name=$_POST['name'];\n$age=$_POST['age'];\n//转换成json格式\necho json_encode(array('name'=>$name,'age'=>$age));\n```\n\n9. #### 封装ajax(1)\nget封装：\n```html\n<!DOCTYPE html>\n<html lang=\"en\">\n<head>\n    <meta charset=\"UTF-8\">\n    <meta name=\"viewport\" content=\"width=device-width, initial-scale=1.0\">\n    <title>Document</title>\n</head>\n<body>\n<button onclick=\"sendMsg()\">发送请求</button>\n<script type=\"text/javascript\">\n    function sendMsg(){\n        //若无参数query为null\n        //若有参数，{}\n        get('http://127.0.0.1/data.php',{name:'xiaoming',age:18},function(resp){\n            console.log(resp)\n        },true)\n    }\n    //封装get请求\n    //query： string,请求的地址\n    //query： Object,请求携带的参数\n    //callback: function,成功之后的回调\n    //isJSON: boolean,是否转化为json格式\n    function get(url,query,callback,isJSON){\n        //若有参数,先把参数拼接在url后面\n        if(query){\n            url+='?'\n            for(var key in query){\n                url+=`${key}=${query[key]}&`\n            }\n            //取出最后多余的&\n            url=url.slice(0,-1)\n        }\n        var xhr=new XMLHttpRequest()\n        xhr.open('get',url)\n        xhr.send()\n        xhr.onreadystatechange=function(){\n            if(xhr.readyState === 4){\n                if(xhr.status === 200){\n                    var res=isJSON?JSON.parse(xhr.responseText):xhr.responseText\n                    callback(res)\n                }\n            }\n        }\n    }\n</script>\n</body>\n</html>\n```\n\npost封装\n```html\n<!DOCTYPE html>\n<html lang=\"en\">\n<head>\n    <meta charset=\"UTF-8\">\n    <meta name=\"viewport\" content=\"width=device-width, initial-scale=1.0\">\n    <title>Document</title>\n</head>\n<body>\n<button onclick=\"sendMsg()\">发送请求</button>\n<script type=\"text/javascript\">\n    function sendMsg(){\n        //若无参数query为null\n        //若有参数，{}\n        post('http://127.0.0.1/data.php',{'name':'xiaoming','age':18},function(resp){\n            console.log(resp)\n        },true)\n    }\n    //封装post请求\n    //query： string,请求的地址\n    //query： Object,请求携带的参数\n    //callback: function,成功之后的回调\n    //isJSON: boolean,是否转化为json格式\n    function post(url,query,callback,isJSON){\n        //若有参数,先把参数拼接起来\n        var str=''\n        if(query){\n            for(var key in query){\n                str+=`${key}=${query[key]}&`\n            }\n            //取出最后多余的&\n            str=str.slice(0,-1)\n        }\n        var xhr=new XMLHttpRequest()\n        xhr.open('post',url)\n        xhr.setRequestHeader('Content-Type','application/x-www-form-urlencoded')\n        xhr.send(str)\n        xhr.onreadystatechange=function(){\n            if(xhr.readyState === 4){\n                if(xhr.status === 200){\n                    var res=isJSON?JSON.parse(xhr.responseText):xhr.responseText\n                    callback(res)\n                }\n            }\n        }\n    }\n</script>\n</body>\n</html>\n```\n**注**：测试时一定要注意，当前端发的方式和后端接受的方式不一样时，可能会报json格式错误\n\n10.  #### ajax封装(2)\n创建util.js\n```js\n//创建一个util对象，切记对象内的数据之间要有逗号隔开\nvar util={\n    //封装get\n    get:function (url,query,callback,isJSON){\n        //若有参数,先把参数拼接起来\n        var str=''\n        if(query){\n            for(var key in query){\n                str+=`${key}=${query[key]}&`\n            }\n            //取出最后多余的&\n            str=str.slice(0,-1)\n        }\n        var xhr=new XMLHttpRequest()\n        xhr.open('post',url)\n        xhr.setRequestHeader('Content-Type','application/x-www-form-urlencoded')\n        xhr.send(str)\n        xhr.onreadystatechange=function(){\n            if(xhr.readyState === 4){\n                if(xhr.status === 200){\n                    var res=isJSON?JSON.parse(xhr.responseText):xhr.responseText\n                    callback(res)\n                }\n            }\n        }\n    },\n\n    //封装post\n    post:function (url,query,callback,isJSON){\n        //若有参数,先把参数拼接起来\n        var str=''\n        if(query){\n            for(var key in query){\n                str+=`${key}=${query[key]}&`\n            }\n            //取出最后多余的&\n            str=str.slice(0,-1)\n        }\n        var xhr=new XMLHttpRequest()\n        xhr.open('get',url)\n        xhr.setRequestHeader('Content-Type','application/x-www-form-urlencoded')\n        xhr.send(str)\n        xhr.onreadystatechange=function(){\n            if(xhr.readyState === 4){\n                if(xhr.status === 200){\n                    var res=isJSON?JSON.parse(xhr.responseText):xhr.responseText\n                    callback(res)\n                }\n            }\n        }\n    }\n}\n\n//调用时\n<!DOCTYPE html>\n<html lang=\"en\">\n<head>\n    <meta charset=\"UTF-8\">\n    <meta name=\"viewport\" content=\"width=device-width, initial-scale=1.0\">\n    <title>Document</title>\n</head>\n<body>\n<button onclick=\"sendMsg()\">发送请求</button>\n//先引入js文件,然后调用即可\n<script src=\"./util.js\"></script>\n<script type=\"text/javascript\">\n    function sendMsg(){\n        //若无参数query为null\n        //若有参数，{}\n        util.post('http://127.0.0.1/data.php',{'name':'xiaoming','age':18},function(resp){\n            console.log(resp)\n        },true)\n    }\n</script>\n</body>\n</html>\n```\n11. #### ajax封装(3)\nserver代码：\n```JavaScript\nvar util={\n    //param : Object{method,url,query,callback,isJSON}\n    ajax:function(params){\n        var xhr=new XMLHttpRequest()\n        if(params.method === 'get'){\n            params.url+='?'\n            for(var key in params.query){\n                params.url+=`${key}=${params.query[key]}&`\n            }\n            params.url=params.url.slice(0,-1)\n            xhr.open('get',params.url)\n            xhr.send()\n        }else{\n            var str=''\n        if(params.query){\n            for(var key in params.query){\n                str+=`${key}=${params.query[key]}&`\n            }\n            //取出最后多余的&\n            str=str.slice(0,-1)\n        }\n        var xhr=new XMLHttpRequest()\n        xhr.open('post',params.url)\n        xhr.setRequestHeader('Content-Type','application/x-www-form-urlencoded')\n        xhr.send(str)\n        }\n        xhr.onreadystatechange=function(){\n            if(xhr.readyState === 4){\n                if(xhr.status === 200){\n                    var resp=params.isJSON ? JSON.parse(xhr.responseText) : xhr.responseText\n                    params.callback(resp)\n                }\n            }\n        }\n    }\n}\n```\nclient代码\n```html\n<!DOCTYPE html>\n<html lang=\"en\">\n<head>\n    <meta charset=\"UTF-8\">\n    <meta name=\"viewport\" content=\"width=device-width, initial-scale=1.0\">\n    <title>Document</title>\n</head>\n<body>\n<button onclick=\"sendMsg()\">发送请求</button>\n<script src=\"./util.js\"></script>\n<script type=\"text/javascript\">\n    function sendMsg(){\n        util.ajax({\n        \tmethod:'get',\n        \tisJSON:true,\n        \turl:'http://127.0.0.1/data.php',\n        \tquery:{\n        \t\t'name':'xiaoming',\n        \t\t'age':18\n        \t},\n        \tcallback:function(resp){\n                console.log(resp)\n        \t}\n        })   \n    }\n</script>\n</body>\n</html>\n```\n","source":"_posts/Ajax原理和使用.md","raw":"---\ntitle: Ajax原理和使用\ntags:\n  - 前端\ncategories: 前端\nabbrlink: 35823\ndate: 2021-01-15 12:26:31\n---\n1. #### http介绍\n&nbsp;&nbsp;&nbsp;&nbsp;HTTP基于TCP,是面向连接的协议，建立需要通过**三次握手**，断开需要通过**四次挥手**。\n&nbsp;&nbsp;&nbsp;&nbsp;当连接断开时，客户端的**最后一次挥手**后会等待两个单位时间，若两个单位时间内没有收到任何响应，说明服务器关闭了，然后客户端也关闭；若两个单位时间内又收到了消息，说明服务器还没有关，客户端和服务端将继续沟通。\n![](https://gitee.com/light_trap/for-picgo/raw/master/image/20210115125141.PNG)\n\n2. #### http协议的构成\n**请求**：\n+ 请求头--request header\n    + URL\n    + method\n    + query\n+ 请求体--request body\n**响应**：\n+ 响应头--request header\n    + content-type\n+ 响应体--response body\n    + 响应数据\n\n当是`get`请求时,信息在`URL`中；当是`post`请求时，信息在`request body`中。\n`content-type`中表示返回的数据类型，返回的数据在`response body `中。\n\n3. #### 同步和异步\n&nbsp;&nbsp;&nbsp;&nbsp;同步:代码按照前后顺序一行一行的执行；\n&nbsp;&nbsp;&nbsp;&nbsp;异步：同时执行多行代码；\n&nbsp;&nbsp;&nbsp;&nbsp;注：异步代码总是在同步代码之后执行；\n\n&nbsp;&nbsp;&nbsp;&nbsp;现在的前后端交互采取前后端分离，我们会采用异步的JavaScript和XML或JSON格式来完成数据的局部刷新。因为它是异步的，所以不等待整需要个页面的刷新，只需要发送一个异步请求，什么时候请求的内容过来了，什么时候刷新局部页面\n\n4. #### Ajax介绍\n&nbsp;&nbsp;&nbsp;&nbsp;传统的项目前后端不分离，用户触发一个http请求服务器，然后服务器收到之后再做出响应给用户，并且返回一个新的页面，也就是说交互都是通过页面刷新或页面跳转来实现的。\n\n&nbsp;&nbsp;&nbsp;&nbsp;这种方式对于用户体验来讲其实并不友好，少量的数据更新也会引发整个页面重新请求，浪费了很大一部分资源。\n\n&nbsp;&nbsp;&nbsp;&nbsp;因此，我们希望有一种更好的方式，可以不用重新请求整个页面而达到更新部分数据的效果。*2005年，ajax(Asynchronous JavaScript And XML)出现，给前端带来了巨大的变化与革新。*\n\n5. #### Ajax的特点\n优点：\n+ 不需要插件支持（一般浏览器且默认开启JavaScript即可）\n+ 用户体验极佳（不刷新页面即可获取可更新的数据）\n+ 提升Web程序的性能（在传递数据方面做到按需发送，不必整体提交）\n+ 减轻服务器和带宽的负担（将服务区的一些操作转移到客户端）\n\n缺点：\n+ 前进、后退功能被破坏（因为Ajax永远在当前页面，不会记录前后页面）\n+ 搜索引擎的支持度不够（因为搜索引擎爬虫还不能理解JS引起变化数据的内容）\n  \n6. #### 常见状态码\n+ 100-199：表示连接继续\n+ 200-299：表示各种意义上的成功\n+ 300-399：表示重定向\n+ 400-499：表示各种客户端错误\n+ 500-599：表示各种服务端错误\n\n7. #### Ajax原理\n&nbsp;&nbsp;&nbsp;&nbsp;1.准备页面请求，创建XMLHttpRequest对象\n&nbsp;&nbsp;&nbsp;&nbsp;2.使用XMLHttpRequest对象的open()和send()方法发送资源请求给服务器\n&nbsp;&nbsp;&nbsp;&nbsp;3.后台计算\n&nbsp;&nbsp;&nbsp;&nbsp;4.onreadystatechange函数，状态改变时发送数据回客户端，使用XMLHttpRequest对象的responseText或responseXML属性获得服务器的响应\n\n&nbsp;&nbsp;&nbsp;&nbsp;注：open()打开连接，send()向服务器发送资源;调用send()方法后要去监听onreadystatechange事件，当onreadystatechange状态改变时，说明后端发送数据给客户端，客户端接收数据。\n\n8. #### Ajax(get)\n具体流程看注释\n\nclient代码：\n```html\n<!DOCTYPE html>\n<html>\n<head>\n\t<title></title>\n</head>\n<body>\n\t<button onclick=\"sendMsg()\">发送请求</button>\n\t<div id=\"id1\"></div>\n\t<script type=\"text/javascript\">\n\t\tfunction sendMsg(){\n\t\t\t// 1.创建一个XMLHttpRequest对象\n\t\t\tvar xhr=new XMLHttpRequest();\n\t\t\t// 2.调用open方法打开连接\n\t\t\t// open方法有三个参数\n\t\t\t// 1.请求的method\n\t\t\t// 2.请求的url\n\t\t\t// 3.是否异步，默认值为true\n\t\t\txhr.open('get','http://127.0.0.1/data.php?id=1');\n\t\t\t//3.发送请求\n\t\t\txhr.send();\n\t\t\t//4.监听状态的改变\n\t\t\txhr.onreadystatechange=function (){\n\t\t\t\t// 判断状态值 0-4 五种状态，4代表最终的完成\n\t\t\t\tif(xhr.readyState === 4){\n\t\t\t\t\t// 判断状态码\n\t\t\t\t\tif(xhr.status === 200){\n\t\t\t\t\t\t//将返回的字符串转换成json对象\n\t\t\t\t\t\tvar resp=JSON.parse(xhr.responseText);\n\t\t\t\t\t\tconsole.log(resp);\n\t\t\t\t\t\tdocument.querySelector('div').innerHTML=`\n\t\t\t\t\t\t<h2>编号：${resp.id}</h2>\n\t\t\t\t\t\t<h2>标题：${resp.title}</h2>`\t\t\n\t\t\t\t\t}\n\t\t\t\t}\n\t\t\t}\n\t\t}\n\t</script>\n</body>\n</html>\n```\nserver代码：\n```php\n<?php\n// 解决跨域问题\nheader(\"Access-Control-Allow-Origin:*\");\nheader('Access-Control-Allow-Methods:POST');\nheader('Access-Control-Allow-Headers:x-requested-with, content-type');\n//获取客户端get请求过来的数据\n$id=$_GET['id'];\n//转换成json格式\necho json_encode(array('id'=>$id,'title'=>'Hello Ajax'));\n```\n\n8. #### Ajax(post)\nget请求和post请求有很多地方都相同，注意不同的地方(注释处)\nclient代码\n```html\n<!DOCTYPE html>\n<html>\n<head>\n    <title></title>\n</head>\n<body>\n<button onclick=\"sendMsg()\">发送请求</button>\n<div id=\"id1\"></div>\n<script type=\"text/javascript\">\n    function sendMsg(){\n        var xhr=new XMLHttpRequest();\n        // method为post\n        xhr.open('post','http://127.0.0.1/data.php');\n        //设置请求头的content-type  指定了参数的发送方式\n        xhr.setRequestHeader('Content-Type','application/x-www-form-urlencoded');\n        // 在send里写需要发送的数据\n        xhr.send('name=zhangsan&age=18');\n        xhr.onreadystatechange=function (){\n            if(xhr.readyState === 4){\n                if(xhr.status === 200){\n                    var resp=JSON.parse(xhr.responseText);\n                    console.log(resp);\n                    document.querySelector('div').innerHTML=`\n\t\t\t\t\t\t<h2>姓名：${resp.name}</h2>\n\t\t\t\t\t\t<h2>年龄：${resp.age}</h2>`\n                }\n            }\n        }\n    }\n</script>\n</body>\n</html>\n```\nserver代码：\n```php\n<?php\n// 解决跨域问题\nheader(\"Access-Control-Allow-Origin:*\");\nheader('Access-Control-Allow-Methods:POST');\nheader('Access-Control-Allow-Headers:x-requested-with, content-type');\n//获取客户端get请求过来的数据\n$name=$_POST['name'];\n$age=$_POST['age'];\n//转换成json格式\necho json_encode(array('name'=>$name,'age'=>$age));\n```\n\n9. #### 封装ajax(1)\nget封装：\n```html\n<!DOCTYPE html>\n<html lang=\"en\">\n<head>\n    <meta charset=\"UTF-8\">\n    <meta name=\"viewport\" content=\"width=device-width, initial-scale=1.0\">\n    <title>Document</title>\n</head>\n<body>\n<button onclick=\"sendMsg()\">发送请求</button>\n<script type=\"text/javascript\">\n    function sendMsg(){\n        //若无参数query为null\n        //若有参数，{}\n        get('http://127.0.0.1/data.php',{name:'xiaoming',age:18},function(resp){\n            console.log(resp)\n        },true)\n    }\n    //封装get请求\n    //query： string,请求的地址\n    //query： Object,请求携带的参数\n    //callback: function,成功之后的回调\n    //isJSON: boolean,是否转化为json格式\n    function get(url,query,callback,isJSON){\n        //若有参数,先把参数拼接在url后面\n        if(query){\n            url+='?'\n            for(var key in query){\n                url+=`${key}=${query[key]}&`\n            }\n            //取出最后多余的&\n            url=url.slice(0,-1)\n        }\n        var xhr=new XMLHttpRequest()\n        xhr.open('get',url)\n        xhr.send()\n        xhr.onreadystatechange=function(){\n            if(xhr.readyState === 4){\n                if(xhr.status === 200){\n                    var res=isJSON?JSON.parse(xhr.responseText):xhr.responseText\n                    callback(res)\n                }\n            }\n        }\n    }\n</script>\n</body>\n</html>\n```\n\npost封装\n```html\n<!DOCTYPE html>\n<html lang=\"en\">\n<head>\n    <meta charset=\"UTF-8\">\n    <meta name=\"viewport\" content=\"width=device-width, initial-scale=1.0\">\n    <title>Document</title>\n</head>\n<body>\n<button onclick=\"sendMsg()\">发送请求</button>\n<script type=\"text/javascript\">\n    function sendMsg(){\n        //若无参数query为null\n        //若有参数，{}\n        post('http://127.0.0.1/data.php',{'name':'xiaoming','age':18},function(resp){\n            console.log(resp)\n        },true)\n    }\n    //封装post请求\n    //query： string,请求的地址\n    //query： Object,请求携带的参数\n    //callback: function,成功之后的回调\n    //isJSON: boolean,是否转化为json格式\n    function post(url,query,callback,isJSON){\n        //若有参数,先把参数拼接起来\n        var str=''\n        if(query){\n            for(var key in query){\n                str+=`${key}=${query[key]}&`\n            }\n            //取出最后多余的&\n            str=str.slice(0,-1)\n        }\n        var xhr=new XMLHttpRequest()\n        xhr.open('post',url)\n        xhr.setRequestHeader('Content-Type','application/x-www-form-urlencoded')\n        xhr.send(str)\n        xhr.onreadystatechange=function(){\n            if(xhr.readyState === 4){\n                if(xhr.status === 200){\n                    var res=isJSON?JSON.parse(xhr.responseText):xhr.responseText\n                    callback(res)\n                }\n            }\n        }\n    }\n</script>\n</body>\n</html>\n```\n**注**：测试时一定要注意，当前端发的方式和后端接受的方式不一样时，可能会报json格式错误\n\n10.  #### ajax封装(2)\n创建util.js\n```js\n//创建一个util对象，切记对象内的数据之间要有逗号隔开\nvar util={\n    //封装get\n    get:function (url,query,callback,isJSON){\n        //若有参数,先把参数拼接起来\n        var str=''\n        if(query){\n            for(var key in query){\n                str+=`${key}=${query[key]}&`\n            }\n            //取出最后多余的&\n            str=str.slice(0,-1)\n        }\n        var xhr=new XMLHttpRequest()\n        xhr.open('post',url)\n        xhr.setRequestHeader('Content-Type','application/x-www-form-urlencoded')\n        xhr.send(str)\n        xhr.onreadystatechange=function(){\n            if(xhr.readyState === 4){\n                if(xhr.status === 200){\n                    var res=isJSON?JSON.parse(xhr.responseText):xhr.responseText\n                    callback(res)\n                }\n            }\n        }\n    },\n\n    //封装post\n    post:function (url,query,callback,isJSON){\n        //若有参数,先把参数拼接起来\n        var str=''\n        if(query){\n            for(var key in query){\n                str+=`${key}=${query[key]}&`\n            }\n            //取出最后多余的&\n            str=str.slice(0,-1)\n        }\n        var xhr=new XMLHttpRequest()\n        xhr.open('get',url)\n        xhr.setRequestHeader('Content-Type','application/x-www-form-urlencoded')\n        xhr.send(str)\n        xhr.onreadystatechange=function(){\n            if(xhr.readyState === 4){\n                if(xhr.status === 200){\n                    var res=isJSON?JSON.parse(xhr.responseText):xhr.responseText\n                    callback(res)\n                }\n            }\n        }\n    }\n}\n\n//调用时\n<!DOCTYPE html>\n<html lang=\"en\">\n<head>\n    <meta charset=\"UTF-8\">\n    <meta name=\"viewport\" content=\"width=device-width, initial-scale=1.0\">\n    <title>Document</title>\n</head>\n<body>\n<button onclick=\"sendMsg()\">发送请求</button>\n//先引入js文件,然后调用即可\n<script src=\"./util.js\"></script>\n<script type=\"text/javascript\">\n    function sendMsg(){\n        //若无参数query为null\n        //若有参数，{}\n        util.post('http://127.0.0.1/data.php',{'name':'xiaoming','age':18},function(resp){\n            console.log(resp)\n        },true)\n    }\n</script>\n</body>\n</html>\n```\n11. #### ajax封装(3)\nserver代码：\n```JavaScript\nvar util={\n    //param : Object{method,url,query,callback,isJSON}\n    ajax:function(params){\n        var xhr=new XMLHttpRequest()\n        if(params.method === 'get'){\n            params.url+='?'\n            for(var key in params.query){\n                params.url+=`${key}=${params.query[key]}&`\n            }\n            params.url=params.url.slice(0,-1)\n            xhr.open('get',params.url)\n            xhr.send()\n        }else{\n            var str=''\n        if(params.query){\n            for(var key in params.query){\n                str+=`${key}=${params.query[key]}&`\n            }\n            //取出最后多余的&\n            str=str.slice(0,-1)\n        }\n        var xhr=new XMLHttpRequest()\n        xhr.open('post',params.url)\n        xhr.setRequestHeader('Content-Type','application/x-www-form-urlencoded')\n        xhr.send(str)\n        }\n        xhr.onreadystatechange=function(){\n            if(xhr.readyState === 4){\n                if(xhr.status === 200){\n                    var resp=params.isJSON ? JSON.parse(xhr.responseText) : xhr.responseText\n                    params.callback(resp)\n                }\n            }\n        }\n    }\n}\n```\nclient代码\n```html\n<!DOCTYPE html>\n<html lang=\"en\">\n<head>\n    <meta charset=\"UTF-8\">\n    <meta name=\"viewport\" content=\"width=device-width, initial-scale=1.0\">\n    <title>Document</title>\n</head>\n<body>\n<button onclick=\"sendMsg()\">发送请求</button>\n<script src=\"./util.js\"></script>\n<script type=\"text/javascript\">\n    function sendMsg(){\n        util.ajax({\n        \tmethod:'get',\n        \tisJSON:true,\n        \turl:'http://127.0.0.1/data.php',\n        \tquery:{\n        \t\t'name':'xiaoming',\n        \t\t'age':18\n        \t},\n        \tcallback:function(resp){\n                console.log(resp)\n        \t}\n        })   \n    }\n</script>\n</body>\n</html>\n```\n","slug":"Ajax原理和使用","published":1,"updated":"2021-07-27T14:51:43.495Z","comments":1,"layout":"post","photos":[],"link":"","_id":"ckrmv4jgg0003zrfyek75eoul","content":"<ol>\n<li><h4 id=\"http介绍\"><a href=\"#http介绍\" class=\"headerlink\" title=\"http介绍\"></a>http介绍</h4><p>&nbsp;&nbsp;&nbsp;&nbsp;HTTP基于TCP,是面向连接的协议，建立需要通过<strong>三次握手</strong>，断开需要通过<strong>四次挥手</strong>。<br>&nbsp;&nbsp;&nbsp;&nbsp;当连接断开时，客户端的<strong>最后一次挥手</strong>后会等待两个单位时间，若两个单位时间内没有收到任何响应，说明服务器关闭了，然后客户端也关闭；若两个单位时间内又收到了消息，说明服务器还没有关，客户端和服务端将继续沟通。<br><img src=\"https://gitee.com/light_trap/for-picgo/raw/master/image/20210115125141.PNG\"></p>\n</li>\n<li><h4 id=\"http协议的构成\"><a href=\"#http协议的构成\" class=\"headerlink\" title=\"http协议的构成\"></a>http协议的构成</h4></li>\n</ol>\n<p><strong>请求</strong>：</p>\n<ul>\n<li>请求头–request header<ul>\n<li>URL</li>\n<li>method</li>\n<li>query</li>\n</ul>\n</li>\n<li>请求体–request body</li>\n</ul>\n<p><strong>响应</strong>：</p>\n<ul>\n<li>响应头–request header<ul>\n<li>content-type</li>\n</ul>\n</li>\n<li>响应体–response body<ul>\n<li>响应数据</li>\n</ul>\n</li>\n</ul>\n<p>当是<code>get</code>请求时,信息在<code>URL</code>中；当是<code>post</code>请求时，信息在<code>request body</code>中。<br><code>content-type</code>中表示返回的数据类型，返回的数据在<code>response body </code>中。</p>\n<ol start=\"3\">\n<li><h4 id=\"同步和异步\"><a href=\"#同步和异步\" class=\"headerlink\" title=\"同步和异步\"></a>同步和异步</h4>&nbsp;&nbsp;&nbsp;&nbsp;同步:代码按照前后顺序一行一行的执行；<br>&nbsp;&nbsp;&nbsp;&nbsp;异步：同时执行多行代码；<br>&nbsp;&nbsp;&nbsp;&nbsp;注：异步代码总是在同步代码之后执行；</li>\n</ol>\n<p>&nbsp;&nbsp;&nbsp;&nbsp;现在的前后端交互采取前后端分离，我们会采用异步的JavaScript和XML或JSON格式来完成数据的局部刷新。因为它是异步的，所以不等待整需要个页面的刷新，只需要发送一个异步请求，什么时候请求的内容过来了，什么时候刷新局部页面</p>\n<ol start=\"4\">\n<li><h4 id=\"Ajax介绍\"><a href=\"#Ajax介绍\" class=\"headerlink\" title=\"Ajax介绍\"></a>Ajax介绍</h4>&nbsp;&nbsp;&nbsp;&nbsp;传统的项目前后端不分离，用户触发一个http请求服务器，然后服务器收到之后再做出响应给用户，并且返回一个新的页面，也就是说交互都是通过页面刷新或页面跳转来实现的。</li>\n</ol>\n<p>&nbsp;&nbsp;&nbsp;&nbsp;这种方式对于用户体验来讲其实并不友好，少量的数据更新也会引发整个页面重新请求，浪费了很大一部分资源。</p>\n<p>&nbsp;&nbsp;&nbsp;&nbsp;因此，我们希望有一种更好的方式，可以不用重新请求整个页面而达到更新部分数据的效果。<em>2005年，ajax(Asynchronous JavaScript And XML)出现，给前端带来了巨大的变化与革新。</em></p>\n<ol start=\"5\">\n<li><h4 id=\"Ajax的特点\"><a href=\"#Ajax的特点\" class=\"headerlink\" title=\"Ajax的特点\"></a>Ajax的特点</h4>优点：</li>\n</ol>\n<ul>\n<li>不需要插件支持（一般浏览器且默认开启JavaScript即可）</li>\n<li>用户体验极佳（不刷新页面即可获取可更新的数据）</li>\n<li>提升Web程序的性能（在传递数据方面做到按需发送，不必整体提交）</li>\n<li>减轻服务器和带宽的负担（将服务区的一些操作转移到客户端）</li>\n</ul>\n<p>缺点：</p>\n<ul>\n<li>前进、后退功能被破坏（因为Ajax永远在当前页面，不会记录前后页面）</li>\n<li>搜索引擎的支持度不够（因为搜索引擎爬虫还不能理解JS引起变化数据的内容）</li>\n</ul>\n<ol start=\"6\">\n<li><h4 id=\"常见状态码\"><a href=\"#常见状态码\" class=\"headerlink\" title=\"常见状态码\"></a>常见状态码</h4></li>\n</ol>\n<ul>\n<li>100-199：表示连接继续</li>\n<li>200-299：表示各种意义上的成功</li>\n<li>300-399：表示重定向</li>\n<li>400-499：表示各种客户端错误</li>\n<li>500-599：表示各种服务端错误</li>\n</ul>\n<ol start=\"7\">\n<li><h4 id=\"Ajax原理\"><a href=\"#Ajax原理\" class=\"headerlink\" title=\"Ajax原理\"></a>Ajax原理</h4>&nbsp;&nbsp;&nbsp;&nbsp;1.准备页面请求，创建XMLHttpRequest对象<br>&nbsp;&nbsp;&nbsp;&nbsp;2.使用XMLHttpRequest对象的open()和send()方法发送资源请求给服务器<br>&nbsp;&nbsp;&nbsp;&nbsp;3.后台计算<br>&nbsp;&nbsp;&nbsp;&nbsp;4.onreadystatechange函数，状态改变时发送数据回客户端，使用XMLHttpRequest对象的responseText或responseXML属性获得服务器的响应</li>\n</ol>\n<p>&nbsp;&nbsp;&nbsp;&nbsp;注：open()打开连接，send()向服务器发送资源;调用send()方法后要去监听onreadystatechange事件，当onreadystatechange状态改变时，说明后端发送数据给客户端，客户端接收数据。</p>\n<ol start=\"8\">\n<li><h4 id=\"Ajax-get\"><a href=\"#Ajax-get\" class=\"headerlink\" title=\"Ajax(get)\"></a>Ajax(get)</h4>具体流程看注释</li>\n</ol>\n<p>client代码：</p>\n<figure class=\"highlight html\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br><span class=\"line\">38</span><br><span class=\"line\">39</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"meta\">&lt;!DOCTYPE <span class=\"meta-keyword\">html</span>&gt;</span></span><br><span class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">html</span>&gt;</span></span><br><span class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">head</span>&gt;</span></span><br><span class=\"line\">\t<span class=\"tag\">&lt;<span class=\"name\">title</span>&gt;</span><span class=\"tag\">&lt;/<span class=\"name\">title</span>&gt;</span></span><br><span class=\"line\"><span class=\"tag\">&lt;/<span class=\"name\">head</span>&gt;</span></span><br><span class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">body</span>&gt;</span></span><br><span class=\"line\">\t<span class=\"tag\">&lt;<span class=\"name\">button</span> <span class=\"attr\">onclick</span>=<span class=\"string\">&quot;sendMsg()&quot;</span>&gt;</span>发送请求<span class=\"tag\">&lt;/<span class=\"name\">button</span>&gt;</span></span><br><span class=\"line\">\t<span class=\"tag\">&lt;<span class=\"name\">div</span> <span class=\"attr\">id</span>=<span class=\"string\">&quot;id1&quot;</span>&gt;</span><span class=\"tag\">&lt;/<span class=\"name\">div</span>&gt;</span></span><br><span class=\"line\">\t<span class=\"tag\">&lt;<span class=\"name\">script</span> <span class=\"attr\">type</span>=<span class=\"string\">&quot;text/javascript&quot;</span>&gt;</span></span><br><span class=\"line\"><span class=\"javascript\">\t\t<span class=\"function\"><span class=\"keyword\">function</span> <span class=\"title\">sendMsg</span>(<span class=\"params\"></span>)</span>&#123;</span></span><br><span class=\"line\"><span class=\"javascript\">\t\t\t<span class=\"comment\">// 1.创建一个XMLHttpRequest对象</span></span></span><br><span class=\"line\"><span class=\"javascript\">\t\t\t<span class=\"keyword\">var</span> xhr=<span class=\"keyword\">new</span> XMLHttpRequest();</span></span><br><span class=\"line\"><span class=\"javascript\">\t\t\t<span class=\"comment\">// 2.调用open方法打开连接</span></span></span><br><span class=\"line\"><span class=\"javascript\">\t\t\t<span class=\"comment\">// open方法有三个参数</span></span></span><br><span class=\"line\"><span class=\"javascript\">\t\t\t<span class=\"comment\">// 1.请求的method</span></span></span><br><span class=\"line\"><span class=\"javascript\">\t\t\t<span class=\"comment\">// 2.请求的url</span></span></span><br><span class=\"line\"><span class=\"javascript\">\t\t\t<span class=\"comment\">// 3.是否异步，默认值为true</span></span></span><br><span class=\"line\"><span class=\"javascript\">\t\t\txhr.open(<span class=\"string\">&#x27;get&#x27;</span>,<span class=\"string\">&#x27;http://127.0.0.1/data.php?id=1&#x27;</span>);</span></span><br><span class=\"line\"><span class=\"javascript\">\t\t\t<span class=\"comment\">//3.发送请求</span></span></span><br><span class=\"line\">\t\t\txhr.send();</span><br><span class=\"line\"><span class=\"javascript\">\t\t\t<span class=\"comment\">//4.监听状态的改变</span></span></span><br><span class=\"line\"><span class=\"javascript\">\t\t\txhr.onreadystatechange=<span class=\"function\"><span class=\"keyword\">function</span> (<span class=\"params\"></span>)</span>&#123;</span></span><br><span class=\"line\"><span class=\"javascript\">\t\t\t\t<span class=\"comment\">// 判断状态值 0-4 五种状态，4代表最终的完成</span></span></span><br><span class=\"line\"><span class=\"javascript\">\t\t\t\t<span class=\"keyword\">if</span>(xhr.readyState === <span class=\"number\">4</span>)&#123;</span></span><br><span class=\"line\"><span class=\"javascript\">\t\t\t\t\t<span class=\"comment\">// 判断状态码</span></span></span><br><span class=\"line\"><span class=\"javascript\">\t\t\t\t\t<span class=\"keyword\">if</span>(xhr.status === <span class=\"number\">200</span>)&#123;</span></span><br><span class=\"line\"><span class=\"javascript\">\t\t\t\t\t\t<span class=\"comment\">//将返回的字符串转换成json对象</span></span></span><br><span class=\"line\"><span class=\"javascript\">\t\t\t\t\t\t<span class=\"keyword\">var</span> resp=<span class=\"built_in\">JSON</span>.parse(xhr.responseText);</span></span><br><span class=\"line\"><span class=\"javascript\">\t\t\t\t\t\t<span class=\"built_in\">console</span>.log(resp);</span></span><br><span class=\"line\"><span class=\"javascript\">\t\t\t\t\t\t<span class=\"built_in\">document</span>.querySelector(<span class=\"string\">&#x27;div&#x27;</span>).innerHTML=<span class=\"string\">`</span></span></span><br><span class=\"line\"><span class=\"handlebars\"><span class=\"xml\">\t\t\t\t\t\t<span class=\"tag\">&lt;<span class=\"name\">h2</span>&gt;</span>编号：$&#123;resp.id&#125;<span class=\"tag\">&lt;/<span class=\"name\">h2</span>&gt;</span></span></span></span><br><span class=\"line\"><span class=\"handlebars\"><span class=\"xml\">\t\t\t\t\t\t<span class=\"tag\">&lt;<span class=\"name\">h2</span>&gt;</span>标题：$&#123;resp.title&#125;<span class=\"tag\">&lt;/<span class=\"name\">h2</span>&gt;</span>`\t\t</span></span></span><br><span class=\"line\">\t\t\t\t\t&#125;</span><br><span class=\"line\">\t\t\t\t&#125;</span><br><span class=\"line\">\t\t\t&#125;</span><br><span class=\"line\">\t\t&#125;</span><br><span class=\"line\">\t<span class=\"tag\">&lt;/<span class=\"name\">script</span>&gt;</span></span><br><span class=\"line\"><span class=\"tag\">&lt;/<span class=\"name\">body</span>&gt;</span></span><br><span class=\"line\"><span class=\"tag\">&lt;/<span class=\"name\">html</span>&gt;</span></span><br></pre></td></tr></table></figure>\n<p>server代码：</p>\n<figure class=\"highlight php\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"meta\">&lt;?php</span></span><br><span class=\"line\"><span class=\"comment\">// 解决跨域问题</span></span><br><span class=\"line\">header(<span class=\"string\">&quot;Access-Control-Allow-Origin:*&quot;</span>);</span><br><span class=\"line\">header(<span class=\"string\">&#x27;Access-Control-Allow-Methods:POST&#x27;</span>);</span><br><span class=\"line\">header(<span class=\"string\">&#x27;Access-Control-Allow-Headers:x-requested-with, content-type&#x27;</span>);</span><br><span class=\"line\"><span class=\"comment\">//获取客户端get请求过来的数据</span></span><br><span class=\"line\"><span class=\"variable\">$id</span>=<span class=\"variable\">$_GET</span>[<span class=\"string\">&#x27;id&#x27;</span>];</span><br><span class=\"line\"><span class=\"comment\">//转换成json格式</span></span><br><span class=\"line\"><span class=\"keyword\">echo</span> json_encode(<span class=\"keyword\">array</span>(<span class=\"string\">&#x27;id&#x27;</span>=&gt;<span class=\"variable\">$id</span>,<span class=\"string\">&#x27;title&#x27;</span>=&gt;<span class=\"string\">&#x27;Hello Ajax&#x27;</span>));</span><br></pre></td></tr></table></figure>\n\n<ol start=\"8\">\n<li><h4 id=\"Ajax-post\"><a href=\"#Ajax-post\" class=\"headerlink\" title=\"Ajax(post)\"></a>Ajax(post)</h4><p>get请求和post请求有很多地方都相同，注意不同的地方(注释处)<br>client代码</p>\n<figure class=\"highlight html\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"meta\">&lt;!DOCTYPE <span class=\"meta-keyword\">html</span>&gt;</span></span><br><span class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">html</span>&gt;</span></span><br><span class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">head</span>&gt;</span></span><br><span class=\"line\">    <span class=\"tag\">&lt;<span class=\"name\">title</span>&gt;</span><span class=\"tag\">&lt;/<span class=\"name\">title</span>&gt;</span></span><br><span class=\"line\"><span class=\"tag\">&lt;/<span class=\"name\">head</span>&gt;</span></span><br><span class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">body</span>&gt;</span></span><br><span class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">button</span> <span class=\"attr\">onclick</span>=<span class=\"string\">&quot;sendMsg()&quot;</span>&gt;</span>发送请求<span class=\"tag\">&lt;/<span class=\"name\">button</span>&gt;</span></span><br><span class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">div</span> <span class=\"attr\">id</span>=<span class=\"string\">&quot;id1&quot;</span>&gt;</span><span class=\"tag\">&lt;/<span class=\"name\">div</span>&gt;</span></span><br><span class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">script</span> <span class=\"attr\">type</span>=<span class=\"string\">&quot;text/javascript&quot;</span>&gt;</span></span><br><span class=\"line\"><span class=\"javascript\">    <span class=\"function\"><span class=\"keyword\">function</span> <span class=\"title\">sendMsg</span>(<span class=\"params\"></span>)</span>&#123;</span></span><br><span class=\"line\"><span class=\"javascript\">        <span class=\"keyword\">var</span> xhr=<span class=\"keyword\">new</span> XMLHttpRequest();</span></span><br><span class=\"line\"><span class=\"javascript\">        <span class=\"comment\">// method为post</span></span></span><br><span class=\"line\"><span class=\"javascript\">        xhr.open(<span class=\"string\">&#x27;post&#x27;</span>,<span class=\"string\">&#x27;http://127.0.0.1/data.php&#x27;</span>);</span></span><br><span class=\"line\"><span class=\"javascript\">        <span class=\"comment\">//设置请求头的content-type  指定了参数的发送方式</span></span></span><br><span class=\"line\"><span class=\"javascript\">        xhr.setRequestHeader(<span class=\"string\">&#x27;Content-Type&#x27;</span>,<span class=\"string\">&#x27;application/x-www-form-urlencoded&#x27;</span>);</span></span><br><span class=\"line\"><span class=\"javascript\">        <span class=\"comment\">// 在send里写需要发送的数据</span></span></span><br><span class=\"line\"><span class=\"javascript\">        xhr.send(<span class=\"string\">&#x27;name=zhangsan&amp;age=18&#x27;</span>);</span></span><br><span class=\"line\"><span class=\"javascript\">        xhr.onreadystatechange=<span class=\"function\"><span class=\"keyword\">function</span> (<span class=\"params\"></span>)</span>&#123;</span></span><br><span class=\"line\"><span class=\"javascript\">            <span class=\"keyword\">if</span>(xhr.readyState === <span class=\"number\">4</span>)&#123;</span></span><br><span class=\"line\"><span class=\"javascript\">                <span class=\"keyword\">if</span>(xhr.status === <span class=\"number\">200</span>)&#123;</span></span><br><span class=\"line\"><span class=\"javascript\">                    <span class=\"keyword\">var</span> resp=<span class=\"built_in\">JSON</span>.parse(xhr.responseText);</span></span><br><span class=\"line\"><span class=\"javascript\">                    <span class=\"built_in\">console</span>.log(resp);</span></span><br><span class=\"line\"><span class=\"javascript\">                    <span class=\"built_in\">document</span>.querySelector(<span class=\"string\">&#x27;div&#x27;</span>).innerHTML=<span class=\"string\">`</span></span></span><br><span class=\"line\"><span class=\"handlebars\"><span class=\"xml\">\t\t\t\t\t\t<span class=\"tag\">&lt;<span class=\"name\">h2</span>&gt;</span>姓名：$&#123;resp.name&#125;<span class=\"tag\">&lt;/<span class=\"name\">h2</span>&gt;</span></span></span></span><br><span class=\"line\"><span class=\"handlebars\"><span class=\"xml\">\t\t\t\t\t\t<span class=\"tag\">&lt;<span class=\"name\">h2</span>&gt;</span>年龄：$&#123;resp.age&#125;<span class=\"tag\">&lt;/<span class=\"name\">h2</span>&gt;</span>`</span></span></span><br><span class=\"line\">                &#125;</span><br><span class=\"line\">            &#125;</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"><span class=\"tag\">&lt;/<span class=\"name\">script</span>&gt;</span></span><br><span class=\"line\"><span class=\"tag\">&lt;/<span class=\"name\">body</span>&gt;</span></span><br><span class=\"line\"><span class=\"tag\">&lt;/<span class=\"name\">html</span>&gt;</span></span><br></pre></td></tr></table></figure>\n<p>server代码：</p>\n<figure class=\"highlight php\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"meta\">&lt;?php</span></span><br><span class=\"line\"><span class=\"comment\">// 解决跨域问题</span></span><br><span class=\"line\">header(<span class=\"string\">&quot;Access-Control-Allow-Origin:*&quot;</span>);</span><br><span class=\"line\">header(<span class=\"string\">&#x27;Access-Control-Allow-Methods:POST&#x27;</span>);</span><br><span class=\"line\">header(<span class=\"string\">&#x27;Access-Control-Allow-Headers:x-requested-with, content-type&#x27;</span>);</span><br><span class=\"line\"><span class=\"comment\">//获取客户端get请求过来的数据</span></span><br><span class=\"line\"><span class=\"variable\">$name</span>=<span class=\"variable\">$_POST</span>[<span class=\"string\">&#x27;name&#x27;</span>];</span><br><span class=\"line\"><span class=\"variable\">$age</span>=<span class=\"variable\">$_POST</span>[<span class=\"string\">&#x27;age&#x27;</span>];</span><br><span class=\"line\"><span class=\"comment\">//转换成json格式</span></span><br><span class=\"line\"><span class=\"keyword\">echo</span> json_encode(<span class=\"keyword\">array</span>(<span class=\"string\">&#x27;name&#x27;</span>=&gt;<span class=\"variable\">$name</span>,<span class=\"string\">&#x27;age&#x27;</span>=&gt;<span class=\"variable\">$age</span>));</span><br></pre></td></tr></table></figure>\n</li>\n<li><h4 id=\"封装ajax-1\"><a href=\"#封装ajax-1\" class=\"headerlink\" title=\"封装ajax(1)\"></a>封装ajax(1)</h4><p>get封装：</p>\n<figure class=\"highlight html\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br><span class=\"line\">38</span><br><span class=\"line\">39</span><br><span class=\"line\">40</span><br><span class=\"line\">41</span><br><span class=\"line\">42</span><br><span class=\"line\">43</span><br><span class=\"line\">44</span><br><span class=\"line\">45</span><br><span class=\"line\">46</span><br><span class=\"line\">47</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"meta\">&lt;!DOCTYPE <span class=\"meta-keyword\">html</span>&gt;</span></span><br><span class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">html</span> <span class=\"attr\">lang</span>=<span class=\"string\">&quot;en&quot;</span>&gt;</span></span><br><span class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">head</span>&gt;</span></span><br><span class=\"line\">    <span class=\"tag\">&lt;<span class=\"name\">meta</span> <span class=\"attr\">charset</span>=<span class=\"string\">&quot;UTF-8&quot;</span>&gt;</span></span><br><span class=\"line\">    <span class=\"tag\">&lt;<span class=\"name\">meta</span> <span class=\"attr\">name</span>=<span class=\"string\">&quot;viewport&quot;</span> <span class=\"attr\">content</span>=<span class=\"string\">&quot;width=device-width, initial-scale=1.0&quot;</span>&gt;</span></span><br><span class=\"line\">    <span class=\"tag\">&lt;<span class=\"name\">title</span>&gt;</span>Document<span class=\"tag\">&lt;/<span class=\"name\">title</span>&gt;</span></span><br><span class=\"line\"><span class=\"tag\">&lt;/<span class=\"name\">head</span>&gt;</span></span><br><span class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">body</span>&gt;</span></span><br><span class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">button</span> <span class=\"attr\">onclick</span>=<span class=\"string\">&quot;sendMsg()&quot;</span>&gt;</span>发送请求<span class=\"tag\">&lt;/<span class=\"name\">button</span>&gt;</span></span><br><span class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">script</span> <span class=\"attr\">type</span>=<span class=\"string\">&quot;text/javascript&quot;</span>&gt;</span></span><br><span class=\"line\"><span class=\"javascript\">    <span class=\"function\"><span class=\"keyword\">function</span> <span class=\"title\">sendMsg</span>(<span class=\"params\"></span>)</span>&#123;</span></span><br><span class=\"line\"><span class=\"javascript\">        <span class=\"comment\">//若无参数query为null</span></span></span><br><span class=\"line\"><span class=\"javascript\">        <span class=\"comment\">//若有参数，&#123;&#125;</span></span></span><br><span class=\"line\"><span class=\"javascript\">        get(<span class=\"string\">&#x27;http://127.0.0.1/data.php&#x27;</span>,&#123;<span class=\"attr\">name</span>:<span class=\"string\">&#x27;xiaoming&#x27;</span>,<span class=\"attr\">age</span>:<span class=\"number\">18</span>&#125;,<span class=\"function\"><span class=\"keyword\">function</span>(<span class=\"params\">resp</span>)</span>&#123;</span></span><br><span class=\"line\"><span class=\"javascript\">            <span class=\"built_in\">console</span>.log(resp)</span></span><br><span class=\"line\"><span class=\"javascript\">        &#125;,<span class=\"literal\">true</span>)</span></span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"><span class=\"javascript\">    <span class=\"comment\">//封装get请求</span></span></span><br><span class=\"line\"><span class=\"javascript\">    <span class=\"comment\">//query： string,请求的地址</span></span></span><br><span class=\"line\"><span class=\"javascript\">    <span class=\"comment\">//query： Object,请求携带的参数</span></span></span><br><span class=\"line\"><span class=\"javascript\">    <span class=\"comment\">//callback: function,成功之后的回调</span></span></span><br><span class=\"line\"><span class=\"javascript\">    <span class=\"comment\">//isJSON: boolean,是否转化为json格式</span></span></span><br><span class=\"line\"><span class=\"javascript\">    <span class=\"function\"><span class=\"keyword\">function</span> <span class=\"title\">get</span>(<span class=\"params\">url,query,callback,isJSON</span>)</span>&#123;</span></span><br><span class=\"line\"><span class=\"javascript\">        <span class=\"comment\">//若有参数,先把参数拼接在url后面</span></span></span><br><span class=\"line\"><span class=\"javascript\">        <span class=\"keyword\">if</span>(query)&#123;</span></span><br><span class=\"line\"><span class=\"javascript\">            url+=<span class=\"string\">&#x27;?&#x27;</span></span></span><br><span class=\"line\"><span class=\"javascript\">            <span class=\"keyword\">for</span>(<span class=\"keyword\">var</span> key <span class=\"keyword\">in</span> query)&#123;</span></span><br><span class=\"line\"><span class=\"javascript\">                url+=<span class=\"string\">`<span class=\"subst\">$&#123;key&#125;</span>=<span class=\"subst\">$&#123;query[key]&#125;</span>&amp;`</span></span></span><br><span class=\"line\">            &#125;</span><br><span class=\"line\"><span class=\"javascript\">            <span class=\"comment\">//取出最后多余的&amp;</span></span></span><br><span class=\"line\">            url=url.slice(0,-1)</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\"><span class=\"javascript\">        <span class=\"keyword\">var</span> xhr=<span class=\"keyword\">new</span> XMLHttpRequest()</span></span><br><span class=\"line\"><span class=\"javascript\">        xhr.open(<span class=\"string\">&#x27;get&#x27;</span>,url)</span></span><br><span class=\"line\">        xhr.send()</span><br><span class=\"line\"><span class=\"javascript\">        xhr.onreadystatechange=<span class=\"function\"><span class=\"keyword\">function</span>(<span class=\"params\"></span>)</span>&#123;</span></span><br><span class=\"line\"><span class=\"javascript\">            <span class=\"keyword\">if</span>(xhr.readyState === <span class=\"number\">4</span>)&#123;</span></span><br><span class=\"line\"><span class=\"javascript\">                <span class=\"keyword\">if</span>(xhr.status === <span class=\"number\">200</span>)&#123;</span></span><br><span class=\"line\"><span class=\"javascript\">                    <span class=\"keyword\">var</span> res=isJSON?<span class=\"built_in\">JSON</span>.parse(xhr.responseText):xhr.responseText</span></span><br><span class=\"line\">                    callback(res)</span><br><span class=\"line\">                &#125;</span><br><span class=\"line\">            &#125;</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"><span class=\"tag\">&lt;/<span class=\"name\">script</span>&gt;</span></span><br><span class=\"line\"><span class=\"tag\">&lt;/<span class=\"name\">body</span>&gt;</span></span><br><span class=\"line\"><span class=\"tag\">&lt;/<span class=\"name\">html</span>&gt;</span></span><br></pre></td></tr></table></figure>\n\n</li>\n</ol>\n<p>post封装</p>\n<figure class=\"highlight html\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br><span class=\"line\">38</span><br><span class=\"line\">39</span><br><span class=\"line\">40</span><br><span class=\"line\">41</span><br><span class=\"line\">42</span><br><span class=\"line\">43</span><br><span class=\"line\">44</span><br><span class=\"line\">45</span><br><span class=\"line\">46</span><br><span class=\"line\">47</span><br><span class=\"line\">48</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"meta\">&lt;!DOCTYPE <span class=\"meta-keyword\">html</span>&gt;</span></span><br><span class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">html</span> <span class=\"attr\">lang</span>=<span class=\"string\">&quot;en&quot;</span>&gt;</span></span><br><span class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">head</span>&gt;</span></span><br><span class=\"line\">    <span class=\"tag\">&lt;<span class=\"name\">meta</span> <span class=\"attr\">charset</span>=<span class=\"string\">&quot;UTF-8&quot;</span>&gt;</span></span><br><span class=\"line\">    <span class=\"tag\">&lt;<span class=\"name\">meta</span> <span class=\"attr\">name</span>=<span class=\"string\">&quot;viewport&quot;</span> <span class=\"attr\">content</span>=<span class=\"string\">&quot;width=device-width, initial-scale=1.0&quot;</span>&gt;</span></span><br><span class=\"line\">    <span class=\"tag\">&lt;<span class=\"name\">title</span>&gt;</span>Document<span class=\"tag\">&lt;/<span class=\"name\">title</span>&gt;</span></span><br><span class=\"line\"><span class=\"tag\">&lt;/<span class=\"name\">head</span>&gt;</span></span><br><span class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">body</span>&gt;</span></span><br><span class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">button</span> <span class=\"attr\">onclick</span>=<span class=\"string\">&quot;sendMsg()&quot;</span>&gt;</span>发送请求<span class=\"tag\">&lt;/<span class=\"name\">button</span>&gt;</span></span><br><span class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">script</span> <span class=\"attr\">type</span>=<span class=\"string\">&quot;text/javascript&quot;</span>&gt;</span></span><br><span class=\"line\"><span class=\"javascript\">    <span class=\"function\"><span class=\"keyword\">function</span> <span class=\"title\">sendMsg</span>(<span class=\"params\"></span>)</span>&#123;</span></span><br><span class=\"line\"><span class=\"javascript\">        <span class=\"comment\">//若无参数query为null</span></span></span><br><span class=\"line\"><span class=\"javascript\">        <span class=\"comment\">//若有参数，&#123;&#125;</span></span></span><br><span class=\"line\"><span class=\"javascript\">        post(<span class=\"string\">&#x27;http://127.0.0.1/data.php&#x27;</span>,&#123;<span class=\"string\">&#x27;name&#x27;</span>:<span class=\"string\">&#x27;xiaoming&#x27;</span>,<span class=\"string\">&#x27;age&#x27;</span>:<span class=\"number\">18</span>&#125;,<span class=\"function\"><span class=\"keyword\">function</span>(<span class=\"params\">resp</span>)</span>&#123;</span></span><br><span class=\"line\"><span class=\"javascript\">            <span class=\"built_in\">console</span>.log(resp)</span></span><br><span class=\"line\"><span class=\"javascript\">        &#125;,<span class=\"literal\">true</span>)</span></span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"><span class=\"javascript\">    <span class=\"comment\">//封装post请求</span></span></span><br><span class=\"line\"><span class=\"javascript\">    <span class=\"comment\">//query： string,请求的地址</span></span></span><br><span class=\"line\"><span class=\"javascript\">    <span class=\"comment\">//query： Object,请求携带的参数</span></span></span><br><span class=\"line\"><span class=\"javascript\">    <span class=\"comment\">//callback: function,成功之后的回调</span></span></span><br><span class=\"line\"><span class=\"javascript\">    <span class=\"comment\">//isJSON: boolean,是否转化为json格式</span></span></span><br><span class=\"line\"><span class=\"javascript\">    <span class=\"function\"><span class=\"keyword\">function</span> <span class=\"title\">post</span>(<span class=\"params\">url,query,callback,isJSON</span>)</span>&#123;</span></span><br><span class=\"line\"><span class=\"javascript\">        <span class=\"comment\">//若有参数,先把参数拼接起来</span></span></span><br><span class=\"line\"><span class=\"javascript\">        <span class=\"keyword\">var</span> str=<span class=\"string\">&#x27;&#x27;</span></span></span><br><span class=\"line\"><span class=\"javascript\">        <span class=\"keyword\">if</span>(query)&#123;</span></span><br><span class=\"line\"><span class=\"javascript\">            <span class=\"keyword\">for</span>(<span class=\"keyword\">var</span> key <span class=\"keyword\">in</span> query)&#123;</span></span><br><span class=\"line\"><span class=\"javascript\">                str+=<span class=\"string\">`<span class=\"subst\">$&#123;key&#125;</span>=<span class=\"subst\">$&#123;query[key]&#125;</span>&amp;`</span></span></span><br><span class=\"line\">            &#125;</span><br><span class=\"line\"><span class=\"javascript\">            <span class=\"comment\">//取出最后多余的&amp;</span></span></span><br><span class=\"line\">            str=str.slice(0,-1)</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\"><span class=\"javascript\">        <span class=\"keyword\">var</span> xhr=<span class=\"keyword\">new</span> XMLHttpRequest()</span></span><br><span class=\"line\"><span class=\"javascript\">        xhr.open(<span class=\"string\">&#x27;post&#x27;</span>,url)</span></span><br><span class=\"line\"><span class=\"javascript\">        xhr.setRequestHeader(<span class=\"string\">&#x27;Content-Type&#x27;</span>,<span class=\"string\">&#x27;application/x-www-form-urlencoded&#x27;</span>)</span></span><br><span class=\"line\">        xhr.send(str)</span><br><span class=\"line\"><span class=\"javascript\">        xhr.onreadystatechange=<span class=\"function\"><span class=\"keyword\">function</span>(<span class=\"params\"></span>)</span>&#123;</span></span><br><span class=\"line\"><span class=\"javascript\">            <span class=\"keyword\">if</span>(xhr.readyState === <span class=\"number\">4</span>)&#123;</span></span><br><span class=\"line\"><span class=\"javascript\">                <span class=\"keyword\">if</span>(xhr.status === <span class=\"number\">200</span>)&#123;</span></span><br><span class=\"line\"><span class=\"javascript\">                    <span class=\"keyword\">var</span> res=isJSON?<span class=\"built_in\">JSON</span>.parse(xhr.responseText):xhr.responseText</span></span><br><span class=\"line\">                    callback(res)</span><br><span class=\"line\">                &#125;</span><br><span class=\"line\">            &#125;</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"><span class=\"tag\">&lt;/<span class=\"name\">script</span>&gt;</span></span><br><span class=\"line\"><span class=\"tag\">&lt;/<span class=\"name\">body</span>&gt;</span></span><br><span class=\"line\"><span class=\"tag\">&lt;/<span class=\"name\">html</span>&gt;</span></span><br></pre></td></tr></table></figure>\n<p><strong>注</strong>：测试时一定要注意，当前端发的方式和后端接受的方式不一样时，可能会报json格式错误</p>\n<ol start=\"10\">\n<li><h4 id=\"ajax封装-2\"><a href=\"#ajax封装-2\" class=\"headerlink\" title=\"ajax封装(2)\"></a>ajax封装(2)</h4>创建util.js<figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br><span class=\"line\">38</span><br><span class=\"line\">39</span><br><span class=\"line\">40</span><br><span class=\"line\">41</span><br><span class=\"line\">42</span><br><span class=\"line\">43</span><br><span class=\"line\">44</span><br><span class=\"line\">45</span><br><span class=\"line\">46</span><br><span class=\"line\">47</span><br><span class=\"line\">48</span><br><span class=\"line\">49</span><br><span class=\"line\">50</span><br><span class=\"line\">51</span><br><span class=\"line\">52</span><br><span class=\"line\">53</span><br><span class=\"line\">54</span><br><span class=\"line\">55</span><br><span class=\"line\">56</span><br><span class=\"line\">57</span><br><span class=\"line\">58</span><br><span class=\"line\">59</span><br><span class=\"line\">60</span><br><span class=\"line\">61</span><br><span class=\"line\">62</span><br><span class=\"line\">63</span><br><span class=\"line\">64</span><br><span class=\"line\">65</span><br><span class=\"line\">66</span><br><span class=\"line\">67</span><br><span class=\"line\">68</span><br><span class=\"line\">69</span><br><span class=\"line\">70</span><br><span class=\"line\">71</span><br><span class=\"line\">72</span><br><span class=\"line\">73</span><br><span class=\"line\">74</span><br><span class=\"line\">75</span><br><span class=\"line\">76</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">//创建一个util对象，切记对象内的数据之间要有逗号隔开</span></span><br><span class=\"line\"><span class=\"keyword\">var</span> util=&#123;</span><br><span class=\"line\">    <span class=\"comment\">//封装get</span></span><br><span class=\"line\">    get:<span class=\"function\"><span class=\"keyword\">function</span> (<span class=\"params\">url,query,callback,isJSON</span>)</span>&#123;</span><br><span class=\"line\">        <span class=\"comment\">//若有参数,先把参数拼接起来</span></span><br><span class=\"line\">        <span class=\"keyword\">var</span> str=<span class=\"string\">&#x27;&#x27;</span></span><br><span class=\"line\">        <span class=\"keyword\">if</span>(query)&#123;</span><br><span class=\"line\">            <span class=\"keyword\">for</span>(<span class=\"keyword\">var</span> key <span class=\"keyword\">in</span> query)&#123;</span><br><span class=\"line\">                str+=<span class=\"string\">`<span class=\"subst\">$&#123;key&#125;</span>=<span class=\"subst\">$&#123;query[key]&#125;</span>&amp;`</span></span><br><span class=\"line\">            &#125;</span><br><span class=\"line\">            <span class=\"comment\">//取出最后多余的&amp;</span></span><br><span class=\"line\">            str=str.slice(<span class=\"number\">0</span>,-<span class=\"number\">1</span>)</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">        <span class=\"keyword\">var</span> xhr=<span class=\"keyword\">new</span> XMLHttpRequest()</span><br><span class=\"line\">        xhr.open(<span class=\"string\">&#x27;post&#x27;</span>,url)</span><br><span class=\"line\">        xhr.setRequestHeader(<span class=\"string\">&#x27;Content-Type&#x27;</span>,<span class=\"string\">&#x27;application/x-www-form-urlencoded&#x27;</span>)</span><br><span class=\"line\">        xhr.send(str)</span><br><span class=\"line\">        xhr.onreadystatechange=<span class=\"function\"><span class=\"keyword\">function</span>(<span class=\"params\"></span>)</span>&#123;</span><br><span class=\"line\">            <span class=\"keyword\">if</span>(xhr.readyState === <span class=\"number\">4</span>)&#123;</span><br><span class=\"line\">                <span class=\"keyword\">if</span>(xhr.status === <span class=\"number\">200</span>)&#123;</span><br><span class=\"line\">                    <span class=\"keyword\">var</span> res=isJSON?<span class=\"built_in\">JSON</span>.parse(xhr.responseText):xhr.responseText</span><br><span class=\"line\">                    callback(res)</span><br><span class=\"line\">                &#125;</span><br><span class=\"line\">            &#125;</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">    &#125;,</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"comment\">//封装post</span></span><br><span class=\"line\">    post:<span class=\"function\"><span class=\"keyword\">function</span> (<span class=\"params\">url,query,callback,isJSON</span>)</span>&#123;</span><br><span class=\"line\">        <span class=\"comment\">//若有参数,先把参数拼接起来</span></span><br><span class=\"line\">        <span class=\"keyword\">var</span> str=<span class=\"string\">&#x27;&#x27;</span></span><br><span class=\"line\">        <span class=\"keyword\">if</span>(query)&#123;</span><br><span class=\"line\">            <span class=\"keyword\">for</span>(<span class=\"keyword\">var</span> key <span class=\"keyword\">in</span> query)&#123;</span><br><span class=\"line\">                str+=<span class=\"string\">`<span class=\"subst\">$&#123;key&#125;</span>=<span class=\"subst\">$&#123;query[key]&#125;</span>&amp;`</span></span><br><span class=\"line\">            &#125;</span><br><span class=\"line\">            <span class=\"comment\">//取出最后多余的&amp;</span></span><br><span class=\"line\">            str=str.slice(<span class=\"number\">0</span>,-<span class=\"number\">1</span>)</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">        <span class=\"keyword\">var</span> xhr=<span class=\"keyword\">new</span> XMLHttpRequest()</span><br><span class=\"line\">        xhr.open(<span class=\"string\">&#x27;get&#x27;</span>,url)</span><br><span class=\"line\">        xhr.setRequestHeader(<span class=\"string\">&#x27;Content-Type&#x27;</span>,<span class=\"string\">&#x27;application/x-www-form-urlencoded&#x27;</span>)</span><br><span class=\"line\">        xhr.send(str)</span><br><span class=\"line\">        xhr.onreadystatechange=<span class=\"function\"><span class=\"keyword\">function</span>(<span class=\"params\"></span>)</span>&#123;</span><br><span class=\"line\">            <span class=\"keyword\">if</span>(xhr.readyState === <span class=\"number\">4</span>)&#123;</span><br><span class=\"line\">                <span class=\"keyword\">if</span>(xhr.status === <span class=\"number\">200</span>)&#123;</span><br><span class=\"line\">                    <span class=\"keyword\">var</span> res=isJSON?<span class=\"built_in\">JSON</span>.parse(xhr.responseText):xhr.responseText</span><br><span class=\"line\">                    callback(res)</span><br><span class=\"line\">                &#125;</span><br><span class=\"line\">            &#125;</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">//调用时</span></span><br><span class=\"line\">&lt;!DOCTYPE html&gt;</span><br><span class=\"line\">&lt;html lang=<span class=\"string\">&quot;en&quot;</span>&gt;</span><br><span class=\"line\">&lt;head&gt;</span><br><span class=\"line\">    &lt;meta charset=<span class=\"string\">&quot;UTF-8&quot;</span>&gt;</span><br><span class=\"line\">    &lt;meta name=<span class=\"string\">&quot;viewport&quot;</span> content=<span class=\"string\">&quot;width=device-width, initial-scale=1.0&quot;</span>&gt;</span><br><span class=\"line\">    &lt;title&gt;Document&lt;/title&gt;</span><br><span class=\"line\">&lt;/head&gt;</span><br><span class=\"line\">&lt;body&gt;</span><br><span class=\"line\">&lt;button onclick=<span class=\"string\">&quot;sendMsg()&quot;</span>&gt;发送请求&lt;/button&gt;</span><br><span class=\"line\"><span class=\"comment\">//先引入js文件,然后调用即可</span></span><br><span class=\"line\">&lt;script src=<span class=\"string\">&quot;./util.js&quot;</span>&gt;&lt;/script&gt;</span><br><span class=\"line\">&lt;script type=<span class=\"string\">&quot;text/javascript&quot;</span>&gt;</span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">function</span> <span class=\"title\">sendMsg</span>(<span class=\"params\"></span>)</span>&#123;</span><br><span class=\"line\">        <span class=\"comment\">//若无参数query为null</span></span><br><span class=\"line\">        <span class=\"comment\">//若有参数，&#123;&#125;</span></span><br><span class=\"line\">        util.post(<span class=\"string\">&#x27;http://127.0.0.1/data.php&#x27;</span>,&#123;<span class=\"string\">&#x27;name&#x27;</span>:<span class=\"string\">&#x27;xiaoming&#x27;</span>,<span class=\"string\">&#x27;age&#x27;</span>:<span class=\"number\">18</span>&#125;,<span class=\"function\"><span class=\"keyword\">function</span>(<span class=\"params\">resp</span>)</span>&#123;</span><br><span class=\"line\">            <span class=\"built_in\">console</span>.log(resp)</span><br><span class=\"line\">        &#125;,<span class=\"literal\">true</span>)</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&lt;/script&gt;</span><br><span class=\"line\">&lt;/body&gt;</span><br><span class=\"line\">&lt;/html&gt;</span><br></pre></td></tr></table></figure></li>\n<li><h4 id=\"ajax封装-3\"><a href=\"#ajax封装-3\" class=\"headerlink\" title=\"ajax封装(3)\"></a>ajax封装(3)</h4>server代码：<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">var</span> util=&#123;</span><br><span class=\"line\">    <span class=\"comment\">//param : Object&#123;method,url,query,callback,isJSON&#125;</span></span><br><span class=\"line\">    ajax:<span class=\"function\"><span class=\"keyword\">function</span>(<span class=\"params\">params</span>)</span>&#123;</span><br><span class=\"line\">        <span class=\"keyword\">var</span> xhr=<span class=\"keyword\">new</span> XMLHttpRequest()</span><br><span class=\"line\">        <span class=\"keyword\">if</span>(params.method === <span class=\"string\">&#x27;get&#x27;</span>)&#123;</span><br><span class=\"line\">            params.url+=<span class=\"string\">&#x27;?&#x27;</span></span><br><span class=\"line\">            <span class=\"keyword\">for</span>(<span class=\"keyword\">var</span> key <span class=\"keyword\">in</span> params.query)&#123;</span><br><span class=\"line\">                params.url+=<span class=\"string\">`<span class=\"subst\">$&#123;key&#125;</span>=<span class=\"subst\">$&#123;params.query[key]&#125;</span>&amp;`</span></span><br><span class=\"line\">            &#125;</span><br><span class=\"line\">            params.url=params.url.slice(<span class=\"number\">0</span>,-<span class=\"number\">1</span>)</span><br><span class=\"line\">            xhr.open(<span class=\"string\">&#x27;get&#x27;</span>,params.url)</span><br><span class=\"line\">            xhr.send()</span><br><span class=\"line\">        &#125;<span class=\"keyword\">else</span>&#123;</span><br><span class=\"line\">            <span class=\"keyword\">var</span> str=<span class=\"string\">&#x27;&#x27;</span></span><br><span class=\"line\">        <span class=\"keyword\">if</span>(params.query)&#123;</span><br><span class=\"line\">            <span class=\"keyword\">for</span>(<span class=\"keyword\">var</span> key <span class=\"keyword\">in</span> params.query)&#123;</span><br><span class=\"line\">                str+=<span class=\"string\">`<span class=\"subst\">$&#123;key&#125;</span>=<span class=\"subst\">$&#123;params.query[key]&#125;</span>&amp;`</span></span><br><span class=\"line\">            &#125;</span><br><span class=\"line\">            <span class=\"comment\">//取出最后多余的&amp;</span></span><br><span class=\"line\">            str=str.slice(<span class=\"number\">0</span>,-<span class=\"number\">1</span>)</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">        <span class=\"keyword\">var</span> xhr=<span class=\"keyword\">new</span> XMLHttpRequest()</span><br><span class=\"line\">        xhr.open(<span class=\"string\">&#x27;post&#x27;</span>,params.url)</span><br><span class=\"line\">        xhr.setRequestHeader(<span class=\"string\">&#x27;Content-Type&#x27;</span>,<span class=\"string\">&#x27;application/x-www-form-urlencoded&#x27;</span>)</span><br><span class=\"line\">        xhr.send(str)</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">        xhr.onreadystatechange=<span class=\"function\"><span class=\"keyword\">function</span>(<span class=\"params\"></span>)</span>&#123;</span><br><span class=\"line\">            <span class=\"keyword\">if</span>(xhr.readyState === <span class=\"number\">4</span>)&#123;</span><br><span class=\"line\">                <span class=\"keyword\">if</span>(xhr.status === <span class=\"number\">200</span>)&#123;</span><br><span class=\"line\">                    <span class=\"keyword\">var</span> resp=params.isJSON ? <span class=\"built_in\">JSON</span>.parse(xhr.responseText) : xhr.responseText</span><br><span class=\"line\">                    params.callback(resp)</span><br><span class=\"line\">                &#125;</span><br><span class=\"line\">            &#125;</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\nclient代码<figure class=\"highlight html\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"meta\">&lt;!DOCTYPE <span class=\"meta-keyword\">html</span>&gt;</span></span><br><span class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">html</span> <span class=\"attr\">lang</span>=<span class=\"string\">&quot;en&quot;</span>&gt;</span></span><br><span class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">head</span>&gt;</span></span><br><span class=\"line\">    <span class=\"tag\">&lt;<span class=\"name\">meta</span> <span class=\"attr\">charset</span>=<span class=\"string\">&quot;UTF-8&quot;</span>&gt;</span></span><br><span class=\"line\">    <span class=\"tag\">&lt;<span class=\"name\">meta</span> <span class=\"attr\">name</span>=<span class=\"string\">&quot;viewport&quot;</span> <span class=\"attr\">content</span>=<span class=\"string\">&quot;width=device-width, initial-scale=1.0&quot;</span>&gt;</span></span><br><span class=\"line\">    <span class=\"tag\">&lt;<span class=\"name\">title</span>&gt;</span>Document<span class=\"tag\">&lt;/<span class=\"name\">title</span>&gt;</span></span><br><span class=\"line\"><span class=\"tag\">&lt;/<span class=\"name\">head</span>&gt;</span></span><br><span class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">body</span>&gt;</span></span><br><span class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">button</span> <span class=\"attr\">onclick</span>=<span class=\"string\">&quot;sendMsg()&quot;</span>&gt;</span>发送请求<span class=\"tag\">&lt;/<span class=\"name\">button</span>&gt;</span></span><br><span class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">script</span> <span class=\"attr\">src</span>=<span class=\"string\">&quot;./util.js&quot;</span>&gt;</span><span class=\"tag\">&lt;/<span class=\"name\">script</span>&gt;</span></span><br><span class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">script</span> <span class=\"attr\">type</span>=<span class=\"string\">&quot;text/javascript&quot;</span>&gt;</span></span><br><span class=\"line\"><span class=\"javascript\">    <span class=\"function\"><span class=\"keyword\">function</span> <span class=\"title\">sendMsg</span>(<span class=\"params\"></span>)</span>&#123;</span></span><br><span class=\"line\">        util.ajax(&#123;</span><br><span class=\"line\"><span class=\"javascript\">        \tmethod:<span class=\"string\">&#x27;get&#x27;</span>,</span></span><br><span class=\"line\"><span class=\"javascript\">        \tisJSON:<span class=\"literal\">true</span>,</span></span><br><span class=\"line\"><span class=\"javascript\">        \turl:<span class=\"string\">&#x27;http://127.0.0.1/data.php&#x27;</span>,</span></span><br><span class=\"line\">        \tquery:&#123;</span><br><span class=\"line\"><span class=\"javascript\">        \t\t<span class=\"string\">&#x27;name&#x27;</span>:<span class=\"string\">&#x27;xiaoming&#x27;</span>,</span></span><br><span class=\"line\"><span class=\"javascript\">        \t\t<span class=\"string\">&#x27;age&#x27;</span>:<span class=\"number\">18</span></span></span><br><span class=\"line\">        \t&#125;,</span><br><span class=\"line\"><span class=\"javascript\">        \tcallback:<span class=\"function\"><span class=\"keyword\">function</span>(<span class=\"params\">resp</span>)</span>&#123;</span></span><br><span class=\"line\"><span class=\"javascript\">                <span class=\"built_in\">console</span>.log(resp)</span></span><br><span class=\"line\">        \t&#125;</span><br><span class=\"line\">        &#125;)   </span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"><span class=\"tag\">&lt;/<span class=\"name\">script</span>&gt;</span></span><br><span class=\"line\"><span class=\"tag\">&lt;/<span class=\"name\">body</span>&gt;</span></span><br><span class=\"line\"><span class=\"tag\">&lt;/<span class=\"name\">html</span>&gt;</span></span><br></pre></td></tr></table></figure>\n</li>\n</ol>\n","site":{"data":{}},"length":10976,"excerpt":"","more":"<ol>\n<li><h4 id=\"http介绍\"><a href=\"#http介绍\" class=\"headerlink\" title=\"http介绍\"></a>http介绍</h4><p>&nbsp;&nbsp;&nbsp;&nbsp;HTTP基于TCP,是面向连接的协议，建立需要通过<strong>三次握手</strong>，断开需要通过<strong>四次挥手</strong>。<br>&nbsp;&nbsp;&nbsp;&nbsp;当连接断开时，客户端的<strong>最后一次挥手</strong>后会等待两个单位时间，若两个单位时间内没有收到任何响应，说明服务器关闭了，然后客户端也关闭；若两个单位时间内又收到了消息，说明服务器还没有关，客户端和服务端将继续沟通。<br><img src=\"https://gitee.com/light_trap/for-picgo/raw/master/image/20210115125141.PNG\"></p>\n</li>\n<li><h4 id=\"http协议的构成\"><a href=\"#http协议的构成\" class=\"headerlink\" title=\"http协议的构成\"></a>http协议的构成</h4></li>\n</ol>\n<p><strong>请求</strong>：</p>\n<ul>\n<li>请求头–request header<ul>\n<li>URL</li>\n<li>method</li>\n<li>query</li>\n</ul>\n</li>\n<li>请求体–request body</li>\n</ul>\n<p><strong>响应</strong>：</p>\n<ul>\n<li>响应头–request header<ul>\n<li>content-type</li>\n</ul>\n</li>\n<li>响应体–response body<ul>\n<li>响应数据</li>\n</ul>\n</li>\n</ul>\n<p>当是<code>get</code>请求时,信息在<code>URL</code>中；当是<code>post</code>请求时，信息在<code>request body</code>中。<br><code>content-type</code>中表示返回的数据类型，返回的数据在<code>response body </code>中。</p>\n<ol start=\"3\">\n<li><h4 id=\"同步和异步\"><a href=\"#同步和异步\" class=\"headerlink\" title=\"同步和异步\"></a>同步和异步</h4>&nbsp;&nbsp;&nbsp;&nbsp;同步:代码按照前后顺序一行一行的执行；<br>&nbsp;&nbsp;&nbsp;&nbsp;异步：同时执行多行代码；<br>&nbsp;&nbsp;&nbsp;&nbsp;注：异步代码总是在同步代码之后执行；</li>\n</ol>\n<p>&nbsp;&nbsp;&nbsp;&nbsp;现在的前后端交互采取前后端分离，我们会采用异步的JavaScript和XML或JSON格式来完成数据的局部刷新。因为它是异步的，所以不等待整需要个页面的刷新，只需要发送一个异步请求，什么时候请求的内容过来了，什么时候刷新局部页面</p>\n<ol start=\"4\">\n<li><h4 id=\"Ajax介绍\"><a href=\"#Ajax介绍\" class=\"headerlink\" title=\"Ajax介绍\"></a>Ajax介绍</h4>&nbsp;&nbsp;&nbsp;&nbsp;传统的项目前后端不分离，用户触发一个http请求服务器，然后服务器收到之后再做出响应给用户，并且返回一个新的页面，也就是说交互都是通过页面刷新或页面跳转来实现的。</li>\n</ol>\n<p>&nbsp;&nbsp;&nbsp;&nbsp;这种方式对于用户体验来讲其实并不友好，少量的数据更新也会引发整个页面重新请求，浪费了很大一部分资源。</p>\n<p>&nbsp;&nbsp;&nbsp;&nbsp;因此，我们希望有一种更好的方式，可以不用重新请求整个页面而达到更新部分数据的效果。<em>2005年，ajax(Asynchronous JavaScript And XML)出现，给前端带来了巨大的变化与革新。</em></p>\n<ol start=\"5\">\n<li><h4 id=\"Ajax的特点\"><a href=\"#Ajax的特点\" class=\"headerlink\" title=\"Ajax的特点\"></a>Ajax的特点</h4>优点：</li>\n</ol>\n<ul>\n<li>不需要插件支持（一般浏览器且默认开启JavaScript即可）</li>\n<li>用户体验极佳（不刷新页面即可获取可更新的数据）</li>\n<li>提升Web程序的性能（在传递数据方面做到按需发送，不必整体提交）</li>\n<li>减轻服务器和带宽的负担（将服务区的一些操作转移到客户端）</li>\n</ul>\n<p>缺点：</p>\n<ul>\n<li>前进、后退功能被破坏（因为Ajax永远在当前页面，不会记录前后页面）</li>\n<li>搜索引擎的支持度不够（因为搜索引擎爬虫还不能理解JS引起变化数据的内容）</li>\n</ul>\n<ol start=\"6\">\n<li><h4 id=\"常见状态码\"><a href=\"#常见状态码\" class=\"headerlink\" title=\"常见状态码\"></a>常见状态码</h4></li>\n</ol>\n<ul>\n<li>100-199：表示连接继续</li>\n<li>200-299：表示各种意义上的成功</li>\n<li>300-399：表示重定向</li>\n<li>400-499：表示各种客户端错误</li>\n<li>500-599：表示各种服务端错误</li>\n</ul>\n<ol start=\"7\">\n<li><h4 id=\"Ajax原理\"><a href=\"#Ajax原理\" class=\"headerlink\" title=\"Ajax原理\"></a>Ajax原理</h4>&nbsp;&nbsp;&nbsp;&nbsp;1.准备页面请求，创建XMLHttpRequest对象<br>&nbsp;&nbsp;&nbsp;&nbsp;2.使用XMLHttpRequest对象的open()和send()方法发送资源请求给服务器<br>&nbsp;&nbsp;&nbsp;&nbsp;3.后台计算<br>&nbsp;&nbsp;&nbsp;&nbsp;4.onreadystatechange函数，状态改变时发送数据回客户端，使用XMLHttpRequest对象的responseText或responseXML属性获得服务器的响应</li>\n</ol>\n<p>&nbsp;&nbsp;&nbsp;&nbsp;注：open()打开连接，send()向服务器发送资源;调用send()方法后要去监听onreadystatechange事件，当onreadystatechange状态改变时，说明后端发送数据给客户端，客户端接收数据。</p>\n<ol start=\"8\">\n<li><h4 id=\"Ajax-get\"><a href=\"#Ajax-get\" class=\"headerlink\" title=\"Ajax(get)\"></a>Ajax(get)</h4>具体流程看注释</li>\n</ol>\n<p>client代码：</p>\n<figure class=\"highlight html\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br><span class=\"line\">38</span><br><span class=\"line\">39</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"meta\">&lt;!DOCTYPE <span class=\"meta-keyword\">html</span>&gt;</span></span><br><span class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">html</span>&gt;</span></span><br><span class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">head</span>&gt;</span></span><br><span class=\"line\">\t<span class=\"tag\">&lt;<span class=\"name\">title</span>&gt;</span><span class=\"tag\">&lt;/<span class=\"name\">title</span>&gt;</span></span><br><span class=\"line\"><span class=\"tag\">&lt;/<span class=\"name\">head</span>&gt;</span></span><br><span class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">body</span>&gt;</span></span><br><span class=\"line\">\t<span class=\"tag\">&lt;<span class=\"name\">button</span> <span class=\"attr\">onclick</span>=<span class=\"string\">&quot;sendMsg()&quot;</span>&gt;</span>发送请求<span class=\"tag\">&lt;/<span class=\"name\">button</span>&gt;</span></span><br><span class=\"line\">\t<span class=\"tag\">&lt;<span class=\"name\">div</span> <span class=\"attr\">id</span>=<span class=\"string\">&quot;id1&quot;</span>&gt;</span><span class=\"tag\">&lt;/<span class=\"name\">div</span>&gt;</span></span><br><span class=\"line\">\t<span class=\"tag\">&lt;<span class=\"name\">script</span> <span class=\"attr\">type</span>=<span class=\"string\">&quot;text/javascript&quot;</span>&gt;</span></span><br><span class=\"line\"><span class=\"javascript\">\t\t<span class=\"function\"><span class=\"keyword\">function</span> <span class=\"title\">sendMsg</span>(<span class=\"params\"></span>)</span>&#123;</span></span><br><span class=\"line\"><span class=\"javascript\">\t\t\t<span class=\"comment\">// 1.创建一个XMLHttpRequest对象</span></span></span><br><span class=\"line\"><span class=\"javascript\">\t\t\t<span class=\"keyword\">var</span> xhr=<span class=\"keyword\">new</span> XMLHttpRequest();</span></span><br><span class=\"line\"><span class=\"javascript\">\t\t\t<span class=\"comment\">// 2.调用open方法打开连接</span></span></span><br><span class=\"line\"><span class=\"javascript\">\t\t\t<span class=\"comment\">// open方法有三个参数</span></span></span><br><span class=\"line\"><span class=\"javascript\">\t\t\t<span class=\"comment\">// 1.请求的method</span></span></span><br><span class=\"line\"><span class=\"javascript\">\t\t\t<span class=\"comment\">// 2.请求的url</span></span></span><br><span class=\"line\"><span class=\"javascript\">\t\t\t<span class=\"comment\">// 3.是否异步，默认值为true</span></span></span><br><span class=\"line\"><span class=\"javascript\">\t\t\txhr.open(<span class=\"string\">&#x27;get&#x27;</span>,<span class=\"string\">&#x27;http://127.0.0.1/data.php?id=1&#x27;</span>);</span></span><br><span class=\"line\"><span class=\"javascript\">\t\t\t<span class=\"comment\">//3.发送请求</span></span></span><br><span class=\"line\">\t\t\txhr.send();</span><br><span class=\"line\"><span class=\"javascript\">\t\t\t<span class=\"comment\">//4.监听状态的改变</span></span></span><br><span class=\"line\"><span class=\"javascript\">\t\t\txhr.onreadystatechange=<span class=\"function\"><span class=\"keyword\">function</span> (<span class=\"params\"></span>)</span>&#123;</span></span><br><span class=\"line\"><span class=\"javascript\">\t\t\t\t<span class=\"comment\">// 判断状态值 0-4 五种状态，4代表最终的完成</span></span></span><br><span class=\"line\"><span class=\"javascript\">\t\t\t\t<span class=\"keyword\">if</span>(xhr.readyState === <span class=\"number\">4</span>)&#123;</span></span><br><span class=\"line\"><span class=\"javascript\">\t\t\t\t\t<span class=\"comment\">// 判断状态码</span></span></span><br><span class=\"line\"><span class=\"javascript\">\t\t\t\t\t<span class=\"keyword\">if</span>(xhr.status === <span class=\"number\">200</span>)&#123;</span></span><br><span class=\"line\"><span class=\"javascript\">\t\t\t\t\t\t<span class=\"comment\">//将返回的字符串转换成json对象</span></span></span><br><span class=\"line\"><span class=\"javascript\">\t\t\t\t\t\t<span class=\"keyword\">var</span> resp=<span class=\"built_in\">JSON</span>.parse(xhr.responseText);</span></span><br><span class=\"line\"><span class=\"javascript\">\t\t\t\t\t\t<span class=\"built_in\">console</span>.log(resp);</span></span><br><span class=\"line\"><span class=\"javascript\">\t\t\t\t\t\t<span class=\"built_in\">document</span>.querySelector(<span class=\"string\">&#x27;div&#x27;</span>).innerHTML=<span class=\"string\">`</span></span></span><br><span class=\"line\"><span class=\"handlebars\"><span class=\"xml\">\t\t\t\t\t\t<span class=\"tag\">&lt;<span class=\"name\">h2</span>&gt;</span>编号：$&#123;resp.id&#125;<span class=\"tag\">&lt;/<span class=\"name\">h2</span>&gt;</span></span></span></span><br><span class=\"line\"><span class=\"handlebars\"><span class=\"xml\">\t\t\t\t\t\t<span class=\"tag\">&lt;<span class=\"name\">h2</span>&gt;</span>标题：$&#123;resp.title&#125;<span class=\"tag\">&lt;/<span class=\"name\">h2</span>&gt;</span>`\t\t</span></span></span><br><span class=\"line\">\t\t\t\t\t&#125;</span><br><span class=\"line\">\t\t\t\t&#125;</span><br><span class=\"line\">\t\t\t&#125;</span><br><span class=\"line\">\t\t&#125;</span><br><span class=\"line\">\t<span class=\"tag\">&lt;/<span class=\"name\">script</span>&gt;</span></span><br><span class=\"line\"><span class=\"tag\">&lt;/<span class=\"name\">body</span>&gt;</span></span><br><span class=\"line\"><span class=\"tag\">&lt;/<span class=\"name\">html</span>&gt;</span></span><br></pre></td></tr></table></figure>\n<p>server代码：</p>\n<figure class=\"highlight php\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"meta\">&lt;?php</span></span><br><span class=\"line\"><span class=\"comment\">// 解决跨域问题</span></span><br><span class=\"line\">header(<span class=\"string\">&quot;Access-Control-Allow-Origin:*&quot;</span>);</span><br><span class=\"line\">header(<span class=\"string\">&#x27;Access-Control-Allow-Methods:POST&#x27;</span>);</span><br><span class=\"line\">header(<span class=\"string\">&#x27;Access-Control-Allow-Headers:x-requested-with, content-type&#x27;</span>);</span><br><span class=\"line\"><span class=\"comment\">//获取客户端get请求过来的数据</span></span><br><span class=\"line\"><span class=\"variable\">$id</span>=<span class=\"variable\">$_GET</span>[<span class=\"string\">&#x27;id&#x27;</span>];</span><br><span class=\"line\"><span class=\"comment\">//转换成json格式</span></span><br><span class=\"line\"><span class=\"keyword\">echo</span> json_encode(<span class=\"keyword\">array</span>(<span class=\"string\">&#x27;id&#x27;</span>=&gt;<span class=\"variable\">$id</span>,<span class=\"string\">&#x27;title&#x27;</span>=&gt;<span class=\"string\">&#x27;Hello Ajax&#x27;</span>));</span><br></pre></td></tr></table></figure>\n\n<ol start=\"8\">\n<li><h4 id=\"Ajax-post\"><a href=\"#Ajax-post\" class=\"headerlink\" title=\"Ajax(post)\"></a>Ajax(post)</h4><p>get请求和post请求有很多地方都相同，注意不同的地方(注释处)<br>client代码</p>\n<figure class=\"highlight html\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"meta\">&lt;!DOCTYPE <span class=\"meta-keyword\">html</span>&gt;</span></span><br><span class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">html</span>&gt;</span></span><br><span class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">head</span>&gt;</span></span><br><span class=\"line\">    <span class=\"tag\">&lt;<span class=\"name\">title</span>&gt;</span><span class=\"tag\">&lt;/<span class=\"name\">title</span>&gt;</span></span><br><span class=\"line\"><span class=\"tag\">&lt;/<span class=\"name\">head</span>&gt;</span></span><br><span class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">body</span>&gt;</span></span><br><span class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">button</span> <span class=\"attr\">onclick</span>=<span class=\"string\">&quot;sendMsg()&quot;</span>&gt;</span>发送请求<span class=\"tag\">&lt;/<span class=\"name\">button</span>&gt;</span></span><br><span class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">div</span> <span class=\"attr\">id</span>=<span class=\"string\">&quot;id1&quot;</span>&gt;</span><span class=\"tag\">&lt;/<span class=\"name\">div</span>&gt;</span></span><br><span class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">script</span> <span class=\"attr\">type</span>=<span class=\"string\">&quot;text/javascript&quot;</span>&gt;</span></span><br><span class=\"line\"><span class=\"javascript\">    <span class=\"function\"><span class=\"keyword\">function</span> <span class=\"title\">sendMsg</span>(<span class=\"params\"></span>)</span>&#123;</span></span><br><span class=\"line\"><span class=\"javascript\">        <span class=\"keyword\">var</span> xhr=<span class=\"keyword\">new</span> XMLHttpRequest();</span></span><br><span class=\"line\"><span class=\"javascript\">        <span class=\"comment\">// method为post</span></span></span><br><span class=\"line\"><span class=\"javascript\">        xhr.open(<span class=\"string\">&#x27;post&#x27;</span>,<span class=\"string\">&#x27;http://127.0.0.1/data.php&#x27;</span>);</span></span><br><span class=\"line\"><span class=\"javascript\">        <span class=\"comment\">//设置请求头的content-type  指定了参数的发送方式</span></span></span><br><span class=\"line\"><span class=\"javascript\">        xhr.setRequestHeader(<span class=\"string\">&#x27;Content-Type&#x27;</span>,<span class=\"string\">&#x27;application/x-www-form-urlencoded&#x27;</span>);</span></span><br><span class=\"line\"><span class=\"javascript\">        <span class=\"comment\">// 在send里写需要发送的数据</span></span></span><br><span class=\"line\"><span class=\"javascript\">        xhr.send(<span class=\"string\">&#x27;name=zhangsan&amp;age=18&#x27;</span>);</span></span><br><span class=\"line\"><span class=\"javascript\">        xhr.onreadystatechange=<span class=\"function\"><span class=\"keyword\">function</span> (<span class=\"params\"></span>)</span>&#123;</span></span><br><span class=\"line\"><span class=\"javascript\">            <span class=\"keyword\">if</span>(xhr.readyState === <span class=\"number\">4</span>)&#123;</span></span><br><span class=\"line\"><span class=\"javascript\">                <span class=\"keyword\">if</span>(xhr.status === <span class=\"number\">200</span>)&#123;</span></span><br><span class=\"line\"><span class=\"javascript\">                    <span class=\"keyword\">var</span> resp=<span class=\"built_in\">JSON</span>.parse(xhr.responseText);</span></span><br><span class=\"line\"><span class=\"javascript\">                    <span class=\"built_in\">console</span>.log(resp);</span></span><br><span class=\"line\"><span class=\"javascript\">                    <span class=\"built_in\">document</span>.querySelector(<span class=\"string\">&#x27;div&#x27;</span>).innerHTML=<span class=\"string\">`</span></span></span><br><span class=\"line\"><span class=\"handlebars\"><span class=\"xml\">\t\t\t\t\t\t<span class=\"tag\">&lt;<span class=\"name\">h2</span>&gt;</span>姓名：$&#123;resp.name&#125;<span class=\"tag\">&lt;/<span class=\"name\">h2</span>&gt;</span></span></span></span><br><span class=\"line\"><span class=\"handlebars\"><span class=\"xml\">\t\t\t\t\t\t<span class=\"tag\">&lt;<span class=\"name\">h2</span>&gt;</span>年龄：$&#123;resp.age&#125;<span class=\"tag\">&lt;/<span class=\"name\">h2</span>&gt;</span>`</span></span></span><br><span class=\"line\">                &#125;</span><br><span class=\"line\">            &#125;</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"><span class=\"tag\">&lt;/<span class=\"name\">script</span>&gt;</span></span><br><span class=\"line\"><span class=\"tag\">&lt;/<span class=\"name\">body</span>&gt;</span></span><br><span class=\"line\"><span class=\"tag\">&lt;/<span class=\"name\">html</span>&gt;</span></span><br></pre></td></tr></table></figure>\n<p>server代码：</p>\n<figure class=\"highlight php\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"meta\">&lt;?php</span></span><br><span class=\"line\"><span class=\"comment\">// 解决跨域问题</span></span><br><span class=\"line\">header(<span class=\"string\">&quot;Access-Control-Allow-Origin:*&quot;</span>);</span><br><span class=\"line\">header(<span class=\"string\">&#x27;Access-Control-Allow-Methods:POST&#x27;</span>);</span><br><span class=\"line\">header(<span class=\"string\">&#x27;Access-Control-Allow-Headers:x-requested-with, content-type&#x27;</span>);</span><br><span class=\"line\"><span class=\"comment\">//获取客户端get请求过来的数据</span></span><br><span class=\"line\"><span class=\"variable\">$name</span>=<span class=\"variable\">$_POST</span>[<span class=\"string\">&#x27;name&#x27;</span>];</span><br><span class=\"line\"><span class=\"variable\">$age</span>=<span class=\"variable\">$_POST</span>[<span class=\"string\">&#x27;age&#x27;</span>];</span><br><span class=\"line\"><span class=\"comment\">//转换成json格式</span></span><br><span class=\"line\"><span class=\"keyword\">echo</span> json_encode(<span class=\"keyword\">array</span>(<span class=\"string\">&#x27;name&#x27;</span>=&gt;<span class=\"variable\">$name</span>,<span class=\"string\">&#x27;age&#x27;</span>=&gt;<span class=\"variable\">$age</span>));</span><br></pre></td></tr></table></figure>\n</li>\n<li><h4 id=\"封装ajax-1\"><a href=\"#封装ajax-1\" class=\"headerlink\" title=\"封装ajax(1)\"></a>封装ajax(1)</h4><p>get封装：</p>\n<figure class=\"highlight html\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br><span class=\"line\">38</span><br><span class=\"line\">39</span><br><span class=\"line\">40</span><br><span class=\"line\">41</span><br><span class=\"line\">42</span><br><span class=\"line\">43</span><br><span class=\"line\">44</span><br><span class=\"line\">45</span><br><span class=\"line\">46</span><br><span class=\"line\">47</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"meta\">&lt;!DOCTYPE <span class=\"meta-keyword\">html</span>&gt;</span></span><br><span class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">html</span> <span class=\"attr\">lang</span>=<span class=\"string\">&quot;en&quot;</span>&gt;</span></span><br><span class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">head</span>&gt;</span></span><br><span class=\"line\">    <span class=\"tag\">&lt;<span class=\"name\">meta</span> <span class=\"attr\">charset</span>=<span class=\"string\">&quot;UTF-8&quot;</span>&gt;</span></span><br><span class=\"line\">    <span class=\"tag\">&lt;<span class=\"name\">meta</span> <span class=\"attr\">name</span>=<span class=\"string\">&quot;viewport&quot;</span> <span class=\"attr\">content</span>=<span class=\"string\">&quot;width=device-width, initial-scale=1.0&quot;</span>&gt;</span></span><br><span class=\"line\">    <span class=\"tag\">&lt;<span class=\"name\">title</span>&gt;</span>Document<span class=\"tag\">&lt;/<span class=\"name\">title</span>&gt;</span></span><br><span class=\"line\"><span class=\"tag\">&lt;/<span class=\"name\">head</span>&gt;</span></span><br><span class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">body</span>&gt;</span></span><br><span class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">button</span> <span class=\"attr\">onclick</span>=<span class=\"string\">&quot;sendMsg()&quot;</span>&gt;</span>发送请求<span class=\"tag\">&lt;/<span class=\"name\">button</span>&gt;</span></span><br><span class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">script</span> <span class=\"attr\">type</span>=<span class=\"string\">&quot;text/javascript&quot;</span>&gt;</span></span><br><span class=\"line\"><span class=\"javascript\">    <span class=\"function\"><span class=\"keyword\">function</span> <span class=\"title\">sendMsg</span>(<span class=\"params\"></span>)</span>&#123;</span></span><br><span class=\"line\"><span class=\"javascript\">        <span class=\"comment\">//若无参数query为null</span></span></span><br><span class=\"line\"><span class=\"javascript\">        <span class=\"comment\">//若有参数，&#123;&#125;</span></span></span><br><span class=\"line\"><span class=\"javascript\">        get(<span class=\"string\">&#x27;http://127.0.0.1/data.php&#x27;</span>,&#123;<span class=\"attr\">name</span>:<span class=\"string\">&#x27;xiaoming&#x27;</span>,<span class=\"attr\">age</span>:<span class=\"number\">18</span>&#125;,<span class=\"function\"><span class=\"keyword\">function</span>(<span class=\"params\">resp</span>)</span>&#123;</span></span><br><span class=\"line\"><span class=\"javascript\">            <span class=\"built_in\">console</span>.log(resp)</span></span><br><span class=\"line\"><span class=\"javascript\">        &#125;,<span class=\"literal\">true</span>)</span></span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"><span class=\"javascript\">    <span class=\"comment\">//封装get请求</span></span></span><br><span class=\"line\"><span class=\"javascript\">    <span class=\"comment\">//query： string,请求的地址</span></span></span><br><span class=\"line\"><span class=\"javascript\">    <span class=\"comment\">//query： Object,请求携带的参数</span></span></span><br><span class=\"line\"><span class=\"javascript\">    <span class=\"comment\">//callback: function,成功之后的回调</span></span></span><br><span class=\"line\"><span class=\"javascript\">    <span class=\"comment\">//isJSON: boolean,是否转化为json格式</span></span></span><br><span class=\"line\"><span class=\"javascript\">    <span class=\"function\"><span class=\"keyword\">function</span> <span class=\"title\">get</span>(<span class=\"params\">url,query,callback,isJSON</span>)</span>&#123;</span></span><br><span class=\"line\"><span class=\"javascript\">        <span class=\"comment\">//若有参数,先把参数拼接在url后面</span></span></span><br><span class=\"line\"><span class=\"javascript\">        <span class=\"keyword\">if</span>(query)&#123;</span></span><br><span class=\"line\"><span class=\"javascript\">            url+=<span class=\"string\">&#x27;?&#x27;</span></span></span><br><span class=\"line\"><span class=\"javascript\">            <span class=\"keyword\">for</span>(<span class=\"keyword\">var</span> key <span class=\"keyword\">in</span> query)&#123;</span></span><br><span class=\"line\"><span class=\"javascript\">                url+=<span class=\"string\">`<span class=\"subst\">$&#123;key&#125;</span>=<span class=\"subst\">$&#123;query[key]&#125;</span>&amp;`</span></span></span><br><span class=\"line\">            &#125;</span><br><span class=\"line\"><span class=\"javascript\">            <span class=\"comment\">//取出最后多余的&amp;</span></span></span><br><span class=\"line\">            url=url.slice(0,-1)</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\"><span class=\"javascript\">        <span class=\"keyword\">var</span> xhr=<span class=\"keyword\">new</span> XMLHttpRequest()</span></span><br><span class=\"line\"><span class=\"javascript\">        xhr.open(<span class=\"string\">&#x27;get&#x27;</span>,url)</span></span><br><span class=\"line\">        xhr.send()</span><br><span class=\"line\"><span class=\"javascript\">        xhr.onreadystatechange=<span class=\"function\"><span class=\"keyword\">function</span>(<span class=\"params\"></span>)</span>&#123;</span></span><br><span class=\"line\"><span class=\"javascript\">            <span class=\"keyword\">if</span>(xhr.readyState === <span class=\"number\">4</span>)&#123;</span></span><br><span class=\"line\"><span class=\"javascript\">                <span class=\"keyword\">if</span>(xhr.status === <span class=\"number\">200</span>)&#123;</span></span><br><span class=\"line\"><span class=\"javascript\">                    <span class=\"keyword\">var</span> res=isJSON?<span class=\"built_in\">JSON</span>.parse(xhr.responseText):xhr.responseText</span></span><br><span class=\"line\">                    callback(res)</span><br><span class=\"line\">                &#125;</span><br><span class=\"line\">            &#125;</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"><span class=\"tag\">&lt;/<span class=\"name\">script</span>&gt;</span></span><br><span class=\"line\"><span class=\"tag\">&lt;/<span class=\"name\">body</span>&gt;</span></span><br><span class=\"line\"><span class=\"tag\">&lt;/<span class=\"name\">html</span>&gt;</span></span><br></pre></td></tr></table></figure>\n\n</li>\n</ol>\n<p>post封装</p>\n<figure class=\"highlight html\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br><span class=\"line\">38</span><br><span class=\"line\">39</span><br><span class=\"line\">40</span><br><span class=\"line\">41</span><br><span class=\"line\">42</span><br><span class=\"line\">43</span><br><span class=\"line\">44</span><br><span class=\"line\">45</span><br><span class=\"line\">46</span><br><span class=\"line\">47</span><br><span class=\"line\">48</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"meta\">&lt;!DOCTYPE <span class=\"meta-keyword\">html</span>&gt;</span></span><br><span class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">html</span> <span class=\"attr\">lang</span>=<span class=\"string\">&quot;en&quot;</span>&gt;</span></span><br><span class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">head</span>&gt;</span></span><br><span class=\"line\">    <span class=\"tag\">&lt;<span class=\"name\">meta</span> <span class=\"attr\">charset</span>=<span class=\"string\">&quot;UTF-8&quot;</span>&gt;</span></span><br><span class=\"line\">    <span class=\"tag\">&lt;<span class=\"name\">meta</span> <span class=\"attr\">name</span>=<span class=\"string\">&quot;viewport&quot;</span> <span class=\"attr\">content</span>=<span class=\"string\">&quot;width=device-width, initial-scale=1.0&quot;</span>&gt;</span></span><br><span class=\"line\">    <span class=\"tag\">&lt;<span class=\"name\">title</span>&gt;</span>Document<span class=\"tag\">&lt;/<span class=\"name\">title</span>&gt;</span></span><br><span class=\"line\"><span class=\"tag\">&lt;/<span class=\"name\">head</span>&gt;</span></span><br><span class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">body</span>&gt;</span></span><br><span class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">button</span> <span class=\"attr\">onclick</span>=<span class=\"string\">&quot;sendMsg()&quot;</span>&gt;</span>发送请求<span class=\"tag\">&lt;/<span class=\"name\">button</span>&gt;</span></span><br><span class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">script</span> <span class=\"attr\">type</span>=<span class=\"string\">&quot;text/javascript&quot;</span>&gt;</span></span><br><span class=\"line\"><span class=\"javascript\">    <span class=\"function\"><span class=\"keyword\">function</span> <span class=\"title\">sendMsg</span>(<span class=\"params\"></span>)</span>&#123;</span></span><br><span class=\"line\"><span class=\"javascript\">        <span class=\"comment\">//若无参数query为null</span></span></span><br><span class=\"line\"><span class=\"javascript\">        <span class=\"comment\">//若有参数，&#123;&#125;</span></span></span><br><span class=\"line\"><span class=\"javascript\">        post(<span class=\"string\">&#x27;http://127.0.0.1/data.php&#x27;</span>,&#123;<span class=\"string\">&#x27;name&#x27;</span>:<span class=\"string\">&#x27;xiaoming&#x27;</span>,<span class=\"string\">&#x27;age&#x27;</span>:<span class=\"number\">18</span>&#125;,<span class=\"function\"><span class=\"keyword\">function</span>(<span class=\"params\">resp</span>)</span>&#123;</span></span><br><span class=\"line\"><span class=\"javascript\">            <span class=\"built_in\">console</span>.log(resp)</span></span><br><span class=\"line\"><span class=\"javascript\">        &#125;,<span class=\"literal\">true</span>)</span></span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"><span class=\"javascript\">    <span class=\"comment\">//封装post请求</span></span></span><br><span class=\"line\"><span class=\"javascript\">    <span class=\"comment\">//query： string,请求的地址</span></span></span><br><span class=\"line\"><span class=\"javascript\">    <span class=\"comment\">//query： Object,请求携带的参数</span></span></span><br><span class=\"line\"><span class=\"javascript\">    <span class=\"comment\">//callback: function,成功之后的回调</span></span></span><br><span class=\"line\"><span class=\"javascript\">    <span class=\"comment\">//isJSON: boolean,是否转化为json格式</span></span></span><br><span class=\"line\"><span class=\"javascript\">    <span class=\"function\"><span class=\"keyword\">function</span> <span class=\"title\">post</span>(<span class=\"params\">url,query,callback,isJSON</span>)</span>&#123;</span></span><br><span class=\"line\"><span class=\"javascript\">        <span class=\"comment\">//若有参数,先把参数拼接起来</span></span></span><br><span class=\"line\"><span class=\"javascript\">        <span class=\"keyword\">var</span> str=<span class=\"string\">&#x27;&#x27;</span></span></span><br><span class=\"line\"><span class=\"javascript\">        <span class=\"keyword\">if</span>(query)&#123;</span></span><br><span class=\"line\"><span class=\"javascript\">            <span class=\"keyword\">for</span>(<span class=\"keyword\">var</span> key <span class=\"keyword\">in</span> query)&#123;</span></span><br><span class=\"line\"><span class=\"javascript\">                str+=<span class=\"string\">`<span class=\"subst\">$&#123;key&#125;</span>=<span class=\"subst\">$&#123;query[key]&#125;</span>&amp;`</span></span></span><br><span class=\"line\">            &#125;</span><br><span class=\"line\"><span class=\"javascript\">            <span class=\"comment\">//取出最后多余的&amp;</span></span></span><br><span class=\"line\">            str=str.slice(0,-1)</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\"><span class=\"javascript\">        <span class=\"keyword\">var</span> xhr=<span class=\"keyword\">new</span> XMLHttpRequest()</span></span><br><span class=\"line\"><span class=\"javascript\">        xhr.open(<span class=\"string\">&#x27;post&#x27;</span>,url)</span></span><br><span class=\"line\"><span class=\"javascript\">        xhr.setRequestHeader(<span class=\"string\">&#x27;Content-Type&#x27;</span>,<span class=\"string\">&#x27;application/x-www-form-urlencoded&#x27;</span>)</span></span><br><span class=\"line\">        xhr.send(str)</span><br><span class=\"line\"><span class=\"javascript\">        xhr.onreadystatechange=<span class=\"function\"><span class=\"keyword\">function</span>(<span class=\"params\"></span>)</span>&#123;</span></span><br><span class=\"line\"><span class=\"javascript\">            <span class=\"keyword\">if</span>(xhr.readyState === <span class=\"number\">4</span>)&#123;</span></span><br><span class=\"line\"><span class=\"javascript\">                <span class=\"keyword\">if</span>(xhr.status === <span class=\"number\">200</span>)&#123;</span></span><br><span class=\"line\"><span class=\"javascript\">                    <span class=\"keyword\">var</span> res=isJSON?<span class=\"built_in\">JSON</span>.parse(xhr.responseText):xhr.responseText</span></span><br><span class=\"line\">                    callback(res)</span><br><span class=\"line\">                &#125;</span><br><span class=\"line\">            &#125;</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"><span class=\"tag\">&lt;/<span class=\"name\">script</span>&gt;</span></span><br><span class=\"line\"><span class=\"tag\">&lt;/<span class=\"name\">body</span>&gt;</span></span><br><span class=\"line\"><span class=\"tag\">&lt;/<span class=\"name\">html</span>&gt;</span></span><br></pre></td></tr></table></figure>\n<p><strong>注</strong>：测试时一定要注意，当前端发的方式和后端接受的方式不一样时，可能会报json格式错误</p>\n<ol start=\"10\">\n<li><h4 id=\"ajax封装-2\"><a href=\"#ajax封装-2\" class=\"headerlink\" title=\"ajax封装(2)\"></a>ajax封装(2)</h4>创建util.js<figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br><span class=\"line\">38</span><br><span class=\"line\">39</span><br><span class=\"line\">40</span><br><span class=\"line\">41</span><br><span class=\"line\">42</span><br><span class=\"line\">43</span><br><span class=\"line\">44</span><br><span class=\"line\">45</span><br><span class=\"line\">46</span><br><span class=\"line\">47</span><br><span class=\"line\">48</span><br><span class=\"line\">49</span><br><span class=\"line\">50</span><br><span class=\"line\">51</span><br><span class=\"line\">52</span><br><span class=\"line\">53</span><br><span class=\"line\">54</span><br><span class=\"line\">55</span><br><span class=\"line\">56</span><br><span class=\"line\">57</span><br><span class=\"line\">58</span><br><span class=\"line\">59</span><br><span class=\"line\">60</span><br><span class=\"line\">61</span><br><span class=\"line\">62</span><br><span class=\"line\">63</span><br><span class=\"line\">64</span><br><span class=\"line\">65</span><br><span class=\"line\">66</span><br><span class=\"line\">67</span><br><span class=\"line\">68</span><br><span class=\"line\">69</span><br><span class=\"line\">70</span><br><span class=\"line\">71</span><br><span class=\"line\">72</span><br><span class=\"line\">73</span><br><span class=\"line\">74</span><br><span class=\"line\">75</span><br><span class=\"line\">76</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">//创建一个util对象，切记对象内的数据之间要有逗号隔开</span></span><br><span class=\"line\"><span class=\"keyword\">var</span> util=&#123;</span><br><span class=\"line\">    <span class=\"comment\">//封装get</span></span><br><span class=\"line\">    get:<span class=\"function\"><span class=\"keyword\">function</span> (<span class=\"params\">url,query,callback,isJSON</span>)</span>&#123;</span><br><span class=\"line\">        <span class=\"comment\">//若有参数,先把参数拼接起来</span></span><br><span class=\"line\">        <span class=\"keyword\">var</span> str=<span class=\"string\">&#x27;&#x27;</span></span><br><span class=\"line\">        <span class=\"keyword\">if</span>(query)&#123;</span><br><span class=\"line\">            <span class=\"keyword\">for</span>(<span class=\"keyword\">var</span> key <span class=\"keyword\">in</span> query)&#123;</span><br><span class=\"line\">                str+=<span class=\"string\">`<span class=\"subst\">$&#123;key&#125;</span>=<span class=\"subst\">$&#123;query[key]&#125;</span>&amp;`</span></span><br><span class=\"line\">            &#125;</span><br><span class=\"line\">            <span class=\"comment\">//取出最后多余的&amp;</span></span><br><span class=\"line\">            str=str.slice(<span class=\"number\">0</span>,-<span class=\"number\">1</span>)</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">        <span class=\"keyword\">var</span> xhr=<span class=\"keyword\">new</span> XMLHttpRequest()</span><br><span class=\"line\">        xhr.open(<span class=\"string\">&#x27;post&#x27;</span>,url)</span><br><span class=\"line\">        xhr.setRequestHeader(<span class=\"string\">&#x27;Content-Type&#x27;</span>,<span class=\"string\">&#x27;application/x-www-form-urlencoded&#x27;</span>)</span><br><span class=\"line\">        xhr.send(str)</span><br><span class=\"line\">        xhr.onreadystatechange=<span class=\"function\"><span class=\"keyword\">function</span>(<span class=\"params\"></span>)</span>&#123;</span><br><span class=\"line\">            <span class=\"keyword\">if</span>(xhr.readyState === <span class=\"number\">4</span>)&#123;</span><br><span class=\"line\">                <span class=\"keyword\">if</span>(xhr.status === <span class=\"number\">200</span>)&#123;</span><br><span class=\"line\">                    <span class=\"keyword\">var</span> res=isJSON?<span class=\"built_in\">JSON</span>.parse(xhr.responseText):xhr.responseText</span><br><span class=\"line\">                    callback(res)</span><br><span class=\"line\">                &#125;</span><br><span class=\"line\">            &#125;</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">    &#125;,</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"comment\">//封装post</span></span><br><span class=\"line\">    post:<span class=\"function\"><span class=\"keyword\">function</span> (<span class=\"params\">url,query,callback,isJSON</span>)</span>&#123;</span><br><span class=\"line\">        <span class=\"comment\">//若有参数,先把参数拼接起来</span></span><br><span class=\"line\">        <span class=\"keyword\">var</span> str=<span class=\"string\">&#x27;&#x27;</span></span><br><span class=\"line\">        <span class=\"keyword\">if</span>(query)&#123;</span><br><span class=\"line\">            <span class=\"keyword\">for</span>(<span class=\"keyword\">var</span> key <span class=\"keyword\">in</span> query)&#123;</span><br><span class=\"line\">                str+=<span class=\"string\">`<span class=\"subst\">$&#123;key&#125;</span>=<span class=\"subst\">$&#123;query[key]&#125;</span>&amp;`</span></span><br><span class=\"line\">            &#125;</span><br><span class=\"line\">            <span class=\"comment\">//取出最后多余的&amp;</span></span><br><span class=\"line\">            str=str.slice(<span class=\"number\">0</span>,-<span class=\"number\">1</span>)</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">        <span class=\"keyword\">var</span> xhr=<span class=\"keyword\">new</span> XMLHttpRequest()</span><br><span class=\"line\">        xhr.open(<span class=\"string\">&#x27;get&#x27;</span>,url)</span><br><span class=\"line\">        xhr.setRequestHeader(<span class=\"string\">&#x27;Content-Type&#x27;</span>,<span class=\"string\">&#x27;application/x-www-form-urlencoded&#x27;</span>)</span><br><span class=\"line\">        xhr.send(str)</span><br><span class=\"line\">        xhr.onreadystatechange=<span class=\"function\"><span class=\"keyword\">function</span>(<span class=\"params\"></span>)</span>&#123;</span><br><span class=\"line\">            <span class=\"keyword\">if</span>(xhr.readyState === <span class=\"number\">4</span>)&#123;</span><br><span class=\"line\">                <span class=\"keyword\">if</span>(xhr.status === <span class=\"number\">200</span>)&#123;</span><br><span class=\"line\">                    <span class=\"keyword\">var</span> res=isJSON?<span class=\"built_in\">JSON</span>.parse(xhr.responseText):xhr.responseText</span><br><span class=\"line\">                    callback(res)</span><br><span class=\"line\">                &#125;</span><br><span class=\"line\">            &#125;</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">//调用时</span></span><br><span class=\"line\">&lt;!DOCTYPE html&gt;</span><br><span class=\"line\">&lt;html lang=<span class=\"string\">&quot;en&quot;</span>&gt;</span><br><span class=\"line\">&lt;head&gt;</span><br><span class=\"line\">    &lt;meta charset=<span class=\"string\">&quot;UTF-8&quot;</span>&gt;</span><br><span class=\"line\">    &lt;meta name=<span class=\"string\">&quot;viewport&quot;</span> content=<span class=\"string\">&quot;width=device-width, initial-scale=1.0&quot;</span>&gt;</span><br><span class=\"line\">    &lt;title&gt;Document&lt;/title&gt;</span><br><span class=\"line\">&lt;/head&gt;</span><br><span class=\"line\">&lt;body&gt;</span><br><span class=\"line\">&lt;button onclick=<span class=\"string\">&quot;sendMsg()&quot;</span>&gt;发送请求&lt;/button&gt;</span><br><span class=\"line\"><span class=\"comment\">//先引入js文件,然后调用即可</span></span><br><span class=\"line\">&lt;script src=<span class=\"string\">&quot;./util.js&quot;</span>&gt;&lt;/script&gt;</span><br><span class=\"line\">&lt;script type=<span class=\"string\">&quot;text/javascript&quot;</span>&gt;</span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">function</span> <span class=\"title\">sendMsg</span>(<span class=\"params\"></span>)</span>&#123;</span><br><span class=\"line\">        <span class=\"comment\">//若无参数query为null</span></span><br><span class=\"line\">        <span class=\"comment\">//若有参数，&#123;&#125;</span></span><br><span class=\"line\">        util.post(<span class=\"string\">&#x27;http://127.0.0.1/data.php&#x27;</span>,&#123;<span class=\"string\">&#x27;name&#x27;</span>:<span class=\"string\">&#x27;xiaoming&#x27;</span>,<span class=\"string\">&#x27;age&#x27;</span>:<span class=\"number\">18</span>&#125;,<span class=\"function\"><span class=\"keyword\">function</span>(<span class=\"params\">resp</span>)</span>&#123;</span><br><span class=\"line\">            <span class=\"built_in\">console</span>.log(resp)</span><br><span class=\"line\">        &#125;,<span class=\"literal\">true</span>)</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&lt;/script&gt;</span><br><span class=\"line\">&lt;/body&gt;</span><br><span class=\"line\">&lt;/html&gt;</span><br></pre></td></tr></table></figure></li>\n<li><h4 id=\"ajax封装-3\"><a href=\"#ajax封装-3\" class=\"headerlink\" title=\"ajax封装(3)\"></a>ajax封装(3)</h4>server代码：<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">var</span> util=&#123;</span><br><span class=\"line\">    <span class=\"comment\">//param : Object&#123;method,url,query,callback,isJSON&#125;</span></span><br><span class=\"line\">    ajax:<span class=\"function\"><span class=\"keyword\">function</span>(<span class=\"params\">params</span>)</span>&#123;</span><br><span class=\"line\">        <span class=\"keyword\">var</span> xhr=<span class=\"keyword\">new</span> XMLHttpRequest()</span><br><span class=\"line\">        <span class=\"keyword\">if</span>(params.method === <span class=\"string\">&#x27;get&#x27;</span>)&#123;</span><br><span class=\"line\">            params.url+=<span class=\"string\">&#x27;?&#x27;</span></span><br><span class=\"line\">            <span class=\"keyword\">for</span>(<span class=\"keyword\">var</span> key <span class=\"keyword\">in</span> params.query)&#123;</span><br><span class=\"line\">                params.url+=<span class=\"string\">`<span class=\"subst\">$&#123;key&#125;</span>=<span class=\"subst\">$&#123;params.query[key]&#125;</span>&amp;`</span></span><br><span class=\"line\">            &#125;</span><br><span class=\"line\">            params.url=params.url.slice(<span class=\"number\">0</span>,-<span class=\"number\">1</span>)</span><br><span class=\"line\">            xhr.open(<span class=\"string\">&#x27;get&#x27;</span>,params.url)</span><br><span class=\"line\">            xhr.send()</span><br><span class=\"line\">        &#125;<span class=\"keyword\">else</span>&#123;</span><br><span class=\"line\">            <span class=\"keyword\">var</span> str=<span class=\"string\">&#x27;&#x27;</span></span><br><span class=\"line\">        <span class=\"keyword\">if</span>(params.query)&#123;</span><br><span class=\"line\">            <span class=\"keyword\">for</span>(<span class=\"keyword\">var</span> key <span class=\"keyword\">in</span> params.query)&#123;</span><br><span class=\"line\">                str+=<span class=\"string\">`<span class=\"subst\">$&#123;key&#125;</span>=<span class=\"subst\">$&#123;params.query[key]&#125;</span>&amp;`</span></span><br><span class=\"line\">            &#125;</span><br><span class=\"line\">            <span class=\"comment\">//取出最后多余的&amp;</span></span><br><span class=\"line\">            str=str.slice(<span class=\"number\">0</span>,-<span class=\"number\">1</span>)</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">        <span class=\"keyword\">var</span> xhr=<span class=\"keyword\">new</span> XMLHttpRequest()</span><br><span class=\"line\">        xhr.open(<span class=\"string\">&#x27;post&#x27;</span>,params.url)</span><br><span class=\"line\">        xhr.setRequestHeader(<span class=\"string\">&#x27;Content-Type&#x27;</span>,<span class=\"string\">&#x27;application/x-www-form-urlencoded&#x27;</span>)</span><br><span class=\"line\">        xhr.send(str)</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">        xhr.onreadystatechange=<span class=\"function\"><span class=\"keyword\">function</span>(<span class=\"params\"></span>)</span>&#123;</span><br><span class=\"line\">            <span class=\"keyword\">if</span>(xhr.readyState === <span class=\"number\">4</span>)&#123;</span><br><span class=\"line\">                <span class=\"keyword\">if</span>(xhr.status === <span class=\"number\">200</span>)&#123;</span><br><span class=\"line\">                    <span class=\"keyword\">var</span> resp=params.isJSON ? <span class=\"built_in\">JSON</span>.parse(xhr.responseText) : xhr.responseText</span><br><span class=\"line\">                    params.callback(resp)</span><br><span class=\"line\">                &#125;</span><br><span class=\"line\">            &#125;</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\nclient代码<figure class=\"highlight html\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"meta\">&lt;!DOCTYPE <span class=\"meta-keyword\">html</span>&gt;</span></span><br><span class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">html</span> <span class=\"attr\">lang</span>=<span class=\"string\">&quot;en&quot;</span>&gt;</span></span><br><span class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">head</span>&gt;</span></span><br><span class=\"line\">    <span class=\"tag\">&lt;<span class=\"name\">meta</span> <span class=\"attr\">charset</span>=<span class=\"string\">&quot;UTF-8&quot;</span>&gt;</span></span><br><span class=\"line\">    <span class=\"tag\">&lt;<span class=\"name\">meta</span> <span class=\"attr\">name</span>=<span class=\"string\">&quot;viewport&quot;</span> <span class=\"attr\">content</span>=<span class=\"string\">&quot;width=device-width, initial-scale=1.0&quot;</span>&gt;</span></span><br><span class=\"line\">    <span class=\"tag\">&lt;<span class=\"name\">title</span>&gt;</span>Document<span class=\"tag\">&lt;/<span class=\"name\">title</span>&gt;</span></span><br><span class=\"line\"><span class=\"tag\">&lt;/<span class=\"name\">head</span>&gt;</span></span><br><span class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">body</span>&gt;</span></span><br><span class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">button</span> <span class=\"attr\">onclick</span>=<span class=\"string\">&quot;sendMsg()&quot;</span>&gt;</span>发送请求<span class=\"tag\">&lt;/<span class=\"name\">button</span>&gt;</span></span><br><span class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">script</span> <span class=\"attr\">src</span>=<span class=\"string\">&quot;./util.js&quot;</span>&gt;</span><span class=\"tag\">&lt;/<span class=\"name\">script</span>&gt;</span></span><br><span class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">script</span> <span class=\"attr\">type</span>=<span class=\"string\">&quot;text/javascript&quot;</span>&gt;</span></span><br><span class=\"line\"><span class=\"javascript\">    <span class=\"function\"><span class=\"keyword\">function</span> <span class=\"title\">sendMsg</span>(<span class=\"params\"></span>)</span>&#123;</span></span><br><span class=\"line\">        util.ajax(&#123;</span><br><span class=\"line\"><span class=\"javascript\">        \tmethod:<span class=\"string\">&#x27;get&#x27;</span>,</span></span><br><span class=\"line\"><span class=\"javascript\">        \tisJSON:<span class=\"literal\">true</span>,</span></span><br><span class=\"line\"><span class=\"javascript\">        \turl:<span class=\"string\">&#x27;http://127.0.0.1/data.php&#x27;</span>,</span></span><br><span class=\"line\">        \tquery:&#123;</span><br><span class=\"line\"><span class=\"javascript\">        \t\t<span class=\"string\">&#x27;name&#x27;</span>:<span class=\"string\">&#x27;xiaoming&#x27;</span>,</span></span><br><span class=\"line\"><span class=\"javascript\">        \t\t<span class=\"string\">&#x27;age&#x27;</span>:<span class=\"number\">18</span></span></span><br><span class=\"line\">        \t&#125;,</span><br><span class=\"line\"><span class=\"javascript\">        \tcallback:<span class=\"function\"><span class=\"keyword\">function</span>(<span class=\"params\">resp</span>)</span>&#123;</span></span><br><span class=\"line\"><span class=\"javascript\">                <span class=\"built_in\">console</span>.log(resp)</span></span><br><span class=\"line\">        \t&#125;</span><br><span class=\"line\">        &#125;)   </span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"><span class=\"tag\">&lt;/<span class=\"name\">script</span>&gt;</span></span><br><span class=\"line\"><span class=\"tag\">&lt;/<span class=\"name\">body</span>&gt;</span></span><br><span class=\"line\"><span class=\"tag\">&lt;/<span class=\"name\">html</span>&gt;</span></span><br></pre></td></tr></table></figure>\n</li>\n</ol>\n"},{"title":"Ajax实现文件上传","abbrlink":36363,"date":"2021-05-05T10:35:51.000Z","_content":"# 1.前端demo\n```\n<script type=\"text/javascript\">\n    function btnSubmit() {\n        var img = document.getElementById('images').files[0];\n        var fd = new FormData();\n        fd.append('FILE', img);\n        fd.append('name', 'xiaoming');\n        $.ajax({\n            type: \"post\",\n            url: \"http://127.0.0.1/test.php\",\n            processData: false,//非常重要，不可省略\n            contentType: false,//非常重要，不可省略\n            dataType: \"json\",\n            data: fd,\n            success: function(data) {\n\n            },\n            error: function(data) {\n\n            }\n        });\n    }\n</script>\n```\n# 2.服务端demo\n```\n$imgName=$_FILES['FILE']['name'];\n$tmp_name=$_FILES['FILE']['tmp_name'];\n$fileName='./123.jpg';\n$rst=move_uploaded_file($tmp_name,$fileName);\necho $rst;\n```\n注：\n1.$fileName路径中的路径必须存在；\n2.$fileName路径中不可出现中文；\n若不满足则两种情况，可能会false；","source":"_posts/Ajax实现文件上传.md","raw":"---\ntitle: Ajax实现文件上传\ntags:\n  - 前端\n  - Ajax\ncategories: 前端\nabbrlink: 36363\ndate: 2021-05-05 18:35:51\n---\n# 1.前端demo\n```\n<script type=\"text/javascript\">\n    function btnSubmit() {\n        var img = document.getElementById('images').files[0];\n        var fd = new FormData();\n        fd.append('FILE', img);\n        fd.append('name', 'xiaoming');\n        $.ajax({\n            type: \"post\",\n            url: \"http://127.0.0.1/test.php\",\n            processData: false,//非常重要，不可省略\n            contentType: false,//非常重要，不可省略\n            dataType: \"json\",\n            data: fd,\n            success: function(data) {\n\n            },\n            error: function(data) {\n\n            }\n        });\n    }\n</script>\n```\n# 2.服务端demo\n```\n$imgName=$_FILES['FILE']['name'];\n$tmp_name=$_FILES['FILE']['tmp_name'];\n$fileName='./123.jpg';\n$rst=move_uploaded_file($tmp_name,$fileName);\necho $rst;\n```\n注：\n1.$fileName路径中的路径必须存在；\n2.$fileName路径中不可出现中文；\n若不满足则两种情况，可能会false；","slug":"Ajax实现文件上传","published":1,"updated":"2021-07-27T14:51:43.496Z","comments":1,"layout":"post","photos":[],"link":"","_id":"ckrmv4jgl0007zrfy1f2oduyl","content":"<h1 id=\"1-前端demo\"><a href=\"#1-前端demo\" class=\"headerlink\" title=\"1.前端demo\"></a>1.前端demo</h1><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">&lt;script type&#x3D;&quot;text&#x2F;javascript&quot;&gt;</span><br><span class=\"line\">    function btnSubmit() &#123;</span><br><span class=\"line\">        var img &#x3D; document.getElementById(&#39;images&#39;).files[0];</span><br><span class=\"line\">        var fd &#x3D; new FormData();</span><br><span class=\"line\">        fd.append(&#39;FILE&#39;, img);</span><br><span class=\"line\">        fd.append(&#39;name&#39;, &#39;xiaoming&#39;);</span><br><span class=\"line\">        $.ajax(&#123;</span><br><span class=\"line\">            type: &quot;post&quot;,</span><br><span class=\"line\">            url: &quot;http:&#x2F;&#x2F;127.0.0.1&#x2F;test.php&quot;,</span><br><span class=\"line\">            processData: false,&#x2F;&#x2F;非常重要，不可省略</span><br><span class=\"line\">            contentType: false,&#x2F;&#x2F;非常重要，不可省略</span><br><span class=\"line\">            dataType: &quot;json&quot;,</span><br><span class=\"line\">            data: fd,</span><br><span class=\"line\">            success: function(data) &#123;</span><br><span class=\"line\"></span><br><span class=\"line\">            &#125;,</span><br><span class=\"line\">            error: function(data) &#123;</span><br><span class=\"line\"></span><br><span class=\"line\">            &#125;</span><br><span class=\"line\">        &#125;);</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&lt;&#x2F;script&gt;</span><br></pre></td></tr></table></figure>\n<h1 id=\"2-服务端demo\"><a href=\"#2-服务端demo\" class=\"headerlink\" title=\"2.服务端demo\"></a>2.服务端demo</h1><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">$imgName&#x3D;$_FILES[&#39;FILE&#39;][&#39;name&#39;];</span><br><span class=\"line\">$tmp_name&#x3D;$_FILES[&#39;FILE&#39;][&#39;tmp_name&#39;];</span><br><span class=\"line\">$fileName&#x3D;&#39;.&#x2F;123.jpg&#39;;</span><br><span class=\"line\">$rst&#x3D;move_uploaded_file($tmp_name,$fileName);</span><br><span class=\"line\">echo $rst;</span><br></pre></td></tr></table></figure>\n<p>注：<br>1.$fileName路径中的路径必须存在；<br>2.$fileName路径中不可出现中文；<br>若不满足则两种情况，可能会false；</p>\n","site":{"data":{}},"length":882,"excerpt":"","more":"<h1 id=\"1-前端demo\"><a href=\"#1-前端demo\" class=\"headerlink\" title=\"1.前端demo\"></a>1.前端demo</h1><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">&lt;script type&#x3D;&quot;text&#x2F;javascript&quot;&gt;</span><br><span class=\"line\">    function btnSubmit() &#123;</span><br><span class=\"line\">        var img &#x3D; document.getElementById(&#39;images&#39;).files[0];</span><br><span class=\"line\">        var fd &#x3D; new FormData();</span><br><span class=\"line\">        fd.append(&#39;FILE&#39;, img);</span><br><span class=\"line\">        fd.append(&#39;name&#39;, &#39;xiaoming&#39;);</span><br><span class=\"line\">        $.ajax(&#123;</span><br><span class=\"line\">            type: &quot;post&quot;,</span><br><span class=\"line\">            url: &quot;http:&#x2F;&#x2F;127.0.0.1&#x2F;test.php&quot;,</span><br><span class=\"line\">            processData: false,&#x2F;&#x2F;非常重要，不可省略</span><br><span class=\"line\">            contentType: false,&#x2F;&#x2F;非常重要，不可省略</span><br><span class=\"line\">            dataType: &quot;json&quot;,</span><br><span class=\"line\">            data: fd,</span><br><span class=\"line\">            success: function(data) &#123;</span><br><span class=\"line\"></span><br><span class=\"line\">            &#125;,</span><br><span class=\"line\">            error: function(data) &#123;</span><br><span class=\"line\"></span><br><span class=\"line\">            &#125;</span><br><span class=\"line\">        &#125;);</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&lt;&#x2F;script&gt;</span><br></pre></td></tr></table></figure>\n<h1 id=\"2-服务端demo\"><a href=\"#2-服务端demo\" class=\"headerlink\" title=\"2.服务端demo\"></a>2.服务端demo</h1><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">$imgName&#x3D;$_FILES[&#39;FILE&#39;][&#39;name&#39;];</span><br><span class=\"line\">$tmp_name&#x3D;$_FILES[&#39;FILE&#39;][&#39;tmp_name&#39;];</span><br><span class=\"line\">$fileName&#x3D;&#39;.&#x2F;123.jpg&#39;;</span><br><span class=\"line\">$rst&#x3D;move_uploaded_file($tmp_name,$fileName);</span><br><span class=\"line\">echo $rst;</span><br></pre></td></tr></table></figure>\n<p>注：<br>1.$fileName路径中的路径必须存在；<br>2.$fileName路径中不可出现中文；<br>若不满足则两种情况，可能会false；</p>\n"},{"title":"Anaconda安装库时遇到的坑","abbrlink":30138,"date":"2021-01-03T05:37:47.000Z","_content":"1. 注意要在安装库文件的目录下使用cmd，然后用命令安装\n2. 当安装完库成功后,import库发现不存在,可能是因为库的安装路径不在当前Python库的搜索路径内,所以没被找到.\n解决方法:\n(1)把库的路径加入搜索路径内;\n(2)当安装Anaconda使,自带了Python,因此删掉自己安装的Python后再重新安装库即可，这样就会自动安装在搜索目录下了(新手尽量只装一个Python)\n","source":"_posts/Anaconda安装库时遇到的坑.md","raw":"---\ntitle: Anaconda安装库时遇到的坑\ntags:\n  - 机器学习\ncategories: 机器学习\nabbrlink: 30138\ndate: 2021-01-03 13:37:47\n---\n1. 注意要在安装库文件的目录下使用cmd，然后用命令安装\n2. 当安装完库成功后,import库发现不存在,可能是因为库的安装路径不在当前Python库的搜索路径内,所以没被找到.\n解决方法:\n(1)把库的路径加入搜索路径内;\n(2)当安装Anaconda使,自带了Python,因此删掉自己安装的Python后再重新安装库即可，这样就会自动安装在搜索目录下了(新手尽量只装一个Python)\n","slug":"Anaconda安装库时遇到的坑","published":1,"updated":"2021-07-27T14:51:43.497Z","comments":1,"layout":"post","photos":[],"link":"","_id":"ckrmv4jgn0009zrfy6u0l434d","content":"<ol>\n<li>注意要在安装库文件的目录下使用cmd，然后用命令安装</li>\n<li>当安装完库成功后,import库发现不存在,可能是因为库的安装路径不在当前Python库的搜索路径内,所以没被找到.<br>解决方法:<br>(1)把库的路径加入搜索路径内;<br>(2)当安装Anaconda使,自带了Python,因此删掉自己安装的Python后再重新安装库即可，这样就会自动安装在搜索目录下了(新手尽量只装一个Python)</li>\n</ol>\n","site":{"data":{}},"length":187,"excerpt":"","more":"<ol>\n<li>注意要在安装库文件的目录下使用cmd，然后用命令安装</li>\n<li>当安装完库成功后,import库发现不存在,可能是因为库的安装路径不在当前Python库的搜索路径内,所以没被找到.<br>解决方法:<br>(1)把库的路径加入搜索路径内;<br>(2)当安装Anaconda使,自带了Python,因此删掉自己安装的Python后再重新安装库即可，这样就会自动安装在搜索目录下了(新手尽量只装一个Python)</li>\n</ol>\n"},{"title":"C语言函数数组传值","abbrlink":35573,"date":"2021-01-13T15:02:01.000Z","_content":"C语言中,向函数传值的问题\n```C\n// 方法一\n#include<stdio.h>\nint duplicate(int* number);\nint main(){\n\tint number[5]={1,2,3,4,5};\n\tduplicate(number);\n\treturn 0;\n}\nint duplicate(int *number)\n{\n\tprintf(\"%d\",number[0]);\n}\n//方法二\n#include<stdio.h>\nint duplicate(int number[]);\nint main(){\n\tint number[5]={1,2,3,4,5};\n\tduplicate(number);\n\treturn 0;\n}\nint duplicate(int number[])\n{\n\tprintf(\"%d\",number[0]);\n}\n```","source":"_posts/C语言函数数组传值.md","raw":"---\ntitle: C语言函数数组传值\ntags:\n  - C语言\ncategories: C语言\nabbrlink: 35573\ndate: 2021-01-13 23:02:01\n---\nC语言中,向函数传值的问题\n```C\n// 方法一\n#include<stdio.h>\nint duplicate(int* number);\nint main(){\n\tint number[5]={1,2,3,4,5};\n\tduplicate(number);\n\treturn 0;\n}\nint duplicate(int *number)\n{\n\tprintf(\"%d\",number[0]);\n}\n//方法二\n#include<stdio.h>\nint duplicate(int number[]);\nint main(){\n\tint number[5]={1,2,3,4,5};\n\tduplicate(number);\n\treturn 0;\n}\nint duplicate(int number[])\n{\n\tprintf(\"%d\",number[0]);\n}\n```","slug":"C语言函数数组传值","published":1,"updated":"2021-07-27T14:51:43.498Z","comments":1,"layout":"post","photos":[],"link":"","_id":"ckrmv4jgp000bzrfyg1o11bdy","content":"<p>C语言中,向函数传值的问题</p>\n<figure class=\"highlight c\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">// 方法一</span></span><br><span class=\"line\"><span class=\"meta\">#<span class=\"meta-keyword\">include</span><span class=\"meta-string\">&lt;stdio.h&gt;</span></span></span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">int</span> <span class=\"title\">duplicate</span><span class=\"params\">(<span class=\"keyword\">int</span>* number)</span></span>;</span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">int</span> <span class=\"title\">main</span><span class=\"params\">()</span></span>&#123;</span><br><span class=\"line\">\t<span class=\"keyword\">int</span> number[<span class=\"number\">5</span>]=&#123;<span class=\"number\">1</span>,<span class=\"number\">2</span>,<span class=\"number\">3</span>,<span class=\"number\">4</span>,<span class=\"number\">5</span>&#125;;</span><br><span class=\"line\">\tduplicate(number);</span><br><span class=\"line\">\t<span class=\"keyword\">return</span> <span class=\"number\">0</span>;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">int</span> <span class=\"title\">duplicate</span><span class=\"params\">(<span class=\"keyword\">int</span> *number)</span></span></span><br><span class=\"line\"><span class=\"function\"></span>&#123;</span><br><span class=\"line\">\t<span class=\"built_in\">printf</span>(<span class=\"string\">&quot;%d&quot;</span>,number[<span class=\"number\">0</span>]);</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"><span class=\"comment\">//方法二</span></span><br><span class=\"line\"><span class=\"meta\">#<span class=\"meta-keyword\">include</span><span class=\"meta-string\">&lt;stdio.h&gt;</span></span></span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">int</span> <span class=\"title\">duplicate</span><span class=\"params\">(<span class=\"keyword\">int</span> number[])</span></span>;</span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">int</span> <span class=\"title\">main</span><span class=\"params\">()</span></span>&#123;</span><br><span class=\"line\">\t<span class=\"keyword\">int</span> number[<span class=\"number\">5</span>]=&#123;<span class=\"number\">1</span>,<span class=\"number\">2</span>,<span class=\"number\">3</span>,<span class=\"number\">4</span>,<span class=\"number\">5</span>&#125;;</span><br><span class=\"line\">\tduplicate(number);</span><br><span class=\"line\">\t<span class=\"keyword\">return</span> <span class=\"number\">0</span>;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">int</span> <span class=\"title\">duplicate</span><span class=\"params\">(<span class=\"keyword\">int</span> number[])</span></span></span><br><span class=\"line\"><span class=\"function\"></span>&#123;</span><br><span class=\"line\">\t<span class=\"built_in\">printf</span>(<span class=\"string\">&quot;%d&quot;</span>,number[<span class=\"number\">0</span>]);</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>","site":{"data":{}},"length":462,"excerpt":"","more":"<p>C语言中,向函数传值的问题</p>\n<figure class=\"highlight c\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">// 方法一</span></span><br><span class=\"line\"><span class=\"meta\">#<span class=\"meta-keyword\">include</span><span class=\"meta-string\">&lt;stdio.h&gt;</span></span></span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">int</span> <span class=\"title\">duplicate</span><span class=\"params\">(<span class=\"keyword\">int</span>* number)</span></span>;</span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">int</span> <span class=\"title\">main</span><span class=\"params\">()</span></span>&#123;</span><br><span class=\"line\">\t<span class=\"keyword\">int</span> number[<span class=\"number\">5</span>]=&#123;<span class=\"number\">1</span>,<span class=\"number\">2</span>,<span class=\"number\">3</span>,<span class=\"number\">4</span>,<span class=\"number\">5</span>&#125;;</span><br><span class=\"line\">\tduplicate(number);</span><br><span class=\"line\">\t<span class=\"keyword\">return</span> <span class=\"number\">0</span>;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">int</span> <span class=\"title\">duplicate</span><span class=\"params\">(<span class=\"keyword\">int</span> *number)</span></span></span><br><span class=\"line\"><span class=\"function\"></span>&#123;</span><br><span class=\"line\">\t<span class=\"built_in\">printf</span>(<span class=\"string\">&quot;%d&quot;</span>,number[<span class=\"number\">0</span>]);</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"><span class=\"comment\">//方法二</span></span><br><span class=\"line\"><span class=\"meta\">#<span class=\"meta-keyword\">include</span><span class=\"meta-string\">&lt;stdio.h&gt;</span></span></span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">int</span> <span class=\"title\">duplicate</span><span class=\"params\">(<span class=\"keyword\">int</span> number[])</span></span>;</span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">int</span> <span class=\"title\">main</span><span class=\"params\">()</span></span>&#123;</span><br><span class=\"line\">\t<span class=\"keyword\">int</span> number[<span class=\"number\">5</span>]=&#123;<span class=\"number\">1</span>,<span class=\"number\">2</span>,<span class=\"number\">3</span>,<span class=\"number\">4</span>,<span class=\"number\">5</span>&#125;;</span><br><span class=\"line\">\tduplicate(number);</span><br><span class=\"line\">\t<span class=\"keyword\">return</span> <span class=\"number\">0</span>;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">int</span> <span class=\"title\">duplicate</span><span class=\"params\">(<span class=\"keyword\">int</span> number[])</span></span></span><br><span class=\"line\"><span class=\"function\"></span>&#123;</span><br><span class=\"line\">\t<span class=\"built_in\">printf</span>(<span class=\"string\">&quot;%d&quot;</span>,number[<span class=\"number\">0</span>]);</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>"},{"title":"Java笔记(第二天)","abbrlink":46614,"date":"2021-04-24T15:33:04.000Z","_content":"1. String当中与获取有关的字符串\n```java\nlength:获取字符串长度；\nconcat:连接两个字符串；\ncharAt:获取指定索引位置的单个字符；\nindexOf:查找参数字符串在本字符串中首次出现的位置；\n```\n2. 字符串的截取办法\n```\nsubstring(int index):截取从参数位置一直到字符串末尾，返回新的字符串；\nsubstring(int begin,int end):截取从begin到end的字符串；\n备注：[begin,end)\n```\n3. string当中与转换相关的常用方法\n```\ntoCharArray():将字符串拆分成为字符数组作为返回值；\ngetBytes():获得当前字符串底层的字节数组；\nreplace(oldString,newString):将所有出现的老字符串，替换成新的字符串并返回\nsplit():按照分割参数的规则，将字符串分成若干部分；\n```\n4. static关键字\n```\n1. static关键字修饰的内容属于类，而不属于对象本身；\n2. 用static修饰的变量称为静态变量，修饰的方法称为静态方法；\n3. 静态变量和静态方法可以用类名调用，也可以用对象名调用，但推荐用类名调用，因为静态变量和静态方法属于类，而不是对象；\n4. 成员方法可以调用静态变量和静态方法；但静态不能调用非静态；\n5. 静态代码块：当第一次用到本类时，静态代码块执行唯一的一次；静态内容总是由于非静态，所以静态代码块比构造方法先执行；\n6. 在静态方法中不能使用this关键字；\n```\n5. Arrays相关常用方法\n```\n1. Arrays.toString:将数组变成字符串，并加上[];\n2. Arrays.sort:将数组进行排序，数字按升序，字符串按字母升序；\n```\n6. extends关键字\n```\n1. 在继承时，若父子变量名重名，则创建对象时，创建的类对象是谁就用谁，没有就向上找；\n2. 在java中只有单继承，没有多继承；\n3. 在java中可以多级继承；\n4. 无论是成员方法还是成员变量，如果没有都是向上找父类，绝对不会向下找父类；\n```\n7. 重写\n```\n1.方法的名称一样，参数列表也一样\n2.方法覆盖重写的注意事项：\n    1.必须保证父子类之间的方法名称相同，参数列表也相同；\n    2.子类的返回值必须小于或等于父类方法的返回值范围；\n    3.子类方法的权限必须大于等于父类方法的权限修饰符；\n    备注：public>protected>default>private \n```\n8. super关键字\n```\n1. 使用super关键字访问父类的成员变量；\n2. 使用super关键字调用父类中的方法(当父类和子类方法名重名时)；\n3. 调用父类构造方法；\n4. super的父类构造调用，必须是子类构造方法的第一个语句。不能一个子类构造调用多次super构造。\n总结：super关键字的三种用法：\n1. 在子类的成员方法中，访问父类的成员变量；\n2. 在子类的成员方法中，访问父类的成员方法；\n3. 在子类的构造方法中，访问父类的构造方法；\n```\n","source":"_posts/Java笔记(第二天).md","raw":"---\ntitle: Java笔记(第二天)\ntags:\n  - Java\ncategories: Java\nabbrlink: 46614\ndate: 2021-04-24 23:33:04\n---\n1. String当中与获取有关的字符串\n```java\nlength:获取字符串长度；\nconcat:连接两个字符串；\ncharAt:获取指定索引位置的单个字符；\nindexOf:查找参数字符串在本字符串中首次出现的位置；\n```\n2. 字符串的截取办法\n```\nsubstring(int index):截取从参数位置一直到字符串末尾，返回新的字符串；\nsubstring(int begin,int end):截取从begin到end的字符串；\n备注：[begin,end)\n```\n3. string当中与转换相关的常用方法\n```\ntoCharArray():将字符串拆分成为字符数组作为返回值；\ngetBytes():获得当前字符串底层的字节数组；\nreplace(oldString,newString):将所有出现的老字符串，替换成新的字符串并返回\nsplit():按照分割参数的规则，将字符串分成若干部分；\n```\n4. static关键字\n```\n1. static关键字修饰的内容属于类，而不属于对象本身；\n2. 用static修饰的变量称为静态变量，修饰的方法称为静态方法；\n3. 静态变量和静态方法可以用类名调用，也可以用对象名调用，但推荐用类名调用，因为静态变量和静态方法属于类，而不是对象；\n4. 成员方法可以调用静态变量和静态方法；但静态不能调用非静态；\n5. 静态代码块：当第一次用到本类时，静态代码块执行唯一的一次；静态内容总是由于非静态，所以静态代码块比构造方法先执行；\n6. 在静态方法中不能使用this关键字；\n```\n5. Arrays相关常用方法\n```\n1. Arrays.toString:将数组变成字符串，并加上[];\n2. Arrays.sort:将数组进行排序，数字按升序，字符串按字母升序；\n```\n6. extends关键字\n```\n1. 在继承时，若父子变量名重名，则创建对象时，创建的类对象是谁就用谁，没有就向上找；\n2. 在java中只有单继承，没有多继承；\n3. 在java中可以多级继承；\n4. 无论是成员方法还是成员变量，如果没有都是向上找父类，绝对不会向下找父类；\n```\n7. 重写\n```\n1.方法的名称一样，参数列表也一样\n2.方法覆盖重写的注意事项：\n    1.必须保证父子类之间的方法名称相同，参数列表也相同；\n    2.子类的返回值必须小于或等于父类方法的返回值范围；\n    3.子类方法的权限必须大于等于父类方法的权限修饰符；\n    备注：public>protected>default>private \n```\n8. super关键字\n```\n1. 使用super关键字访问父类的成员变量；\n2. 使用super关键字调用父类中的方法(当父类和子类方法名重名时)；\n3. 调用父类构造方法；\n4. super的父类构造调用，必须是子类构造方法的第一个语句。不能一个子类构造调用多次super构造。\n总结：super关键字的三种用法：\n1. 在子类的成员方法中，访问父类的成员变量；\n2. 在子类的成员方法中，访问父类的成员方法；\n3. 在子类的构造方法中，访问父类的构造方法；\n```\n","slug":"Java笔记(第二天)","published":1,"updated":"2021-07-27T14:51:43.500Z","comments":1,"layout":"post","photos":[],"link":"","_id":"ckrmv4jgs000gzrfyaulu7p1p","content":"<ol>\n<li>String当中与获取有关的字符串<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">length:获取字符串长度；</span><br><span class=\"line\">concat:连接两个字符串；</span><br><span class=\"line\">charAt:获取指定索引位置的单个字符；</span><br><span class=\"line\">indexOf:查找参数字符串在本字符串中首次出现的位置；</span><br></pre></td></tr></table></figure></li>\n<li>字符串的截取办法<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">substring(int index):截取从参数位置一直到字符串末尾，返回新的字符串；</span><br><span class=\"line\">substring(int begin,int end):截取从begin到end的字符串；</span><br><span class=\"line\">备注：[begin,end)</span><br></pre></td></tr></table></figure></li>\n<li>string当中与转换相关的常用方法<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">toCharArray():将字符串拆分成为字符数组作为返回值；</span><br><span class=\"line\">getBytes():获得当前字符串底层的字节数组；</span><br><span class=\"line\">replace(oldString,newString):将所有出现的老字符串，替换成新的字符串并返回</span><br><span class=\"line\">split():按照分割参数的规则，将字符串分成若干部分；</span><br></pre></td></tr></table></figure></li>\n<li>static关键字<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">1. static关键字修饰的内容属于类，而不属于对象本身；</span><br><span class=\"line\">2. 用static修饰的变量称为静态变量，修饰的方法称为静态方法；</span><br><span class=\"line\">3. 静态变量和静态方法可以用类名调用，也可以用对象名调用，但推荐用类名调用，因为静态变量和静态方法属于类，而不是对象；</span><br><span class=\"line\">4. 成员方法可以调用静态变量和静态方法；但静态不能调用非静态；</span><br><span class=\"line\">5. 静态代码块：当第一次用到本类时，静态代码块执行唯一的一次；静态内容总是由于非静态，所以静态代码块比构造方法先执行；</span><br><span class=\"line\">6. 在静态方法中不能使用this关键字；</span><br></pre></td></tr></table></figure></li>\n<li>Arrays相关常用方法<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">1. Arrays.toString:将数组变成字符串，并加上[];</span><br><span class=\"line\">2. Arrays.sort:将数组进行排序，数字按升序，字符串按字母升序；</span><br></pre></td></tr></table></figure></li>\n<li>extends关键字<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">1. 在继承时，若父子变量名重名，则创建对象时，创建的类对象是谁就用谁，没有就向上找；</span><br><span class=\"line\">2. 在java中只有单继承，没有多继承；</span><br><span class=\"line\">3. 在java中可以多级继承；</span><br><span class=\"line\">4. 无论是成员方法还是成员变量，如果没有都是向上找父类，绝对不会向下找父类；</span><br></pre></td></tr></table></figure></li>\n<li>重写<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">1.方法的名称一样，参数列表也一样</span><br><span class=\"line\">2.方法覆盖重写的注意事项：</span><br><span class=\"line\">    1.必须保证父子类之间的方法名称相同，参数列表也相同；</span><br><span class=\"line\">    2.子类的返回值必须小于或等于父类方法的返回值范围；</span><br><span class=\"line\">    3.子类方法的权限必须大于等于父类方法的权限修饰符；</span><br><span class=\"line\">    备注：public&gt;protected&gt;default&gt;private </span><br></pre></td></tr></table></figure></li>\n<li>super关键字<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">1. 使用super关键字访问父类的成员变量；</span><br><span class=\"line\">2. 使用super关键字调用父类中的方法(当父类和子类方法名重名时)；</span><br><span class=\"line\">3. 调用父类构造方法；</span><br><span class=\"line\">4. super的父类构造调用，必须是子类构造方法的第一个语句。不能一个子类构造调用多次super构造。</span><br><span class=\"line\">总结：super关键字的三种用法：</span><br><span class=\"line\">1. 在子类的成员方法中，访问父类的成员变量；</span><br><span class=\"line\">2. 在子类的成员方法中，访问父类的成员方法；</span><br><span class=\"line\">3. 在子类的构造方法中，访问父类的构造方法；</span><br></pre></td></tr></table></figure>\n</li>\n</ol>\n","site":{"data":{}},"length":1213,"excerpt":"","more":"<ol>\n<li>String当中与获取有关的字符串<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">length:获取字符串长度；</span><br><span class=\"line\">concat:连接两个字符串；</span><br><span class=\"line\">charAt:获取指定索引位置的单个字符；</span><br><span class=\"line\">indexOf:查找参数字符串在本字符串中首次出现的位置；</span><br></pre></td></tr></table></figure></li>\n<li>字符串的截取办法<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">substring(int index):截取从参数位置一直到字符串末尾，返回新的字符串；</span><br><span class=\"line\">substring(int begin,int end):截取从begin到end的字符串；</span><br><span class=\"line\">备注：[begin,end)</span><br></pre></td></tr></table></figure></li>\n<li>string当中与转换相关的常用方法<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">toCharArray():将字符串拆分成为字符数组作为返回值；</span><br><span class=\"line\">getBytes():获得当前字符串底层的字节数组；</span><br><span class=\"line\">replace(oldString,newString):将所有出现的老字符串，替换成新的字符串并返回</span><br><span class=\"line\">split():按照分割参数的规则，将字符串分成若干部分；</span><br></pre></td></tr></table></figure></li>\n<li>static关键字<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">1. static关键字修饰的内容属于类，而不属于对象本身；</span><br><span class=\"line\">2. 用static修饰的变量称为静态变量，修饰的方法称为静态方法；</span><br><span class=\"line\">3. 静态变量和静态方法可以用类名调用，也可以用对象名调用，但推荐用类名调用，因为静态变量和静态方法属于类，而不是对象；</span><br><span class=\"line\">4. 成员方法可以调用静态变量和静态方法；但静态不能调用非静态；</span><br><span class=\"line\">5. 静态代码块：当第一次用到本类时，静态代码块执行唯一的一次；静态内容总是由于非静态，所以静态代码块比构造方法先执行；</span><br><span class=\"line\">6. 在静态方法中不能使用this关键字；</span><br></pre></td></tr></table></figure></li>\n<li>Arrays相关常用方法<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">1. Arrays.toString:将数组变成字符串，并加上[];</span><br><span class=\"line\">2. Arrays.sort:将数组进行排序，数字按升序，字符串按字母升序；</span><br></pre></td></tr></table></figure></li>\n<li>extends关键字<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">1. 在继承时，若父子变量名重名，则创建对象时，创建的类对象是谁就用谁，没有就向上找；</span><br><span class=\"line\">2. 在java中只有单继承，没有多继承；</span><br><span class=\"line\">3. 在java中可以多级继承；</span><br><span class=\"line\">4. 无论是成员方法还是成员变量，如果没有都是向上找父类，绝对不会向下找父类；</span><br></pre></td></tr></table></figure></li>\n<li>重写<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">1.方法的名称一样，参数列表也一样</span><br><span class=\"line\">2.方法覆盖重写的注意事项：</span><br><span class=\"line\">    1.必须保证父子类之间的方法名称相同，参数列表也相同；</span><br><span class=\"line\">    2.子类的返回值必须小于或等于父类方法的返回值范围；</span><br><span class=\"line\">    3.子类方法的权限必须大于等于父类方法的权限修饰符；</span><br><span class=\"line\">    备注：public&gt;protected&gt;default&gt;private </span><br></pre></td></tr></table></figure></li>\n<li>super关键字<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">1. 使用super关键字访问父类的成员变量；</span><br><span class=\"line\">2. 使用super关键字调用父类中的方法(当父类和子类方法名重名时)；</span><br><span class=\"line\">3. 调用父类构造方法；</span><br><span class=\"line\">4. super的父类构造调用，必须是子类构造方法的第一个语句。不能一个子类构造调用多次super构造。</span><br><span class=\"line\">总结：super关键字的三种用法：</span><br><span class=\"line\">1. 在子类的成员方法中，访问父类的成员变量；</span><br><span class=\"line\">2. 在子类的成员方法中，访问父类的成员方法；</span><br><span class=\"line\">3. 在子类的构造方法中，访问父类的构造方法；</span><br></pre></td></tr></table></figure>\n</li>\n</ol>\n"},{"title":"Linux环境下搭建LAMP","abbrlink":8665,"date":"2021-06-03T14:22:38.000Z","_content":"#### 安装Apache\n\n1. 安装Apache\n\n    ``` \n    yum install httpd -y\n    ```\n2. 启动服务\n\n   ```\n   service httpd restart\n   ```\n\n3. Apache服务开机启动\n\n    ```\n    chkconfig httpd on\n    ```\n\n4. Apache的配置文件\n\n    ```\n    /etc/httpd/conf/httpd.conf\n    ```\n\n5. 网站根目录\n\n    ```\n    /var/www/html/\n    ```\n\n\n#### 安装mysql\n\n1. 安装mysql\n\n   ```\n   wget http://repo.mysql.com/mysql-community-release-el7-5.noarch.rpm\n   rpm -ivh mysql-community-release-el7-5.noarch.rpm\n   yum install mysql-server\n   ```\n\n2. 启动mysql\n\n    ```\n    service mysqld restart\n    ```\n\n3. 首次登录mysql\n\n    ```\n    mysql \n    ```\n\n4. 设置密码\n\n    ```\n    show databases;\n    use mysql;\n    select user,password from user;\n    update user set password=password('root') where user='root';\n    ```\n\n5. mysql刷新权限命令\n\n   ```\n   flush privileges;\n   ```\n\n6. 再次登录mysql\n\n    ```\n    mysql -u root(用户名) -p\n    root（密码）\n    ```\n\n\n#### 安装php\n\n1. 安装php和连接php、mysql工具\n\n    ```\n    yum install php php-mysql\n    ```\n\n2. 启动Apache和mysql\n\n    ```\n    service httpd restart\n    service mysqld restart\n    ```\n\n3. 测试php和mysql是否连接成功\n\n    ```\n    $link = mysql_connect('localhost','root','root');\n    if($link){\n    echo \"successful\";\n    }else{\n    echo \"fail\";\n    }\n    ```\n\n\n\n#### 常见问题         \n\n1. 报错Cannot find a valid baseurl for repo： base/7/86-64\n\n    解决方案：\n    ```\n\tcd /etc/sysconfig/network-scriptsls\n\tvim ifcfg-ens33\n    ONBOOT=yes //修改,保存退出即可\n   ```","source":"_posts/Linux环境下搭建LAMP.md","raw":"---\ntitle: Linux环境下搭建LAMP\ntags:\n  - Linux\n  - LAMP\n  - 服务器\n  - php\ncategories: 后端\nabbrlink: 8665\ndate: 2021-06-03 22:22:38\n---\n#### 安装Apache\n\n1. 安装Apache\n\n    ``` \n    yum install httpd -y\n    ```\n2. 启动服务\n\n   ```\n   service httpd restart\n   ```\n\n3. Apache服务开机启动\n\n    ```\n    chkconfig httpd on\n    ```\n\n4. Apache的配置文件\n\n    ```\n    /etc/httpd/conf/httpd.conf\n    ```\n\n5. 网站根目录\n\n    ```\n    /var/www/html/\n    ```\n\n\n#### 安装mysql\n\n1. 安装mysql\n\n   ```\n   wget http://repo.mysql.com/mysql-community-release-el7-5.noarch.rpm\n   rpm -ivh mysql-community-release-el7-5.noarch.rpm\n   yum install mysql-server\n   ```\n\n2. 启动mysql\n\n    ```\n    service mysqld restart\n    ```\n\n3. 首次登录mysql\n\n    ```\n    mysql \n    ```\n\n4. 设置密码\n\n    ```\n    show databases;\n    use mysql;\n    select user,password from user;\n    update user set password=password('root') where user='root';\n    ```\n\n5. mysql刷新权限命令\n\n   ```\n   flush privileges;\n   ```\n\n6. 再次登录mysql\n\n    ```\n    mysql -u root(用户名) -p\n    root（密码）\n    ```\n\n\n#### 安装php\n\n1. 安装php和连接php、mysql工具\n\n    ```\n    yum install php php-mysql\n    ```\n\n2. 启动Apache和mysql\n\n    ```\n    service httpd restart\n    service mysqld restart\n    ```\n\n3. 测试php和mysql是否连接成功\n\n    ```\n    $link = mysql_connect('localhost','root','root');\n    if($link){\n    echo \"successful\";\n    }else{\n    echo \"fail\";\n    }\n    ```\n\n\n\n#### 常见问题         \n\n1. 报错Cannot find a valid baseurl for repo： base/7/86-64\n\n    解决方案：\n    ```\n\tcd /etc/sysconfig/network-scriptsls\n\tvim ifcfg-ens33\n    ONBOOT=yes //修改,保存退出即可\n   ```","slug":"Linux环境下搭建LAMP","published":1,"updated":"2021-07-27T14:51:43.501Z","comments":1,"layout":"post","photos":[],"link":"","_id":"ckrmv4jgv000izrfy0khl1v6w","content":"<h4 id=\"安装Apache\"><a href=\"#安装Apache\" class=\"headerlink\" title=\"安装Apache\"></a>安装Apache</h4><ol>\n<li><p>安装Apache</p>\n <figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">yum install httpd -y</span><br></pre></td></tr></table></figure></li>\n<li><p>启动服务</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">service httpd restart</span><br></pre></td></tr></table></figure>\n</li>\n<li><p>Apache服务开机启动</p>\n <figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">chkconfig httpd on</span><br></pre></td></tr></table></figure>\n</li>\n<li><p>Apache的配置文件</p>\n <figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">&#x2F;etc&#x2F;httpd&#x2F;conf&#x2F;httpd.conf</span><br></pre></td></tr></table></figure>\n</li>\n<li><p>网站根目录</p>\n <figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">&#x2F;var&#x2F;www&#x2F;html&#x2F;</span><br></pre></td></tr></table></figure>\n\n\n</li>\n</ol>\n<h4 id=\"安装mysql\"><a href=\"#安装mysql\" class=\"headerlink\" title=\"安装mysql\"></a>安装mysql</h4><ol>\n<li><p>安装mysql</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">wget http:&#x2F;&#x2F;repo.mysql.com&#x2F;mysql-community-release-el7-5.noarch.rpm</span><br><span class=\"line\">rpm -ivh mysql-community-release-el7-5.noarch.rpm</span><br><span class=\"line\">yum install mysql-server</span><br></pre></td></tr></table></figure>\n</li>\n<li><p>启动mysql</p>\n <figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">service mysqld restart</span><br></pre></td></tr></table></figure>\n</li>\n<li><p>首次登录mysql</p>\n <figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">mysql </span><br></pre></td></tr></table></figure>\n</li>\n<li><p>设置密码</p>\n <figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">show databases;</span><br><span class=\"line\">use mysql;</span><br><span class=\"line\">select user,password from user;</span><br><span class=\"line\">update user set password&#x3D;password(&#39;root&#39;) where user&#x3D;&#39;root&#39;;</span><br></pre></td></tr></table></figure>\n</li>\n<li><p>mysql刷新权限命令</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">flush privileges;</span><br></pre></td></tr></table></figure>\n</li>\n<li><p>再次登录mysql</p>\n <figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">mysql -u root(用户名) -p</span><br><span class=\"line\">root（密码）</span><br></pre></td></tr></table></figure>\n\n\n</li>\n</ol>\n<h4 id=\"安装php\"><a href=\"#安装php\" class=\"headerlink\" title=\"安装php\"></a>安装php</h4><ol>\n<li><p>安装php和连接php、mysql工具</p>\n <figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">yum install php php-mysql</span><br></pre></td></tr></table></figure>\n</li>\n<li><p>启动Apache和mysql</p>\n <figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">service httpd restart</span><br><span class=\"line\">service mysqld restart</span><br></pre></td></tr></table></figure>\n</li>\n<li><p>测试php和mysql是否连接成功</p>\n <figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">$link &#x3D; mysql_connect(&#39;localhost&#39;,&#39;root&#39;,&#39;root&#39;);</span><br><span class=\"line\">if($link)&#123;</span><br><span class=\"line\">echo &quot;successful&quot;;</span><br><span class=\"line\">&#125;else&#123;</span><br><span class=\"line\">echo &quot;fail&quot;;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n\n\n</li>\n</ol>\n<h4 id=\"常见问题\"><a href=\"#常见问题\" class=\"headerlink\" title=\"常见问题\"></a>常见问题</h4><ol>\n<li><p>报错Cannot find a valid baseurl for repo： base/7/86-64</p>\n<p> 解决方案：</p>\n <figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">cd &#x2F;etc&#x2F;sysconfig&#x2F;network-scriptsls</span><br><span class=\"line\">vim ifcfg-ens33</span><br><span class=\"line\">   ONBOOT&#x3D;yes &#x2F;&#x2F;修改,保存退出即可</span><br></pre></td></tr></table></figure></li>\n</ol>\n","site":{"data":{}},"length":1042,"excerpt":"","more":"<h4 id=\"安装Apache\"><a href=\"#安装Apache\" class=\"headerlink\" title=\"安装Apache\"></a>安装Apache</h4><ol>\n<li><p>安装Apache</p>\n <figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">yum install httpd -y</span><br></pre></td></tr></table></figure></li>\n<li><p>启动服务</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">service httpd restart</span><br></pre></td></tr></table></figure>\n</li>\n<li><p>Apache服务开机启动</p>\n <figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">chkconfig httpd on</span><br></pre></td></tr></table></figure>\n</li>\n<li><p>Apache的配置文件</p>\n <figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">&#x2F;etc&#x2F;httpd&#x2F;conf&#x2F;httpd.conf</span><br></pre></td></tr></table></figure>\n</li>\n<li><p>网站根目录</p>\n <figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">&#x2F;var&#x2F;www&#x2F;html&#x2F;</span><br></pre></td></tr></table></figure>\n\n\n</li>\n</ol>\n<h4 id=\"安装mysql\"><a href=\"#安装mysql\" class=\"headerlink\" title=\"安装mysql\"></a>安装mysql</h4><ol>\n<li><p>安装mysql</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">wget http:&#x2F;&#x2F;repo.mysql.com&#x2F;mysql-community-release-el7-5.noarch.rpm</span><br><span class=\"line\">rpm -ivh mysql-community-release-el7-5.noarch.rpm</span><br><span class=\"line\">yum install mysql-server</span><br></pre></td></tr></table></figure>\n</li>\n<li><p>启动mysql</p>\n <figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">service mysqld restart</span><br></pre></td></tr></table></figure>\n</li>\n<li><p>首次登录mysql</p>\n <figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">mysql </span><br></pre></td></tr></table></figure>\n</li>\n<li><p>设置密码</p>\n <figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">show databases;</span><br><span class=\"line\">use mysql;</span><br><span class=\"line\">select user,password from user;</span><br><span class=\"line\">update user set password&#x3D;password(&#39;root&#39;) where user&#x3D;&#39;root&#39;;</span><br></pre></td></tr></table></figure>\n</li>\n<li><p>mysql刷新权限命令</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">flush privileges;</span><br></pre></td></tr></table></figure>\n</li>\n<li><p>再次登录mysql</p>\n <figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">mysql -u root(用户名) -p</span><br><span class=\"line\">root（密码）</span><br></pre></td></tr></table></figure>\n\n\n</li>\n</ol>\n<h4 id=\"安装php\"><a href=\"#安装php\" class=\"headerlink\" title=\"安装php\"></a>安装php</h4><ol>\n<li><p>安装php和连接php、mysql工具</p>\n <figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">yum install php php-mysql</span><br></pre></td></tr></table></figure>\n</li>\n<li><p>启动Apache和mysql</p>\n <figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">service httpd restart</span><br><span class=\"line\">service mysqld restart</span><br></pre></td></tr></table></figure>\n</li>\n<li><p>测试php和mysql是否连接成功</p>\n <figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">$link &#x3D; mysql_connect(&#39;localhost&#39;,&#39;root&#39;,&#39;root&#39;);</span><br><span class=\"line\">if($link)&#123;</span><br><span class=\"line\">echo &quot;successful&quot;;</span><br><span class=\"line\">&#125;else&#123;</span><br><span class=\"line\">echo &quot;fail&quot;;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n\n\n</li>\n</ol>\n<h4 id=\"常见问题\"><a href=\"#常见问题\" class=\"headerlink\" title=\"常见问题\"></a>常见问题</h4><ol>\n<li><p>报错Cannot find a valid baseurl for repo： base/7/86-64</p>\n<p> 解决方案：</p>\n <figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">cd &#x2F;etc&#x2F;sysconfig&#x2F;network-scriptsls</span><br><span class=\"line\">vim ifcfg-ens33</span><br><span class=\"line\">   ONBOOT&#x3D;yes &#x2F;&#x2F;修改,保存退出即可</span><br></pre></td></tr></table></figure></li>\n</ol>\n"},{"title":"Pycharm基本使用","abbrlink":6348,"date":"2021-01-08T02:55:56.000Z","_content":"## Pycharm基本使用\n1. 双击shift键(或Ctrl+shift+A)，会弹出全局搜索窗口\n2. 快速格式化代码 Ctrl+shift+L\n3. 快速复制粘贴选中代码 Ctrl+D\n4. 移动一行代码 Ctrl+shift+上下箭头\n5. 光标定位到一行开头Fn+左箭头，定位到一行结尾Fn+右箭头\n","source":"_posts/Pycharm基本使用.md","raw":"---\ntitle: Pycharm基本使用\ntags:\n  - Python\ncategories: Python\nabbrlink: 6348\ndate: 2021-01-08 10:55:56\n---\n## Pycharm基本使用\n1. 双击shift键(或Ctrl+shift+A)，会弹出全局搜索窗口\n2. 快速格式化代码 Ctrl+shift+L\n3. 快速复制粘贴选中代码 Ctrl+D\n4. 移动一行代码 Ctrl+shift+上下箭头\n5. 光标定位到一行开头Fn+左箭头，定位到一行结尾Fn+右箭头\n","slug":"Pycharm基本使用","published":1,"updated":"2021-07-27T14:51:43.502Z","comments":1,"layout":"post","photos":[],"link":"","_id":"ckrmv4jgy000mzrfy6q1oeji2","content":"<h2 id=\"Pycharm基本使用\"><a href=\"#Pycharm基本使用\" class=\"headerlink\" title=\"Pycharm基本使用\"></a>Pycharm基本使用</h2><ol>\n<li>双击shift键(或Ctrl+shift+A)，会弹出全局搜索窗口</li>\n<li>快速格式化代码 Ctrl+shift+L</li>\n<li>快速复制粘贴选中代码 Ctrl+D</li>\n<li>移动一行代码 Ctrl+shift+上下箭头</li>\n<li>光标定位到一行开头Fn+左箭头，定位到一行结尾Fn+右箭头</li>\n</ol>\n","site":{"data":{}},"length":129,"excerpt":"","more":"<h2 id=\"Pycharm基本使用\"><a href=\"#Pycharm基本使用\" class=\"headerlink\" title=\"Pycharm基本使用\"></a>Pycharm基本使用</h2><ol>\n<li>双击shift键(或Ctrl+shift+A)，会弹出全局搜索窗口</li>\n<li>快速格式化代码 Ctrl+shift+L</li>\n<li>快速复制粘贴选中代码 Ctrl+D</li>\n<li>移动一行代码 Ctrl+shift+上下箭头</li>\n<li>光标定位到一行开头Fn+左箭头，定位到一行结尾Fn+右箭头</li>\n</ol>\n"},{"title":"Pyecharts遇到的坑","abbrlink":10521,"date":"2021-01-18T07:33:01.000Z","_content":"因为Pyecharts高版本不兼容低版本的问题，相同的语法在不同的版本就可能会出现一个能正常运行而一个出现报错的情况\n常见的有导包时就有可能出现错误\n```python\nfrom pyecharts.charts import Bar,Pie,Line # 1.x版本的语法\nfrom pyecharts import Bar,Pie,Line # 0.5.x版本的语法\n\n#若交换使用就会报错 \n```\n还有\n```python\nbar_1 = Bar(\"每天被领劵的数量\",width=1500,height=600)\n\n# 在0.5.x版本下就是正确的，在1.x版本下就是错误的\n```\n在用`pip`命令安装时默认安装的是高版本，下面是卸载`Pyecharts`的命令和安装低版本的命令\n```python\npip install pyecharts # 默认安装高版本\npip uninstall pyecharts # 卸载pycharts(无论任何版本)\npip install -i https://pypi.tuna.tsinghua.edu.cn/simple pyecharts==0.5.5 # 安装0.5.5\n```\n","source":"_posts/Pyecharts遇到的坑.md","raw":"---\ntitle: Pyecharts遇到的坑\ntags:\n  - 机器学习\ncategories: 机器学习\nabbrlink: 10521\ndate: 2021-01-18 15:33:01\n---\n因为Pyecharts高版本不兼容低版本的问题，相同的语法在不同的版本就可能会出现一个能正常运行而一个出现报错的情况\n常见的有导包时就有可能出现错误\n```python\nfrom pyecharts.charts import Bar,Pie,Line # 1.x版本的语法\nfrom pyecharts import Bar,Pie,Line # 0.5.x版本的语法\n\n#若交换使用就会报错 \n```\n还有\n```python\nbar_1 = Bar(\"每天被领劵的数量\",width=1500,height=600)\n\n# 在0.5.x版本下就是正确的，在1.x版本下就是错误的\n```\n在用`pip`命令安装时默认安装的是高版本，下面是卸载`Pyecharts`的命令和安装低版本的命令\n```python\npip install pyecharts # 默认安装高版本\npip uninstall pyecharts # 卸载pycharts(无论任何版本)\npip install -i https://pypi.tuna.tsinghua.edu.cn/simple pyecharts==0.5.5 # 安装0.5.5\n```\n","slug":"Pyecharts遇到的坑","published":1,"updated":"2021-07-27T14:51:43.503Z","comments":1,"layout":"post","photos":[],"link":"","_id":"ckrmv4jh0000pzrfybgao4o3e","content":"<p>因为Pyecharts高版本不兼容低版本的问题，相同的语法在不同的版本就可能会出现一个能正常运行而一个出现报错的情况<br>常见的有导包时就有可能出现错误</p>\n<figure class=\"highlight python\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">from</span> pyecharts.charts <span class=\"keyword\">import</span> Bar,Pie,Line <span class=\"comment\"># 1.x版本的语法</span></span><br><span class=\"line\"><span class=\"keyword\">from</span> pyecharts <span class=\"keyword\">import</span> Bar,Pie,Line <span class=\"comment\"># 0.5.x版本的语法</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">#若交换使用就会报错 </span></span><br></pre></td></tr></table></figure>\n<p>还有</p>\n<figure class=\"highlight python\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">bar_1 = Bar(<span class=\"string\">&quot;每天被领劵的数量&quot;</span>,width=<span class=\"number\">1500</span>,height=<span class=\"number\">600</span>)</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\"># 在0.5.x版本下就是正确的，在1.x版本下就是错误的</span></span><br></pre></td></tr></table></figure>\n<p>在用<code>pip</code>命令安装时默认安装的是高版本，下面是卸载<code>Pyecharts</code>的命令和安装低版本的命令</p>\n<figure class=\"highlight python\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">pip install pyecharts <span class=\"comment\"># 默认安装高版本</span></span><br><span class=\"line\">pip uninstall pyecharts <span class=\"comment\"># 卸载pycharts(无论任何版本)</span></span><br><span class=\"line\">pip install -i https://pypi.tuna.tsinghua.edu.cn/simple pyecharts==<span class=\"number\">0.5</span><span class=\"number\">.5</span> <span class=\"comment\"># 安装0.5.5</span></span><br></pre></td></tr></table></figure>\n","site":{"data":{}},"length":454,"excerpt":"","more":"<p>因为Pyecharts高版本不兼容低版本的问题，相同的语法在不同的版本就可能会出现一个能正常运行而一个出现报错的情况<br>常见的有导包时就有可能出现错误</p>\n<figure class=\"highlight python\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">from</span> pyecharts.charts <span class=\"keyword\">import</span> Bar,Pie,Line <span class=\"comment\"># 1.x版本的语法</span></span><br><span class=\"line\"><span class=\"keyword\">from</span> pyecharts <span class=\"keyword\">import</span> Bar,Pie,Line <span class=\"comment\"># 0.5.x版本的语法</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">#若交换使用就会报错 </span></span><br></pre></td></tr></table></figure>\n<p>还有</p>\n<figure class=\"highlight python\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">bar_1 = Bar(<span class=\"string\">&quot;每天被领劵的数量&quot;</span>,width=<span class=\"number\">1500</span>,height=<span class=\"number\">600</span>)</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\"># 在0.5.x版本下就是正确的，在1.x版本下就是错误的</span></span><br></pre></td></tr></table></figure>\n<p>在用<code>pip</code>命令安装时默认安装的是高版本，下面是卸载<code>Pyecharts</code>的命令和安装低版本的命令</p>\n<figure class=\"highlight python\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">pip install pyecharts <span class=\"comment\"># 默认安装高版本</span></span><br><span class=\"line\">pip uninstall pyecharts <span class=\"comment\"># 卸载pycharts(无论任何版本)</span></span><br><span class=\"line\">pip install -i https://pypi.tuna.tsinghua.edu.cn/simple pyecharts==<span class=\"number\">0.5</span><span class=\"number\">.5</span> <span class=\"comment\"># 安装0.5.5</span></span><br></pre></td></tr></table></figure>\n"},{"title":"Python2和Python3的区别(更新中)","abbrlink":63675,"date":"2021-01-10T02:54:19.000Z","_content":"1. 在Python2中，/得到的是一个整数;在Python3中得到是一个浮点数\n2. 在python2中0o和0开始的数字都是8进制;在Python3中只有0o表示8进制\n","source":"_posts/Python2和Python3的区别(更新中).md","raw":"---\ntitle: Python2和Python3的区别(更新中)\ntags:\n  - Python\ncategories: Python\nabbrlink: 63675\ndate: 2021-01-10 10:54:19\n---\n1. 在Python2中，/得到的是一个整数;在Python3中得到是一个浮点数\n2. 在python2中0o和0开始的数字都是8进制;在Python3中只有0o表示8进制\n","slug":"Python2和Python3的区别(更新中)","published":1,"updated":"2021-07-27T14:51:43.504Z","comments":1,"layout":"post","photos":[],"link":"","_id":"ckrmv4jh2000tzrfy6rtl8zfo","content":"<ol>\n<li>在Python2中，/得到的是一个整数;在Python3中得到是一个浮点数</li>\n<li>在python2中0o和0开始的数字都是8进制;在Python3中只有0o表示8进制</li>\n</ol>\n","site":{"data":{}},"length":79,"excerpt":"","more":"<ol>\n<li>在Python2中，/得到的是一个整数;在Python3中得到是一个浮点数</li>\n<li>在python2中0o和0开始的数字都是8进制;在Python3中只有0o表示8进制</li>\n</ol>\n"},{"title":"Python中函数的使用","abbrlink":51896,"date":"2021-01-11T15:30:09.000Z","_content":"1. 函数定义语法\n```Python\n# def 函数名(参数):\n#    函数要执行的语句\neg:\ndef say(person):\n    print('{}说：他明天去旅游'.format(person))\n```\n2. 传参\n```Python\n# 1.一一对应传参\nsay('xiaoming')\n# 2.通过变量名给形参赋值\nsay(person='xiaoming')\n```\n3. 返回值\n```Python\n1. return a #语法\n2. 通常情况下只能return一次\n3. 如果一个函数没有返回值，那么它的返回值就是None\n4. 在特殊情况下(finally语句)，一个函数可能会执行多个return语句\n```\n4. 函数的注释\n```Python\n在定义函数名的下一行按三对双引号，然后回车\n\"\"\"\n\n:param person:\n:return:\n\"\"\"\n```\n5. 全局变量和局部变量\n```Python\n1. 定义在函数外的为全局变量\n2. 定义在函数内的为局部变量\n3. 如果局部变量和全局变量重名时，会在函数内部又定义一个新的局部变量，而不是修改变全局变量\n4.如果在函数内部想要修改全局变量，则用global\neg：想要在函数内部修改全局变量name\nglobal name\nname='xiaoming'\n5.使用内置函数查看全局变量和局部变量\nglobals() # 查看当前.py中的全局变量\nlocals()  # 查看当前.py中的局部变量\n6. 在Python中只有函数分作用域\n```\n6. 函数多个返回值\n```Python\n1. 函数返回多个结果，就是将多个数据打包成一个整体返回，可以使用列表和字典\n2. 通常情况下使用元组\n3. 接受多个返回值时，若一直返回值个数，可直接用变量分别接受\neg:\ndef test():\n    return 1,2\nx,y=test()\nprint('x={},y={}'.format(x,y))\n```\n7. 缺省参数\n```Python\n定义：有些函数的参数是有默认参数，你传了用你的，不传用默认的\neg:\ndef say(person='xiaoming'):\n    print('{}说：他明天去旅游'.format(person))\n\nsay() # 当say函数不传参数时，就使用默认参数\n```\n8. 特殊传参\n```Python\n1. 当位置参数和关键字参数混合使用时，位置参数在前\neg:\nsay('xiaoming',age=18)  # 位置参数前，关键字参数后\n\n2. 位置可变参数\ndef say(name,*args):\n    pass\n\nsay('xiaoming')  # args为空\nsay('xiaoming',18)  # 18以元组的形式存在args里\n# 多出来的可变参数会以元组的形式保存在args里\n# 在定义函数参数时,先写位置参数再写可变位置参数，传参时也是\n# 注意是一个*\n\n3.可变关键字参数\ndef say(name,**kwargs):\n    pass\n\nsay(name='xiaoming')  # kwargs为空\nsay('xiaoming',18)  # 18以元组的形式存在kwargs里\n# 多出来的可变参数会以字典的形式保存在kwargs里\n# 在定义函数参数时,先写位置参数再写可变位置参数，传参时也是\n# 注意是**\n\n4.当位置参数，可变位置参数，缺省参数，关键字参数，可变关键字参数同时出现时\ndef say(位置参数，可变位置参数，缺省参数，关键字参数，可变关键字参数)  \n#传参时也是一样\n```\n9. 注意事项 \n```Python\n1. 在Python中函数不允许重名,重名后一个会覆盖前一个\n2. 函数名和变量名也不能重名\n```","source":"_posts/Python中函数的使用.md","raw":"---\ntitle: Python中函数的使用\ntags:\n  - Python\ncategories: Python\nabbrlink: 51896\ndate: 2021-01-11 23:30:09\n---\n1. 函数定义语法\n```Python\n# def 函数名(参数):\n#    函数要执行的语句\neg:\ndef say(person):\n    print('{}说：他明天去旅游'.format(person))\n```\n2. 传参\n```Python\n# 1.一一对应传参\nsay('xiaoming')\n# 2.通过变量名给形参赋值\nsay(person='xiaoming')\n```\n3. 返回值\n```Python\n1. return a #语法\n2. 通常情况下只能return一次\n3. 如果一个函数没有返回值，那么它的返回值就是None\n4. 在特殊情况下(finally语句)，一个函数可能会执行多个return语句\n```\n4. 函数的注释\n```Python\n在定义函数名的下一行按三对双引号，然后回车\n\"\"\"\n\n:param person:\n:return:\n\"\"\"\n```\n5. 全局变量和局部变量\n```Python\n1. 定义在函数外的为全局变量\n2. 定义在函数内的为局部变量\n3. 如果局部变量和全局变量重名时，会在函数内部又定义一个新的局部变量，而不是修改变全局变量\n4.如果在函数内部想要修改全局变量，则用global\neg：想要在函数内部修改全局变量name\nglobal name\nname='xiaoming'\n5.使用内置函数查看全局变量和局部变量\nglobals() # 查看当前.py中的全局变量\nlocals()  # 查看当前.py中的局部变量\n6. 在Python中只有函数分作用域\n```\n6. 函数多个返回值\n```Python\n1. 函数返回多个结果，就是将多个数据打包成一个整体返回，可以使用列表和字典\n2. 通常情况下使用元组\n3. 接受多个返回值时，若一直返回值个数，可直接用变量分别接受\neg:\ndef test():\n    return 1,2\nx,y=test()\nprint('x={},y={}'.format(x,y))\n```\n7. 缺省参数\n```Python\n定义：有些函数的参数是有默认参数，你传了用你的，不传用默认的\neg:\ndef say(person='xiaoming'):\n    print('{}说：他明天去旅游'.format(person))\n\nsay() # 当say函数不传参数时，就使用默认参数\n```\n8. 特殊传参\n```Python\n1. 当位置参数和关键字参数混合使用时，位置参数在前\neg:\nsay('xiaoming',age=18)  # 位置参数前，关键字参数后\n\n2. 位置可变参数\ndef say(name,*args):\n    pass\n\nsay('xiaoming')  # args为空\nsay('xiaoming',18)  # 18以元组的形式存在args里\n# 多出来的可变参数会以元组的形式保存在args里\n# 在定义函数参数时,先写位置参数再写可变位置参数，传参时也是\n# 注意是一个*\n\n3.可变关键字参数\ndef say(name,**kwargs):\n    pass\n\nsay(name='xiaoming')  # kwargs为空\nsay('xiaoming',18)  # 18以元组的形式存在kwargs里\n# 多出来的可变参数会以字典的形式保存在kwargs里\n# 在定义函数参数时,先写位置参数再写可变位置参数，传参时也是\n# 注意是**\n\n4.当位置参数，可变位置参数，缺省参数，关键字参数，可变关键字参数同时出现时\ndef say(位置参数，可变位置参数，缺省参数，关键字参数，可变关键字参数)  \n#传参时也是一样\n```\n9. 注意事项 \n```Python\n1. 在Python中函数不允许重名,重名后一个会覆盖前一个\n2. 函数名和变量名也不能重名\n```","slug":"Python中函数的使用","published":1,"updated":"2021-07-27T14:51:43.505Z","comments":1,"layout":"post","photos":[],"link":"","_id":"ckrmv4jh4000uzrfyencd55q5","content":"<ol>\n<li>函数定义语法<figure class=\"highlight python\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\"># def 函数名(参数):</span></span><br><span class=\"line\"><span class=\"comment\">#    函数要执行的语句</span></span><br><span class=\"line\">eg:</span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">def</span> <span class=\"title\">say</span>(<span class=\"params\">person</span>):</span></span><br><span class=\"line\">    print(<span class=\"string\">&#x27;&#123;&#125;说：他明天去旅游&#x27;</span>.<span class=\"built_in\">format</span>(person))</span><br></pre></td></tr></table></figure></li>\n<li>传参<figure class=\"highlight python\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\"># 1.一一对应传参</span></span><br><span class=\"line\">say(<span class=\"string\">&#x27;xiaoming&#x27;</span>)</span><br><span class=\"line\"><span class=\"comment\"># 2.通过变量名给形参赋值</span></span><br><span class=\"line\">say(person=<span class=\"string\">&#x27;xiaoming&#x27;</span>)</span><br></pre></td></tr></table></figure></li>\n<li>返回值<figure class=\"highlight python\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"number\">1.</span> <span class=\"keyword\">return</span> a <span class=\"comment\">#语法</span></span><br><span class=\"line\"><span class=\"number\">2.</span> 通常情况下只能<span class=\"keyword\">return</span>一次</span><br><span class=\"line\"><span class=\"number\">3.</span> 如果一个函数没有返回值，那么它的返回值就是<span class=\"literal\">None</span></span><br><span class=\"line\"><span class=\"number\">4.</span> 在特殊情况下(<span class=\"keyword\">finally</span>语句)，一个函数可能会执行多个<span class=\"keyword\">return</span>语句</span><br></pre></td></tr></table></figure></li>\n<li>函数的注释<figure class=\"highlight python\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">在定义函数名的下一行按三对双引号，然后回车</span><br><span class=\"line\"><span class=\"string\">&quot;&quot;&quot;</span></span><br><span class=\"line\"><span class=\"string\"></span></span><br><span class=\"line\"><span class=\"string\">:param person:</span></span><br><span class=\"line\"><span class=\"string\">:return:</span></span><br><span class=\"line\"><span class=\"string\">&quot;&quot;&quot;</span></span><br></pre></td></tr></table></figure></li>\n<li>全局变量和局部变量<figure class=\"highlight python\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"number\">1.</span> 定义在函数外的为全局变量</span><br><span class=\"line\"><span class=\"number\">2.</span> 定义在函数内的为局部变量</span><br><span class=\"line\"><span class=\"number\">3.</span> 如果局部变量和全局变量重名时，会在函数内部又定义一个新的局部变量，而不是修改变全局变量</span><br><span class=\"line\"><span class=\"number\">4.</span>如果在函数内部想要修改全局变量，则用<span class=\"keyword\">global</span></span><br><span class=\"line\">eg：想要在函数内部修改全局变量name</span><br><span class=\"line\"><span class=\"keyword\">global</span> name</span><br><span class=\"line\">name=<span class=\"string\">&#x27;xiaoming&#x27;</span></span><br><span class=\"line\"><span class=\"number\">5.</span>使用内置函数查看全局变量和局部变量</span><br><span class=\"line\"><span class=\"built_in\">globals</span>() <span class=\"comment\"># 查看当前.py中的全局变量</span></span><br><span class=\"line\"><span class=\"built_in\">locals</span>()  <span class=\"comment\"># 查看当前.py中的局部变量</span></span><br><span class=\"line\"><span class=\"number\">6.</span> 在Python中只有函数分作用域</span><br></pre></td></tr></table></figure></li>\n<li>函数多个返回值<figure class=\"highlight python\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"number\">1.</span> 函数返回多个结果，就是将多个数据打包成一个整体返回，可以使用列表和字典</span><br><span class=\"line\"><span class=\"number\">2.</span> 通常情况下使用元组</span><br><span class=\"line\"><span class=\"number\">3.</span> 接受多个返回值时，若一直返回值个数，可直接用变量分别接受</span><br><span class=\"line\">eg:</span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">def</span> <span class=\"title\">test</span>():</span></span><br><span class=\"line\">    <span class=\"keyword\">return</span> <span class=\"number\">1</span>,<span class=\"number\">2</span></span><br><span class=\"line\">x,y=test()</span><br><span class=\"line\">print(<span class=\"string\">&#x27;x=&#123;&#125;,y=&#123;&#125;&#x27;</span>.<span class=\"built_in\">format</span>(x,y))</span><br></pre></td></tr></table></figure></li>\n<li>缺省参数<figure class=\"highlight python\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">定义：有些函数的参数是有默认参数，你传了用你的，不传用默认的</span><br><span class=\"line\">eg:</span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">def</span> <span class=\"title\">say</span>(<span class=\"params\">person=<span class=\"string\">&#x27;xiaoming&#x27;</span></span>):</span></span><br><span class=\"line\">    print(<span class=\"string\">&#x27;&#123;&#125;说：他明天去旅游&#x27;</span>.<span class=\"built_in\">format</span>(person))</span><br><span class=\"line\"></span><br><span class=\"line\">say() <span class=\"comment\"># 当say函数不传参数时，就使用默认参数</span></span><br></pre></td></tr></table></figure></li>\n<li>特殊传参<figure class=\"highlight python\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"number\">1.</span> 当位置参数和关键字参数混合使用时，位置参数在前</span><br><span class=\"line\">eg:</span><br><span class=\"line\">say(<span class=\"string\">&#x27;xiaoming&#x27;</span>,age=<span class=\"number\">18</span>)  <span class=\"comment\"># 位置参数前，关键字参数后</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"number\">2.</span> 位置可变参数</span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">def</span> <span class=\"title\">say</span>(<span class=\"params\">name,*args</span>):</span></span><br><span class=\"line\">    <span class=\"keyword\">pass</span></span><br><span class=\"line\"></span><br><span class=\"line\">say(<span class=\"string\">&#x27;xiaoming&#x27;</span>)  <span class=\"comment\"># args为空</span></span><br><span class=\"line\">say(<span class=\"string\">&#x27;xiaoming&#x27;</span>,<span class=\"number\">18</span>)  <span class=\"comment\"># 18以元组的形式存在args里</span></span><br><span class=\"line\"><span class=\"comment\"># 多出来的可变参数会以元组的形式保存在args里</span></span><br><span class=\"line\"><span class=\"comment\"># 在定义函数参数时,先写位置参数再写可变位置参数，传参时也是</span></span><br><span class=\"line\"><span class=\"comment\"># 注意是一个*</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"number\">3.</span>可变关键字参数</span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">def</span> <span class=\"title\">say</span>(<span class=\"params\">name,**kwargs</span>):</span></span><br><span class=\"line\">    <span class=\"keyword\">pass</span></span><br><span class=\"line\"></span><br><span class=\"line\">say(name=<span class=\"string\">&#x27;xiaoming&#x27;</span>)  <span class=\"comment\"># kwargs为空</span></span><br><span class=\"line\">say(<span class=\"string\">&#x27;xiaoming&#x27;</span>,<span class=\"number\">18</span>)  <span class=\"comment\"># 18以元组的形式存在kwargs里</span></span><br><span class=\"line\"><span class=\"comment\"># 多出来的可变参数会以字典的形式保存在kwargs里</span></span><br><span class=\"line\"><span class=\"comment\"># 在定义函数参数时,先写位置参数再写可变位置参数，传参时也是</span></span><br><span class=\"line\"><span class=\"comment\"># 注意是**</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"number\">4.</span>当位置参数，可变位置参数，缺省参数，关键字参数，可变关键字参数同时出现时</span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">def</span> <span class=\"title\">say</span>(<span class=\"params\">位置参数，可变位置参数，缺省参数，关键字参数，可变关键字参数</span>)  </span></span><br><span class=\"line\"><span class=\"function\">#传参时也是一样</span></span><br></pre></td></tr></table></figure></li>\n<li>注意事项 <figure class=\"highlight python\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"number\">1.</span> 在Python中函数不允许重名,重名后一个会覆盖前一个</span><br><span class=\"line\"><span class=\"number\">2.</span> 函数名和变量名也不能重名</span><br></pre></td></tr></table></figure></li>\n</ol>\n","site":{"data":{}},"length":1586,"excerpt":"","more":"<ol>\n<li>函数定义语法<figure class=\"highlight python\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\"># def 函数名(参数):</span></span><br><span class=\"line\"><span class=\"comment\">#    函数要执行的语句</span></span><br><span class=\"line\">eg:</span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">def</span> <span class=\"title\">say</span>(<span class=\"params\">person</span>):</span></span><br><span class=\"line\">    print(<span class=\"string\">&#x27;&#123;&#125;说：他明天去旅游&#x27;</span>.<span class=\"built_in\">format</span>(person))</span><br></pre></td></tr></table></figure></li>\n<li>传参<figure class=\"highlight python\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\"># 1.一一对应传参</span></span><br><span class=\"line\">say(<span class=\"string\">&#x27;xiaoming&#x27;</span>)</span><br><span class=\"line\"><span class=\"comment\"># 2.通过变量名给形参赋值</span></span><br><span class=\"line\">say(person=<span class=\"string\">&#x27;xiaoming&#x27;</span>)</span><br></pre></td></tr></table></figure></li>\n<li>返回值<figure class=\"highlight python\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"number\">1.</span> <span class=\"keyword\">return</span> a <span class=\"comment\">#语法</span></span><br><span class=\"line\"><span class=\"number\">2.</span> 通常情况下只能<span class=\"keyword\">return</span>一次</span><br><span class=\"line\"><span class=\"number\">3.</span> 如果一个函数没有返回值，那么它的返回值就是<span class=\"literal\">None</span></span><br><span class=\"line\"><span class=\"number\">4.</span> 在特殊情况下(<span class=\"keyword\">finally</span>语句)，一个函数可能会执行多个<span class=\"keyword\">return</span>语句</span><br></pre></td></tr></table></figure></li>\n<li>函数的注释<figure class=\"highlight python\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">在定义函数名的下一行按三对双引号，然后回车</span><br><span class=\"line\"><span class=\"string\">&quot;&quot;&quot;</span></span><br><span class=\"line\"><span class=\"string\"></span></span><br><span class=\"line\"><span class=\"string\">:param person:</span></span><br><span class=\"line\"><span class=\"string\">:return:</span></span><br><span class=\"line\"><span class=\"string\">&quot;&quot;&quot;</span></span><br></pre></td></tr></table></figure></li>\n<li>全局变量和局部变量<figure class=\"highlight python\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"number\">1.</span> 定义在函数外的为全局变量</span><br><span class=\"line\"><span class=\"number\">2.</span> 定义在函数内的为局部变量</span><br><span class=\"line\"><span class=\"number\">3.</span> 如果局部变量和全局变量重名时，会在函数内部又定义一个新的局部变量，而不是修改变全局变量</span><br><span class=\"line\"><span class=\"number\">4.</span>如果在函数内部想要修改全局变量，则用<span class=\"keyword\">global</span></span><br><span class=\"line\">eg：想要在函数内部修改全局变量name</span><br><span class=\"line\"><span class=\"keyword\">global</span> name</span><br><span class=\"line\">name=<span class=\"string\">&#x27;xiaoming&#x27;</span></span><br><span class=\"line\"><span class=\"number\">5.</span>使用内置函数查看全局变量和局部变量</span><br><span class=\"line\"><span class=\"built_in\">globals</span>() <span class=\"comment\"># 查看当前.py中的全局变量</span></span><br><span class=\"line\"><span class=\"built_in\">locals</span>()  <span class=\"comment\"># 查看当前.py中的局部变量</span></span><br><span class=\"line\"><span class=\"number\">6.</span> 在Python中只有函数分作用域</span><br></pre></td></tr></table></figure></li>\n<li>函数多个返回值<figure class=\"highlight python\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"number\">1.</span> 函数返回多个结果，就是将多个数据打包成一个整体返回，可以使用列表和字典</span><br><span class=\"line\"><span class=\"number\">2.</span> 通常情况下使用元组</span><br><span class=\"line\"><span class=\"number\">3.</span> 接受多个返回值时，若一直返回值个数，可直接用变量分别接受</span><br><span class=\"line\">eg:</span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">def</span> <span class=\"title\">test</span>():</span></span><br><span class=\"line\">    <span class=\"keyword\">return</span> <span class=\"number\">1</span>,<span class=\"number\">2</span></span><br><span class=\"line\">x,y=test()</span><br><span class=\"line\">print(<span class=\"string\">&#x27;x=&#123;&#125;,y=&#123;&#125;&#x27;</span>.<span class=\"built_in\">format</span>(x,y))</span><br></pre></td></tr></table></figure></li>\n<li>缺省参数<figure class=\"highlight python\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">定义：有些函数的参数是有默认参数，你传了用你的，不传用默认的</span><br><span class=\"line\">eg:</span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">def</span> <span class=\"title\">say</span>(<span class=\"params\">person=<span class=\"string\">&#x27;xiaoming&#x27;</span></span>):</span></span><br><span class=\"line\">    print(<span class=\"string\">&#x27;&#123;&#125;说：他明天去旅游&#x27;</span>.<span class=\"built_in\">format</span>(person))</span><br><span class=\"line\"></span><br><span class=\"line\">say() <span class=\"comment\"># 当say函数不传参数时，就使用默认参数</span></span><br></pre></td></tr></table></figure></li>\n<li>特殊传参<figure class=\"highlight python\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"number\">1.</span> 当位置参数和关键字参数混合使用时，位置参数在前</span><br><span class=\"line\">eg:</span><br><span class=\"line\">say(<span class=\"string\">&#x27;xiaoming&#x27;</span>,age=<span class=\"number\">18</span>)  <span class=\"comment\"># 位置参数前，关键字参数后</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"number\">2.</span> 位置可变参数</span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">def</span> <span class=\"title\">say</span>(<span class=\"params\">name,*args</span>):</span></span><br><span class=\"line\">    <span class=\"keyword\">pass</span></span><br><span class=\"line\"></span><br><span class=\"line\">say(<span class=\"string\">&#x27;xiaoming&#x27;</span>)  <span class=\"comment\"># args为空</span></span><br><span class=\"line\">say(<span class=\"string\">&#x27;xiaoming&#x27;</span>,<span class=\"number\">18</span>)  <span class=\"comment\"># 18以元组的形式存在args里</span></span><br><span class=\"line\"><span class=\"comment\"># 多出来的可变参数会以元组的形式保存在args里</span></span><br><span class=\"line\"><span class=\"comment\"># 在定义函数参数时,先写位置参数再写可变位置参数，传参时也是</span></span><br><span class=\"line\"><span class=\"comment\"># 注意是一个*</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"number\">3.</span>可变关键字参数</span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">def</span> <span class=\"title\">say</span>(<span class=\"params\">name,**kwargs</span>):</span></span><br><span class=\"line\">    <span class=\"keyword\">pass</span></span><br><span class=\"line\"></span><br><span class=\"line\">say(name=<span class=\"string\">&#x27;xiaoming&#x27;</span>)  <span class=\"comment\"># kwargs为空</span></span><br><span class=\"line\">say(<span class=\"string\">&#x27;xiaoming&#x27;</span>,<span class=\"number\">18</span>)  <span class=\"comment\"># 18以元组的形式存在kwargs里</span></span><br><span class=\"line\"><span class=\"comment\"># 多出来的可变参数会以字典的形式保存在kwargs里</span></span><br><span class=\"line\"><span class=\"comment\"># 在定义函数参数时,先写位置参数再写可变位置参数，传参时也是</span></span><br><span class=\"line\"><span class=\"comment\"># 注意是**</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"number\">4.</span>当位置参数，可变位置参数，缺省参数，关键字参数，可变关键字参数同时出现时</span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">def</span> <span class=\"title\">say</span>(<span class=\"params\">位置参数，可变位置参数，缺省参数，关键字参数，可变关键字参数</span>)  </span></span><br><span class=\"line\"><span class=\"function\">#传参时也是一样</span></span><br></pre></td></tr></table></figure></li>\n<li>注意事项 <figure class=\"highlight python\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"number\">1.</span> 在Python中函数不允许重名,重名后一个会覆盖前一个</span><br><span class=\"line\"><span class=\"number\">2.</span> 函数名和变量名也不能重名</span><br></pre></td></tr></table></figure></li>\n</ol>\n"},{"title":"Python中浅拷贝和深拷贝","abbrlink":17594,"date":"2021-01-12T06:29:29.000Z","_content":"#### 浅拷贝\n浅拷贝只拷贝一层,当列表中有嵌套时,嵌套的列表是指向而不是拷贝\n```Python\nx=[1,2,[3,4],5]\ny=x.copy()\nprint('列表x的值为:',x)  #列表x的值为: [1, 2, [3, 4], 5]\nprint('列表y的值为:',y)  #列表y的值为: [1, 2, [3, 4], 5]\nx[2][0]=100\nprint('列表x修改后,列表x的值为:',x)   #列表x修改后,列表x的值为: [1, 2, [100, 4], 5]\nprint('列表x修改后,列表y的值为:',y)   #列表x修改后,列表y的值为: [1, 2, [100, 4], 5]\n#当修改列表x第一层时因为数据是拷贝过去的,所以对y无影响;\n#当修改列表x第二层时因为数据是指向，当修改列表x时,y也跟着修改\n\n# 浅拷贝方法\n1. 用copy函数\n2. 引用copy模块,用copy模块里的copy函数\n```\n![](https://gitee.com/light_trap/for-picgo/raw/master/image/20210112145922.png)\n#### 深拷贝\n深拷贝是对列表所有数据都拷贝,新列表和原列表没有一点关系\n```Python\nimport copy\nx=[1,2,[3,4],5]\ny=copy.deepcopy(x)\nprint('列表x的值为:',x)  #列表x的值为: [1, 2, [3, 4], 5]\nprint('列表y的值为:',y)  #列表y的值为: [1, 2, [3, 4], 5]\nx[2][0]=100\nprint('列表x修改后,列表x的值为:',x)   #列表x修改后,列表x的值为: [1, 2, [100, 4], 5]\nprint('列表x修改后,列表y的值为:',y)   #列表x修改后,列表y的值为: [1, 2, [3, 4], 5]\n# 深拷贝只能用copy模块里的deepcopy函数进行拷贝\n```\n","source":"_posts/Python中浅拷贝和深拷贝.md","raw":"---\ntitle: Python中浅拷贝和深拷贝\ntags:\n  - Python\ncategories: Python\nabbrlink: 17594\ndate: 2021-01-12 14:29:29\n---\n#### 浅拷贝\n浅拷贝只拷贝一层,当列表中有嵌套时,嵌套的列表是指向而不是拷贝\n```Python\nx=[1,2,[3,4],5]\ny=x.copy()\nprint('列表x的值为:',x)  #列表x的值为: [1, 2, [3, 4], 5]\nprint('列表y的值为:',y)  #列表y的值为: [1, 2, [3, 4], 5]\nx[2][0]=100\nprint('列表x修改后,列表x的值为:',x)   #列表x修改后,列表x的值为: [1, 2, [100, 4], 5]\nprint('列表x修改后,列表y的值为:',y)   #列表x修改后,列表y的值为: [1, 2, [100, 4], 5]\n#当修改列表x第一层时因为数据是拷贝过去的,所以对y无影响;\n#当修改列表x第二层时因为数据是指向，当修改列表x时,y也跟着修改\n\n# 浅拷贝方法\n1. 用copy函数\n2. 引用copy模块,用copy模块里的copy函数\n```\n![](https://gitee.com/light_trap/for-picgo/raw/master/image/20210112145922.png)\n#### 深拷贝\n深拷贝是对列表所有数据都拷贝,新列表和原列表没有一点关系\n```Python\nimport copy\nx=[1,2,[3,4],5]\ny=copy.deepcopy(x)\nprint('列表x的值为:',x)  #列表x的值为: [1, 2, [3, 4], 5]\nprint('列表y的值为:',y)  #列表y的值为: [1, 2, [3, 4], 5]\nx[2][0]=100\nprint('列表x修改后,列表x的值为:',x)   #列表x修改后,列表x的值为: [1, 2, [100, 4], 5]\nprint('列表x修改后,列表y的值为:',y)   #列表x修改后,列表y的值为: [1, 2, [3, 4], 5]\n# 深拷贝只能用copy模块里的deepcopy函数进行拷贝\n```\n","slug":"Python中浅拷贝和深拷贝","published":1,"updated":"2021-07-27T14:51:43.507Z","comments":1,"layout":"post","photos":[],"link":"","_id":"ckrmv4jh6000yzrfybjzod1j3","content":"<h4 id=\"浅拷贝\"><a href=\"#浅拷贝\" class=\"headerlink\" title=\"浅拷贝\"></a>浅拷贝</h4><p>浅拷贝只拷贝一层,当列表中有嵌套时,嵌套的列表是指向而不是拷贝</p>\n<figure class=\"highlight python\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">x=[<span class=\"number\">1</span>,<span class=\"number\">2</span>,[<span class=\"number\">3</span>,<span class=\"number\">4</span>],<span class=\"number\">5</span>]</span><br><span class=\"line\">y=x.copy()</span><br><span class=\"line\">print(<span class=\"string\">&#x27;列表x的值为:&#x27;</span>,x)  <span class=\"comment\">#列表x的值为: [1, 2, [3, 4], 5]</span></span><br><span class=\"line\">print(<span class=\"string\">&#x27;列表y的值为:&#x27;</span>,y)  <span class=\"comment\">#列表y的值为: [1, 2, [3, 4], 5]</span></span><br><span class=\"line\">x[<span class=\"number\">2</span>][<span class=\"number\">0</span>]=<span class=\"number\">100</span></span><br><span class=\"line\">print(<span class=\"string\">&#x27;列表x修改后,列表x的值为:&#x27;</span>,x)   <span class=\"comment\">#列表x修改后,列表x的值为: [1, 2, [100, 4], 5]</span></span><br><span class=\"line\">print(<span class=\"string\">&#x27;列表x修改后,列表y的值为:&#x27;</span>,y)   <span class=\"comment\">#列表x修改后,列表y的值为: [1, 2, [100, 4], 5]</span></span><br><span class=\"line\"><span class=\"comment\">#当修改列表x第一层时因为数据是拷贝过去的,所以对y无影响;</span></span><br><span class=\"line\"><span class=\"comment\">#当修改列表x第二层时因为数据是指向，当修改列表x时,y也跟着修改</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\"># 浅拷贝方法</span></span><br><span class=\"line\"><span class=\"number\">1.</span> 用copy函数</span><br><span class=\"line\"><span class=\"number\">2.</span> 引用copy模块,用copy模块里的copy函数</span><br></pre></td></tr></table></figure>\n<p><img src=\"https://gitee.com/light_trap/for-picgo/raw/master/image/20210112145922.png\"></p>\n<h4 id=\"深拷贝\"><a href=\"#深拷贝\" class=\"headerlink\" title=\"深拷贝\"></a>深拷贝</h4><p>深拷贝是对列表所有数据都拷贝,新列表和原列表没有一点关系</p>\n<figure class=\"highlight python\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">import</span> copy</span><br><span class=\"line\">x=[<span class=\"number\">1</span>,<span class=\"number\">2</span>,[<span class=\"number\">3</span>,<span class=\"number\">4</span>],<span class=\"number\">5</span>]</span><br><span class=\"line\">y=copy.deepcopy(x)</span><br><span class=\"line\">print(<span class=\"string\">&#x27;列表x的值为:&#x27;</span>,x)  <span class=\"comment\">#列表x的值为: [1, 2, [3, 4], 5]</span></span><br><span class=\"line\">print(<span class=\"string\">&#x27;列表y的值为:&#x27;</span>,y)  <span class=\"comment\">#列表y的值为: [1, 2, [3, 4], 5]</span></span><br><span class=\"line\">x[<span class=\"number\">2</span>][<span class=\"number\">0</span>]=<span class=\"number\">100</span></span><br><span class=\"line\">print(<span class=\"string\">&#x27;列表x修改后,列表x的值为:&#x27;</span>,x)   <span class=\"comment\">#列表x修改后,列表x的值为: [1, 2, [100, 4], 5]</span></span><br><span class=\"line\">print(<span class=\"string\">&#x27;列表x修改后,列表y的值为:&#x27;</span>,y)   <span class=\"comment\">#列表x修改后,列表y的值为: [1, 2, [3, 4], 5]</span></span><br><span class=\"line\"><span class=\"comment\"># 深拷贝只能用copy模块里的deepcopy函数进行拷贝</span></span><br></pre></td></tr></table></figure>\n","site":{"data":{}},"length":768,"excerpt":"","more":"<h4 id=\"浅拷贝\"><a href=\"#浅拷贝\" class=\"headerlink\" title=\"浅拷贝\"></a>浅拷贝</h4><p>浅拷贝只拷贝一层,当列表中有嵌套时,嵌套的列表是指向而不是拷贝</p>\n<figure class=\"highlight python\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">x=[<span class=\"number\">1</span>,<span class=\"number\">2</span>,[<span class=\"number\">3</span>,<span class=\"number\">4</span>],<span class=\"number\">5</span>]</span><br><span class=\"line\">y=x.copy()</span><br><span class=\"line\">print(<span class=\"string\">&#x27;列表x的值为:&#x27;</span>,x)  <span class=\"comment\">#列表x的值为: [1, 2, [3, 4], 5]</span></span><br><span class=\"line\">print(<span class=\"string\">&#x27;列表y的值为:&#x27;</span>,y)  <span class=\"comment\">#列表y的值为: [1, 2, [3, 4], 5]</span></span><br><span class=\"line\">x[<span class=\"number\">2</span>][<span class=\"number\">0</span>]=<span class=\"number\">100</span></span><br><span class=\"line\">print(<span class=\"string\">&#x27;列表x修改后,列表x的值为:&#x27;</span>,x)   <span class=\"comment\">#列表x修改后,列表x的值为: [1, 2, [100, 4], 5]</span></span><br><span class=\"line\">print(<span class=\"string\">&#x27;列表x修改后,列表y的值为:&#x27;</span>,y)   <span class=\"comment\">#列表x修改后,列表y的值为: [1, 2, [100, 4], 5]</span></span><br><span class=\"line\"><span class=\"comment\">#当修改列表x第一层时因为数据是拷贝过去的,所以对y无影响;</span></span><br><span class=\"line\"><span class=\"comment\">#当修改列表x第二层时因为数据是指向，当修改列表x时,y也跟着修改</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\"># 浅拷贝方法</span></span><br><span class=\"line\"><span class=\"number\">1.</span> 用copy函数</span><br><span class=\"line\"><span class=\"number\">2.</span> 引用copy模块,用copy模块里的copy函数</span><br></pre></td></tr></table></figure>\n<p><img src=\"https://gitee.com/light_trap/for-picgo/raw/master/image/20210112145922.png\"></p>\n<h4 id=\"深拷贝\"><a href=\"#深拷贝\" class=\"headerlink\" title=\"深拷贝\"></a>深拷贝</h4><p>深拷贝是对列表所有数据都拷贝,新列表和原列表没有一点关系</p>\n<figure class=\"highlight python\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">import</span> copy</span><br><span class=\"line\">x=[<span class=\"number\">1</span>,<span class=\"number\">2</span>,[<span class=\"number\">3</span>,<span class=\"number\">4</span>],<span class=\"number\">5</span>]</span><br><span class=\"line\">y=copy.deepcopy(x)</span><br><span class=\"line\">print(<span class=\"string\">&#x27;列表x的值为:&#x27;</span>,x)  <span class=\"comment\">#列表x的值为: [1, 2, [3, 4], 5]</span></span><br><span class=\"line\">print(<span class=\"string\">&#x27;列表y的值为:&#x27;</span>,y)  <span class=\"comment\">#列表y的值为: [1, 2, [3, 4], 5]</span></span><br><span class=\"line\">x[<span class=\"number\">2</span>][<span class=\"number\">0</span>]=<span class=\"number\">100</span></span><br><span class=\"line\">print(<span class=\"string\">&#x27;列表x修改后,列表x的值为:&#x27;</span>,x)   <span class=\"comment\">#列表x修改后,列表x的值为: [1, 2, [100, 4], 5]</span></span><br><span class=\"line\">print(<span class=\"string\">&#x27;列表x修改后,列表y的值为:&#x27;</span>,y)   <span class=\"comment\">#列表x修改后,列表y的值为: [1, 2, [3, 4], 5]</span></span><br><span class=\"line\"><span class=\"comment\"># 深拷贝只能用copy模块里的deepcopy函数进行拷贝</span></span><br></pre></td></tr></table></figure>\n"},{"title":"Python中进制和数据类型转换","abbrlink":57141,"date":"2021-01-09T14:02:28.000Z","_content":"\n1. ### 二、八、十六进制转换\n```python\n  二进制:前缀,0b;0b11;每个位最大不能超过1\n  八进制:前缀,0o;0o17;每个位最大不能超过7\n十六进制:前缀,0x;0x1f;每个位最大不能超过f\n# 注：在python2中0o和0开始的数字都是8进制\n\n# 手算转换\n2进制转换为8：从后向前3位一组进行\n2进制转换为16：从后向前4位一组进行\n2,8,16进制转换成十进制，都是按照幂次，然后相加进行计算\n10进制转换成2进制：除留余数法\n\n# 机算\na=12 #10进制数\nbin(a) # 将10进制数转换成2进制\noct(a) # 将10进制数转换成8进制\nhex(a) # 将10进制数转换成16进制\n注：当a不等于数字时会报错\n```\n4. 数据类型之间的转换\n```python\n#转换函数\nmsg=int(msg) \n# 将不是int型的变量转换成int型的变量\n# 其余类型写法相同，如float\n# 当被转换的msg不是纯数字会转换失败，报错 \nmsg=int(x,y)\n# 将字符串x,按照y进制转换成10进制数\neg:\nmsg=int('abc',16) # 将字符串'abc'按照16进制数转换成10进制数\n\n# 转换原因\n不同的数据类型有时候不能进行运算\n\n# True False\n在进行数据运算时,True=1,False=0;\neg:\nprint(True + 1)  # 结果为2\n```\n5. 转换成布尔值\n```python\n# 在数字里，只有0会被转换成False\n# 在字符串里只有空字符串会被转换成False,空格串也会被转换成True\n# None会被转换为False,eg:bool(None),打印出来是False\n# 空数据类型会被转换成False,如[],(),{}等\n```\n","source":"_posts/Python中进制和数据类型转换.md","raw":"---\ntitle: Python中进制和数据类型转换\ntags:\n  - Python\ncategories: Python\nabbrlink: 57141\ndate: 2021-01-09 22:02:28\n---\n\n1. ### 二、八、十六进制转换\n```python\n  二进制:前缀,0b;0b11;每个位最大不能超过1\n  八进制:前缀,0o;0o17;每个位最大不能超过7\n十六进制:前缀,0x;0x1f;每个位最大不能超过f\n# 注：在python2中0o和0开始的数字都是8进制\n\n# 手算转换\n2进制转换为8：从后向前3位一组进行\n2进制转换为16：从后向前4位一组进行\n2,8,16进制转换成十进制，都是按照幂次，然后相加进行计算\n10进制转换成2进制：除留余数法\n\n# 机算\na=12 #10进制数\nbin(a) # 将10进制数转换成2进制\noct(a) # 将10进制数转换成8进制\nhex(a) # 将10进制数转换成16进制\n注：当a不等于数字时会报错\n```\n4. 数据类型之间的转换\n```python\n#转换函数\nmsg=int(msg) \n# 将不是int型的变量转换成int型的变量\n# 其余类型写法相同，如float\n# 当被转换的msg不是纯数字会转换失败，报错 \nmsg=int(x,y)\n# 将字符串x,按照y进制转换成10进制数\neg:\nmsg=int('abc',16) # 将字符串'abc'按照16进制数转换成10进制数\n\n# 转换原因\n不同的数据类型有时候不能进行运算\n\n# True False\n在进行数据运算时,True=1,False=0;\neg:\nprint(True + 1)  # 结果为2\n```\n5. 转换成布尔值\n```python\n# 在数字里，只有0会被转换成False\n# 在字符串里只有空字符串会被转换成False,空格串也会被转换成True\n# None会被转换为False,eg:bool(None),打印出来是False\n# 空数据类型会被转换成False,如[],(),{}等\n```\n","slug":"Python中进制和数据类型转换","published":1,"updated":"2021-07-27T14:51:43.508Z","comments":1,"layout":"post","photos":[],"link":"","_id":"ckrmv4jh70010zrfy37vngxuo","content":"<ol>\n<li><h3 id=\"二、八、十六进制转换\"><a href=\"#二、八、十六进制转换\" class=\"headerlink\" title=\"二、八、十六进制转换\"></a>二、八、十六进制转换</h3><figure class=\"highlight python\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">  二进制:前缀,0b;<span class=\"number\">0b11</span>;每个位最大不能超过<span class=\"number\">1</span></span><br><span class=\"line\">  八进制:前缀,0o;<span class=\"number\">0o17</span>;每个位最大不能超过<span class=\"number\">7</span></span><br><span class=\"line\">十六进制:前缀,0x;<span class=\"number\">0x1f</span>;每个位最大不能超过f</span><br><span class=\"line\"><span class=\"comment\"># 注：在python2中0o和0开始的数字都是8进制</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\"># 手算转换</span></span><br><span class=\"line\"><span class=\"number\">2</span>进制转换为<span class=\"number\">8</span>：从后向前<span class=\"number\">3</span>位一组进行</span><br><span class=\"line\"><span class=\"number\">2</span>进制转换为<span class=\"number\">16</span>：从后向前<span class=\"number\">4</span>位一组进行</span><br><span class=\"line\"><span class=\"number\">2</span>,<span class=\"number\">8</span>,<span class=\"number\">16</span>进制转换成十进制，都是按照幂次，然后相加进行计算</span><br><span class=\"line\"><span class=\"number\">10</span>进制转换成<span class=\"number\">2</span>进制：除留余数法</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\"># 机算</span></span><br><span class=\"line\">a=<span class=\"number\">12</span> <span class=\"comment\">#10进制数</span></span><br><span class=\"line\"><span class=\"built_in\">bin</span>(a) <span class=\"comment\"># 将10进制数转换成2进制</span></span><br><span class=\"line\"><span class=\"built_in\">oct</span>(a) <span class=\"comment\"># 将10进制数转换成8进制</span></span><br><span class=\"line\"><span class=\"built_in\">hex</span>(a) <span class=\"comment\"># 将10进制数转换成16进制</span></span><br><span class=\"line\">注：当a不等于数字时会报错</span><br></pre></td></tr></table></figure></li>\n<li>数据类型之间的转换<figure class=\"highlight python\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">#转换函数</span></span><br><span class=\"line\">msg=<span class=\"built_in\">int</span>(msg) </span><br><span class=\"line\"><span class=\"comment\"># 将不是int型的变量转换成int型的变量</span></span><br><span class=\"line\"><span class=\"comment\"># 其余类型写法相同，如float</span></span><br><span class=\"line\"><span class=\"comment\"># 当被转换的msg不是纯数字会转换失败，报错 </span></span><br><span class=\"line\">msg=<span class=\"built_in\">int</span>(x,y)</span><br><span class=\"line\"><span class=\"comment\"># 将字符串x,按照y进制转换成10进制数</span></span><br><span class=\"line\">eg:</span><br><span class=\"line\">msg=<span class=\"built_in\">int</span>(<span class=\"string\">&#x27;abc&#x27;</span>,<span class=\"number\">16</span>) <span class=\"comment\"># 将字符串&#x27;abc&#x27;按照16进制数转换成10进制数</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\"># 转换原因</span></span><br><span class=\"line\">不同的数据类型有时候不能进行运算</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\"># True False</span></span><br><span class=\"line\">在进行数据运算时,<span class=\"literal\">True</span>=<span class=\"number\">1</span>,<span class=\"literal\">False</span>=<span class=\"number\">0</span>;</span><br><span class=\"line\">eg:</span><br><span class=\"line\">print(<span class=\"literal\">True</span> + <span class=\"number\">1</span>)  <span class=\"comment\"># 结果为2</span></span><br></pre></td></tr></table></figure></li>\n<li>转换成布尔值<figure class=\"highlight python\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\"># 在数字里，只有0会被转换成False</span></span><br><span class=\"line\"><span class=\"comment\"># 在字符串里只有空字符串会被转换成False,空格串也会被转换成True</span></span><br><span class=\"line\"><span class=\"comment\"># None会被转换为False,eg:bool(None),打印出来是False</span></span><br><span class=\"line\"><span class=\"comment\"># 空数据类型会被转换成False,如[],(),&#123;&#125;等</span></span><br></pre></td></tr></table></figure>\n</li>\n</ol>\n","site":{"data":{}},"length":734,"excerpt":"","more":"<ol>\n<li><h3 id=\"二、八、十六进制转换\"><a href=\"#二、八、十六进制转换\" class=\"headerlink\" title=\"二、八、十六进制转换\"></a>二、八、十六进制转换</h3><figure class=\"highlight python\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">  二进制:前缀,0b;<span class=\"number\">0b11</span>;每个位最大不能超过<span class=\"number\">1</span></span><br><span class=\"line\">  八进制:前缀,0o;<span class=\"number\">0o17</span>;每个位最大不能超过<span class=\"number\">7</span></span><br><span class=\"line\">十六进制:前缀,0x;<span class=\"number\">0x1f</span>;每个位最大不能超过f</span><br><span class=\"line\"><span class=\"comment\"># 注：在python2中0o和0开始的数字都是8进制</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\"># 手算转换</span></span><br><span class=\"line\"><span class=\"number\">2</span>进制转换为<span class=\"number\">8</span>：从后向前<span class=\"number\">3</span>位一组进行</span><br><span class=\"line\"><span class=\"number\">2</span>进制转换为<span class=\"number\">16</span>：从后向前<span class=\"number\">4</span>位一组进行</span><br><span class=\"line\"><span class=\"number\">2</span>,<span class=\"number\">8</span>,<span class=\"number\">16</span>进制转换成十进制，都是按照幂次，然后相加进行计算</span><br><span class=\"line\"><span class=\"number\">10</span>进制转换成<span class=\"number\">2</span>进制：除留余数法</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\"># 机算</span></span><br><span class=\"line\">a=<span class=\"number\">12</span> <span class=\"comment\">#10进制数</span></span><br><span class=\"line\"><span class=\"built_in\">bin</span>(a) <span class=\"comment\"># 将10进制数转换成2进制</span></span><br><span class=\"line\"><span class=\"built_in\">oct</span>(a) <span class=\"comment\"># 将10进制数转换成8进制</span></span><br><span class=\"line\"><span class=\"built_in\">hex</span>(a) <span class=\"comment\"># 将10进制数转换成16进制</span></span><br><span class=\"line\">注：当a不等于数字时会报错</span><br></pre></td></tr></table></figure></li>\n<li>数据类型之间的转换<figure class=\"highlight python\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">#转换函数</span></span><br><span class=\"line\">msg=<span class=\"built_in\">int</span>(msg) </span><br><span class=\"line\"><span class=\"comment\"># 将不是int型的变量转换成int型的变量</span></span><br><span class=\"line\"><span class=\"comment\"># 其余类型写法相同，如float</span></span><br><span class=\"line\"><span class=\"comment\"># 当被转换的msg不是纯数字会转换失败，报错 </span></span><br><span class=\"line\">msg=<span class=\"built_in\">int</span>(x,y)</span><br><span class=\"line\"><span class=\"comment\"># 将字符串x,按照y进制转换成10进制数</span></span><br><span class=\"line\">eg:</span><br><span class=\"line\">msg=<span class=\"built_in\">int</span>(<span class=\"string\">&#x27;abc&#x27;</span>,<span class=\"number\">16</span>) <span class=\"comment\"># 将字符串&#x27;abc&#x27;按照16进制数转换成10进制数</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\"># 转换原因</span></span><br><span class=\"line\">不同的数据类型有时候不能进行运算</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\"># True False</span></span><br><span class=\"line\">在进行数据运算时,<span class=\"literal\">True</span>=<span class=\"number\">1</span>,<span class=\"literal\">False</span>=<span class=\"number\">0</span>;</span><br><span class=\"line\">eg:</span><br><span class=\"line\">print(<span class=\"literal\">True</span> + <span class=\"number\">1</span>)  <span class=\"comment\"># 结果为2</span></span><br></pre></td></tr></table></figure></li>\n<li>转换成布尔值<figure class=\"highlight python\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\"># 在数字里，只有0会被转换成False</span></span><br><span class=\"line\"><span class=\"comment\"># 在字符串里只有空字符串会被转换成False,空格串也会被转换成True</span></span><br><span class=\"line\"><span class=\"comment\"># None会被转换为False,eg:bool(None),打印出来是False</span></span><br><span class=\"line\"><span class=\"comment\"># 空数据类型会被转换成False,如[],(),&#123;&#125;等</span></span><br></pre></td></tr></table></figure>\n</li>\n</ol>\n"},{"title":"Python元组、列表、字典、集合","abbrlink":9223,"date":"2021-01-11T05:54:58.000Z","_content":"1. ### 元组\n```Python\n# 元组和列表很像，用来保存多个数据\n# 使用一对小括号(),来表示一个元组\n# 元组是不可变数据类型,因此只能进行查，不能进行增删改\n# 元组是一个有序的存储数据的容器，可以通过下标来获取元素\n# 元组也可以遍历\n\nindex # 通过下标获取元素\ncount # 用来统计指定元素的个数\nx=(1,)  #表示只有一个元素的元组\ntuple   # 实现可迭代对象转化为元组(列表list也可以这样用)\n```\n2. ### 列表\n```Python\n1. 当我们保存多个数据时可以使用列表(列表近似于C语言的数组)\n\n2. 使用[]表示一个列表，列表里的每一个数据表示元素，中间用逗号隔开\n['xiaoming',18,'河南'] # 即表示一个列表，数据类型可以不同\n\n3. 可以使用list(可迭代对象),将可迭代对象转换成一个列表\neg：\nx=list(('张三','李四','王五'))\nprint(x) # 打印结果：['张三', '李四', '王五']\n\n4. 可以通过下标获取修改列表即对列表进行切片\n注：A[m:n] # 例如在对a进行切片时,从下标m开始,不包含下标为n的\n\n5. 增加列表元素\nappend # 在列表末尾加一个元素\ninsert # 在指定位置插入元素\nextend # 将可迭代对象添加到末尾\n\n6. 删除列表元素\nremove # 删除列表指定元素\nclear # 清空列表\ndel #删除一个列表元素\npop #移除列表中的一个元素（默认最后一个元素），并且返回该元素的值\n\n7. 查询列表元素\nindex # 返回指定元素下标,不存在会报错\ncount # 返回指定元素的个数\n\n8. 修改元素\n用下标定位到元素,直接赋值\n\n9. 调用列表的sort方法进行排序\n顺序排序:默认循序排序\n逆序排序:x.sort(reverse=True)\n\n10. 内置函数sorted排序\n新生成一个列表\n# 注：sort排序是改变原列表的序列,sorted新生成一个列表\n\n11. 列表逆序\nreverse:用函数\nx.[::-1]:用切片法\n\n12. 复制列表\ny=x # x,y指向了同一个内存地址,会相互影响\ncopy # 新列表和原列表数据相同,内存地址不同,不会相互影响\n\n13. 使用for...in对列表进行循环遍历时,尽量不要对列表进行删除操作\n\n14. 列表的嵌套\n[1,2,[3,4],[4,5,6]] # 列表可以嵌套使用\n\n15. 带下标进行for...in循环(一般用while)\nfor i,room in enumerate(rooms) # enumerate是关键字\n\n16. 列表推导式\n# 用列表推导式创建一个列表,产生列表条件简单的时候使用\nnums=[i for i in range(10)] # 产生0-9,这10个数据的列表\n\n17. 列表合并\nextend # 将两个列表合并成一个列表\n```\n3. ### 字典\n```Python\n# 字典里的数据都是以键值对的形式保存的\n# key,value之间使用冒号连接，多个键值对之间使用逗号连接\n# key是不允许重复的,重复了后一个会覆盖前一个\n# key只能是不可变数据类型，而value可以是任意数据类型\n\n# 1.查找数据(因为字典是无序的数据类型,所以只能用key来查找值)\nx['key'] # 查找不到会报错\nx.get['key'] # 查找不到会默认返回None\nx.get['key',default] # 查找不到返回default\n\n# 2.修改和删除(若存在key则修改,不存在则删除)\nx['key']=value\n\n# 3.删除\npop('key') # 删除并返回,否则返回默认值\npop('key',default) # 删除并返回,否则返回default\npopitem() # 返回并删除字典中的最后一对键和值\nclear() # 清空字典\ndel x['key'] # 直接删除,无返回值\n\n4.合并\nA.update(B) # A,B合并成一个字典,并赋值给A\n\n5.循环\n方法一:直接for...in循环遍历字典\nfor k in x: # for...in循环遍历获取的是key\n    print(x,'=',x[k])\n\n方法二:获取所有的key,再由key获取value\nfor k in x.keys(): \n    print(x,'=',x[k])\n# 一般不用这种方法,和方法一几乎相同,多此一举\n\n方法三:获取所有的value\nfor v in x.values():\n    print(v)\n\n方法四:拆包获取key,value\nfor k,v in x.items():\n    print(k,'=',v)\n# 常用方法一和四\n\n6. 交换key和value的位置\n方法一:\nx1={'name':'xiaoming'}\nx2={}\nfor k,v in x1.items():\n    x2[v]=k\n方法二:字典推导式\nx={'name':'xiaoming'}\nx1={v:k for k,v in x.items() }\nprint(x1)\n\n7.字典推导式\nx1={v:k for k,v in x.items() }\n```\n4. ### 集合\n```Python\n# 集合是一个不重复的无序的数据类型\n# 集合可以用{}或set表示\n# {}有两种意思:字典、集合;当里面的数据不是键值对时表示字典\n# 字典中不允许有重复元素,当有重复元素时会自动去重\n\n1.增加元素\nadd() # 增加一个元素\n\n2.清空集合\nclear() # 清空集合\nset() #表示空集合\n{} # 表示空列表\n\n3. 删除元素\npop # 随机删除一个\nremove # 指定删除一个,若删除的元素不存在则会报错\n\n4. 合并\nunion # 两个集合合并在一起,生成一个新的集合\nA.update(B) # 将B拼接在A里\n# 被合并的那个是可迭代对象即可\n\n5. 集合支持很多运算符(但不支持加法)\nA-B # A与B的差集,就是去掉A中,B中有的元素\nA&b # A与B的交集\nA|B #A与B的并集\nA^B #A和B差集的并集(即去掉AB中共有的元素,把其余的合并在一起)\n\n6. 特殊情况\n# 当列表转化为集合,如果是数字会去重且自动按升序排序\n\n```\n5. ### 元组、列表、字典的区别\n```Python\n1.元组(Tuple)\n# (),有序，元素任意，元素不可变\n\n2.列表(List)\n# [],有序，元素任意，元素可变\n# 与C语言的数组相似，不同的是C语言的数据类型要相同，list可以不同\n\n3.字典(Dictionary)\n# {}，无序，元素任意，元素可变\n# 元素键值对存在\n\n# 列表用extend合并,字典用update合并\n# 元组和列表可以用加号使两个元组和列表合并成一个，字典不可以\n```","source":"_posts/Python元组、列表、字典.md","raw":"---\ntitle: Python元组、列表、字典、集合\ntags:\n  - Python\ncategories: Python\nabbrlink: 9223\ndate: 2021-01-11 13:54:58\n---\n1. ### 元组\n```Python\n# 元组和列表很像，用来保存多个数据\n# 使用一对小括号(),来表示一个元组\n# 元组是不可变数据类型,因此只能进行查，不能进行增删改\n# 元组是一个有序的存储数据的容器，可以通过下标来获取元素\n# 元组也可以遍历\n\nindex # 通过下标获取元素\ncount # 用来统计指定元素的个数\nx=(1,)  #表示只有一个元素的元组\ntuple   # 实现可迭代对象转化为元组(列表list也可以这样用)\n```\n2. ### 列表\n```Python\n1. 当我们保存多个数据时可以使用列表(列表近似于C语言的数组)\n\n2. 使用[]表示一个列表，列表里的每一个数据表示元素，中间用逗号隔开\n['xiaoming',18,'河南'] # 即表示一个列表，数据类型可以不同\n\n3. 可以使用list(可迭代对象),将可迭代对象转换成一个列表\neg：\nx=list(('张三','李四','王五'))\nprint(x) # 打印结果：['张三', '李四', '王五']\n\n4. 可以通过下标获取修改列表即对列表进行切片\n注：A[m:n] # 例如在对a进行切片时,从下标m开始,不包含下标为n的\n\n5. 增加列表元素\nappend # 在列表末尾加一个元素\ninsert # 在指定位置插入元素\nextend # 将可迭代对象添加到末尾\n\n6. 删除列表元素\nremove # 删除列表指定元素\nclear # 清空列表\ndel #删除一个列表元素\npop #移除列表中的一个元素（默认最后一个元素），并且返回该元素的值\n\n7. 查询列表元素\nindex # 返回指定元素下标,不存在会报错\ncount # 返回指定元素的个数\n\n8. 修改元素\n用下标定位到元素,直接赋值\n\n9. 调用列表的sort方法进行排序\n顺序排序:默认循序排序\n逆序排序:x.sort(reverse=True)\n\n10. 内置函数sorted排序\n新生成一个列表\n# 注：sort排序是改变原列表的序列,sorted新生成一个列表\n\n11. 列表逆序\nreverse:用函数\nx.[::-1]:用切片法\n\n12. 复制列表\ny=x # x,y指向了同一个内存地址,会相互影响\ncopy # 新列表和原列表数据相同,内存地址不同,不会相互影响\n\n13. 使用for...in对列表进行循环遍历时,尽量不要对列表进行删除操作\n\n14. 列表的嵌套\n[1,2,[3,4],[4,5,6]] # 列表可以嵌套使用\n\n15. 带下标进行for...in循环(一般用while)\nfor i,room in enumerate(rooms) # enumerate是关键字\n\n16. 列表推导式\n# 用列表推导式创建一个列表,产生列表条件简单的时候使用\nnums=[i for i in range(10)] # 产生0-9,这10个数据的列表\n\n17. 列表合并\nextend # 将两个列表合并成一个列表\n```\n3. ### 字典\n```Python\n# 字典里的数据都是以键值对的形式保存的\n# key,value之间使用冒号连接，多个键值对之间使用逗号连接\n# key是不允许重复的,重复了后一个会覆盖前一个\n# key只能是不可变数据类型，而value可以是任意数据类型\n\n# 1.查找数据(因为字典是无序的数据类型,所以只能用key来查找值)\nx['key'] # 查找不到会报错\nx.get['key'] # 查找不到会默认返回None\nx.get['key',default] # 查找不到返回default\n\n# 2.修改和删除(若存在key则修改,不存在则删除)\nx['key']=value\n\n# 3.删除\npop('key') # 删除并返回,否则返回默认值\npop('key',default) # 删除并返回,否则返回default\npopitem() # 返回并删除字典中的最后一对键和值\nclear() # 清空字典\ndel x['key'] # 直接删除,无返回值\n\n4.合并\nA.update(B) # A,B合并成一个字典,并赋值给A\n\n5.循环\n方法一:直接for...in循环遍历字典\nfor k in x: # for...in循环遍历获取的是key\n    print(x,'=',x[k])\n\n方法二:获取所有的key,再由key获取value\nfor k in x.keys(): \n    print(x,'=',x[k])\n# 一般不用这种方法,和方法一几乎相同,多此一举\n\n方法三:获取所有的value\nfor v in x.values():\n    print(v)\n\n方法四:拆包获取key,value\nfor k,v in x.items():\n    print(k,'=',v)\n# 常用方法一和四\n\n6. 交换key和value的位置\n方法一:\nx1={'name':'xiaoming'}\nx2={}\nfor k,v in x1.items():\n    x2[v]=k\n方法二:字典推导式\nx={'name':'xiaoming'}\nx1={v:k for k,v in x.items() }\nprint(x1)\n\n7.字典推导式\nx1={v:k for k,v in x.items() }\n```\n4. ### 集合\n```Python\n# 集合是一个不重复的无序的数据类型\n# 集合可以用{}或set表示\n# {}有两种意思:字典、集合;当里面的数据不是键值对时表示字典\n# 字典中不允许有重复元素,当有重复元素时会自动去重\n\n1.增加元素\nadd() # 增加一个元素\n\n2.清空集合\nclear() # 清空集合\nset() #表示空集合\n{} # 表示空列表\n\n3. 删除元素\npop # 随机删除一个\nremove # 指定删除一个,若删除的元素不存在则会报错\n\n4. 合并\nunion # 两个集合合并在一起,生成一个新的集合\nA.update(B) # 将B拼接在A里\n# 被合并的那个是可迭代对象即可\n\n5. 集合支持很多运算符(但不支持加法)\nA-B # A与B的差集,就是去掉A中,B中有的元素\nA&b # A与B的交集\nA|B #A与B的并集\nA^B #A和B差集的并集(即去掉AB中共有的元素,把其余的合并在一起)\n\n6. 特殊情况\n# 当列表转化为集合,如果是数字会去重且自动按升序排序\n\n```\n5. ### 元组、列表、字典的区别\n```Python\n1.元组(Tuple)\n# (),有序，元素任意，元素不可变\n\n2.列表(List)\n# [],有序，元素任意，元素可变\n# 与C语言的数组相似，不同的是C语言的数据类型要相同，list可以不同\n\n3.字典(Dictionary)\n# {}，无序，元素任意，元素可变\n# 元素键值对存在\n\n# 列表用extend合并,字典用update合并\n# 元组和列表可以用加号使两个元组和列表合并成一个，字典不可以\n```","slug":"Python元组、列表、字典","published":1,"updated":"2021-07-27T14:51:43.509Z","comments":1,"layout":"post","photos":[],"link":"","_id":"ckrmv4jh80015zrfy1lnw0528","content":"<ol>\n<li><h3 id=\"元组\"><a href=\"#元组\" class=\"headerlink\" title=\"元组\"></a>元组</h3><figure class=\"highlight python\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\"># 元组和列表很像，用来保存多个数据</span></span><br><span class=\"line\"><span class=\"comment\"># 使用一对小括号(),来表示一个元组</span></span><br><span class=\"line\"><span class=\"comment\"># 元组是不可变数据类型,因此只能进行查，不能进行增删改</span></span><br><span class=\"line\"><span class=\"comment\"># 元组是一个有序的存储数据的容器，可以通过下标来获取元素</span></span><br><span class=\"line\"><span class=\"comment\"># 元组也可以遍历</span></span><br><span class=\"line\"></span><br><span class=\"line\">index <span class=\"comment\"># 通过下标获取元素</span></span><br><span class=\"line\">count <span class=\"comment\"># 用来统计指定元素的个数</span></span><br><span class=\"line\">x=(<span class=\"number\">1</span>,)  <span class=\"comment\">#表示只有一个元素的元组</span></span><br><span class=\"line\"><span class=\"built_in\">tuple</span>   <span class=\"comment\"># 实现可迭代对象转化为元组(列表list也可以这样用)</span></span><br></pre></td></tr></table></figure></li>\n<li><h3 id=\"列表\"><a href=\"#列表\" class=\"headerlink\" title=\"列表\"></a>列表</h3><figure class=\"highlight python\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br><span class=\"line\">38</span><br><span class=\"line\">39</span><br><span class=\"line\">40</span><br><span class=\"line\">41</span><br><span class=\"line\">42</span><br><span class=\"line\">43</span><br><span class=\"line\">44</span><br><span class=\"line\">45</span><br><span class=\"line\">46</span><br><span class=\"line\">47</span><br><span class=\"line\">48</span><br><span class=\"line\">49</span><br><span class=\"line\">50</span><br><span class=\"line\">51</span><br><span class=\"line\">52</span><br><span class=\"line\">53</span><br><span class=\"line\">54</span><br><span class=\"line\">55</span><br><span class=\"line\">56</span><br><span class=\"line\">57</span><br><span class=\"line\">58</span><br><span class=\"line\">59</span><br><span class=\"line\">60</span><br><span class=\"line\">61</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"number\">1.</span> 当我们保存多个数据时可以使用列表(列表近似于C语言的数组)</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"number\">2.</span> 使用[]表示一个列表，列表里的每一个数据表示元素，中间用逗号隔开</span><br><span class=\"line\">[<span class=\"string\">&#x27;xiaoming&#x27;</span>,<span class=\"number\">18</span>,<span class=\"string\">&#x27;河南&#x27;</span>] <span class=\"comment\"># 即表示一个列表，数据类型可以不同</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"number\">3.</span> 可以使用<span class=\"built_in\">list</span>(可迭代对象),将可迭代对象转换成一个列表</span><br><span class=\"line\">eg：</span><br><span class=\"line\">x=<span class=\"built_in\">list</span>((<span class=\"string\">&#x27;张三&#x27;</span>,<span class=\"string\">&#x27;李四&#x27;</span>,<span class=\"string\">&#x27;王五&#x27;</span>))</span><br><span class=\"line\">print(x) <span class=\"comment\"># 打印结果：[&#x27;张三&#x27;, &#x27;李四&#x27;, &#x27;王五&#x27;]</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"number\">4.</span> 可以通过下标获取修改列表即对列表进行切片</span><br><span class=\"line\">注：A[m:n] <span class=\"comment\"># 例如在对a进行切片时,从下标m开始,不包含下标为n的</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"number\">5.</span> 增加列表元素</span><br><span class=\"line\">append <span class=\"comment\"># 在列表末尾加一个元素</span></span><br><span class=\"line\">insert <span class=\"comment\"># 在指定位置插入元素</span></span><br><span class=\"line\">extend <span class=\"comment\"># 将可迭代对象添加到末尾</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"number\">6.</span> 删除列表元素</span><br><span class=\"line\">remove <span class=\"comment\"># 删除列表指定元素</span></span><br><span class=\"line\">clear <span class=\"comment\"># 清空列表</span></span><br><span class=\"line\"><span class=\"keyword\">del</span> <span class=\"comment\">#删除一个列表元素</span></span><br><span class=\"line\">pop <span class=\"comment\">#移除列表中的一个元素（默认最后一个元素），并且返回该元素的值</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"number\">7.</span> 查询列表元素</span><br><span class=\"line\">index <span class=\"comment\"># 返回指定元素下标,不存在会报错</span></span><br><span class=\"line\">count <span class=\"comment\"># 返回指定元素的个数</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"number\">8.</span> 修改元素</span><br><span class=\"line\">用下标定位到元素,直接赋值</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"number\">9.</span> 调用列表的sort方法进行排序</span><br><span class=\"line\">顺序排序:默认循序排序</span><br><span class=\"line\">逆序排序:x.sort(reverse=<span class=\"literal\">True</span>)</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"number\">10.</span> 内置函数<span class=\"built_in\">sorted</span>排序</span><br><span class=\"line\">新生成一个列表</span><br><span class=\"line\"><span class=\"comment\"># 注：sort排序是改变原列表的序列,sorted新生成一个列表</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"number\">11.</span> 列表逆序</span><br><span class=\"line\">reverse:用函数</span><br><span class=\"line\">x.[::-<span class=\"number\">1</span>]:用切片法</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"number\">12.</span> 复制列表</span><br><span class=\"line\">y=x <span class=\"comment\"># x,y指向了同一个内存地址,会相互影响</span></span><br><span class=\"line\">copy <span class=\"comment\"># 新列表和原列表数据相同,内存地址不同,不会相互影响</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"number\">13.</span> 使用<span class=\"keyword\">for</span>...<span class=\"keyword\">in</span>对列表进行循环遍历时,尽量不要对列表进行删除操作</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"number\">14.</span> 列表的嵌套</span><br><span class=\"line\">[<span class=\"number\">1</span>,<span class=\"number\">2</span>,[<span class=\"number\">3</span>,<span class=\"number\">4</span>],[<span class=\"number\">4</span>,<span class=\"number\">5</span>,<span class=\"number\">6</span>]] <span class=\"comment\"># 列表可以嵌套使用</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"number\">15.</span> 带下标进行<span class=\"keyword\">for</span>...<span class=\"keyword\">in</span>循环(一般用<span class=\"keyword\">while</span>)</span><br><span class=\"line\"><span class=\"keyword\">for</span> i,room <span class=\"keyword\">in</span> <span class=\"built_in\">enumerate</span>(rooms) <span class=\"comment\"># enumerate是关键字</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"number\">16.</span> 列表推导式</span><br><span class=\"line\"><span class=\"comment\"># 用列表推导式创建一个列表,产生列表条件简单的时候使用</span></span><br><span class=\"line\">nums=[i <span class=\"keyword\">for</span> i <span class=\"keyword\">in</span> <span class=\"built_in\">range</span>(<span class=\"number\">10</span>)] <span class=\"comment\"># 产生0-9,这10个数据的列表</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"number\">17.</span> 列表合并</span><br><span class=\"line\">extend <span class=\"comment\"># 将两个列表合并成一个列表</span></span><br></pre></td></tr></table></figure></li>\n<li><h3 id=\"字典\"><a href=\"#字典\" class=\"headerlink\" title=\"字典\"></a>字典</h3><figure class=\"highlight python\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br><span class=\"line\">38</span><br><span class=\"line\">39</span><br><span class=\"line\">40</span><br><span class=\"line\">41</span><br><span class=\"line\">42</span><br><span class=\"line\">43</span><br><span class=\"line\">44</span><br><span class=\"line\">45</span><br><span class=\"line\">46</span><br><span class=\"line\">47</span><br><span class=\"line\">48</span><br><span class=\"line\">49</span><br><span class=\"line\">50</span><br><span class=\"line\">51</span><br><span class=\"line\">52</span><br><span class=\"line\">53</span><br><span class=\"line\">54</span><br><span class=\"line\">55</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\"># 字典里的数据都是以键值对的形式保存的</span></span><br><span class=\"line\"><span class=\"comment\"># key,value之间使用冒号连接，多个键值对之间使用逗号连接</span></span><br><span class=\"line\"><span class=\"comment\"># key是不允许重复的,重复了后一个会覆盖前一个</span></span><br><span class=\"line\"><span class=\"comment\"># key只能是不可变数据类型，而value可以是任意数据类型</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\"># 1.查找数据(因为字典是无序的数据类型,所以只能用key来查找值)</span></span><br><span class=\"line\">x[<span class=\"string\">&#x27;key&#x27;</span>] <span class=\"comment\"># 查找不到会报错</span></span><br><span class=\"line\">x.get[<span class=\"string\">&#x27;key&#x27;</span>] <span class=\"comment\"># 查找不到会默认返回None</span></span><br><span class=\"line\">x.get[<span class=\"string\">&#x27;key&#x27;</span>,default] <span class=\"comment\"># 查找不到返回default</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\"># 2.修改和删除(若存在key则修改,不存在则删除)</span></span><br><span class=\"line\">x[<span class=\"string\">&#x27;key&#x27;</span>]=value</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\"># 3.删除</span></span><br><span class=\"line\">pop(<span class=\"string\">&#x27;key&#x27;</span>) <span class=\"comment\"># 删除并返回,否则返回默认值</span></span><br><span class=\"line\">pop(<span class=\"string\">&#x27;key&#x27;</span>,default) <span class=\"comment\"># 删除并返回,否则返回default</span></span><br><span class=\"line\">popitem() <span class=\"comment\"># 返回并删除字典中的最后一对键和值</span></span><br><span class=\"line\">clear() <span class=\"comment\"># 清空字典</span></span><br><span class=\"line\"><span class=\"keyword\">del</span> x[<span class=\"string\">&#x27;key&#x27;</span>] <span class=\"comment\"># 直接删除,无返回值</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"number\">4.</span>合并</span><br><span class=\"line\">A.update(B) <span class=\"comment\"># A,B合并成一个字典,并赋值给A</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"number\">5.</span>循环</span><br><span class=\"line\">方法一:直接<span class=\"keyword\">for</span>...<span class=\"keyword\">in</span>循环遍历字典</span><br><span class=\"line\"><span class=\"keyword\">for</span> k <span class=\"keyword\">in</span> x: <span class=\"comment\"># for...in循环遍历获取的是key</span></span><br><span class=\"line\">    print(x,<span class=\"string\">&#x27;=&#x27;</span>,x[k])</span><br><span class=\"line\"></span><br><span class=\"line\">方法二:获取所有的key,再由key获取value</span><br><span class=\"line\"><span class=\"keyword\">for</span> k <span class=\"keyword\">in</span> x.keys(): </span><br><span class=\"line\">    print(x,<span class=\"string\">&#x27;=&#x27;</span>,x[k])</span><br><span class=\"line\"><span class=\"comment\"># 一般不用这种方法,和方法一几乎相同,多此一举</span></span><br><span class=\"line\"></span><br><span class=\"line\">方法三:获取所有的value</span><br><span class=\"line\"><span class=\"keyword\">for</span> v <span class=\"keyword\">in</span> x.values():</span><br><span class=\"line\">    print(v)</span><br><span class=\"line\"></span><br><span class=\"line\">方法四:拆包获取key,value</span><br><span class=\"line\"><span class=\"keyword\">for</span> k,v <span class=\"keyword\">in</span> x.items():</span><br><span class=\"line\">    print(k,<span class=\"string\">&#x27;=&#x27;</span>,v)</span><br><span class=\"line\"><span class=\"comment\"># 常用方法一和四</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"number\">6.</span> 交换key和value的位置</span><br><span class=\"line\">方法一:</span><br><span class=\"line\">x1=&#123;<span class=\"string\">&#x27;name&#x27;</span>:<span class=\"string\">&#x27;xiaoming&#x27;</span>&#125;</span><br><span class=\"line\">x2=&#123;&#125;</span><br><span class=\"line\"><span class=\"keyword\">for</span> k,v <span class=\"keyword\">in</span> x1.items():</span><br><span class=\"line\">    x2[v]=k</span><br><span class=\"line\">方法二:字典推导式</span><br><span class=\"line\">x=&#123;<span class=\"string\">&#x27;name&#x27;</span>:<span class=\"string\">&#x27;xiaoming&#x27;</span>&#125;</span><br><span class=\"line\">x1=&#123;v:k <span class=\"keyword\">for</span> k,v <span class=\"keyword\">in</span> x.items() &#125;</span><br><span class=\"line\">print(x1)</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"number\">7.</span>字典推导式</span><br><span class=\"line\">x1=&#123;v:k <span class=\"keyword\">for</span> k,v <span class=\"keyword\">in</span> x.items() &#125;</span><br></pre></td></tr></table></figure></li>\n<li><h3 id=\"集合\"><a href=\"#集合\" class=\"headerlink\" title=\"集合\"></a>集合</h3><figure class=\"highlight python\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\"># 集合是一个不重复的无序的数据类型</span></span><br><span class=\"line\"><span class=\"comment\"># 集合可以用&#123;&#125;或set表示</span></span><br><span class=\"line\"><span class=\"comment\"># &#123;&#125;有两种意思:字典、集合;当里面的数据不是键值对时表示字典</span></span><br><span class=\"line\"><span class=\"comment\"># 字典中不允许有重复元素,当有重复元素时会自动去重</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"number\">1.</span>增加元素</span><br><span class=\"line\">add() <span class=\"comment\"># 增加一个元素</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"number\">2.</span>清空集合</span><br><span class=\"line\">clear() <span class=\"comment\"># 清空集合</span></span><br><span class=\"line\"><span class=\"built_in\">set</span>() <span class=\"comment\">#表示空集合</span></span><br><span class=\"line\">&#123;&#125; <span class=\"comment\"># 表示空列表</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"number\">3.</span> 删除元素</span><br><span class=\"line\">pop <span class=\"comment\"># 随机删除一个</span></span><br><span class=\"line\">remove <span class=\"comment\"># 指定删除一个,若删除的元素不存在则会报错</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"number\">4.</span> 合并</span><br><span class=\"line\">union <span class=\"comment\"># 两个集合合并在一起,生成一个新的集合</span></span><br><span class=\"line\">A.update(B) <span class=\"comment\"># 将B拼接在A里</span></span><br><span class=\"line\"><span class=\"comment\"># 被合并的那个是可迭代对象即可</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"number\">5.</span> 集合支持很多运算符(但不支持加法)</span><br><span class=\"line\">A-B <span class=\"comment\"># A与B的差集,就是去掉A中,B中有的元素</span></span><br><span class=\"line\">A&amp;b <span class=\"comment\"># A与B的交集</span></span><br><span class=\"line\">A|B <span class=\"comment\">#A与B的并集</span></span><br><span class=\"line\">A^B <span class=\"comment\">#A和B差集的并集(即去掉AB中共有的元素,把其余的合并在一起)</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"number\">6.</span> 特殊情况</span><br><span class=\"line\"><span class=\"comment\"># 当列表转化为集合,如果是数字会去重且自动按升序排序</span></span><br><span class=\"line\"></span><br></pre></td></tr></table></figure></li>\n<li><h3 id=\"元组、列表、字典的区别\"><a href=\"#元组、列表、字典的区别\" class=\"headerlink\" title=\"元组、列表、字典的区别\"></a>元组、列表、字典的区别</h3><figure class=\"highlight python\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"number\">1.</span>元组(Tuple)</span><br><span class=\"line\"><span class=\"comment\"># (),有序，元素任意，元素不可变</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"number\">2.</span>列表(List)</span><br><span class=\"line\"><span class=\"comment\"># [],有序，元素任意，元素可变</span></span><br><span class=\"line\"><span class=\"comment\"># 与C语言的数组相似，不同的是C语言的数据类型要相同，list可以不同</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"number\">3.</span>字典(Dictionary)</span><br><span class=\"line\"><span class=\"comment\"># &#123;&#125;，无序，元素任意，元素可变</span></span><br><span class=\"line\"><span class=\"comment\"># 元素键值对存在</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\"># 列表用extend合并,字典用update合并</span></span><br><span class=\"line\"><span class=\"comment\"># 元组和列表可以用加号使两个元组和列表合并成一个，字典不可以</span></span><br></pre></td></tr></table></figure></li>\n</ol>\n","site":{"data":{}},"length":3080,"excerpt":"","more":"<ol>\n<li><h3 id=\"元组\"><a href=\"#元组\" class=\"headerlink\" title=\"元组\"></a>元组</h3><figure class=\"highlight python\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\"># 元组和列表很像，用来保存多个数据</span></span><br><span class=\"line\"><span class=\"comment\"># 使用一对小括号(),来表示一个元组</span></span><br><span class=\"line\"><span class=\"comment\"># 元组是不可变数据类型,因此只能进行查，不能进行增删改</span></span><br><span class=\"line\"><span class=\"comment\"># 元组是一个有序的存储数据的容器，可以通过下标来获取元素</span></span><br><span class=\"line\"><span class=\"comment\"># 元组也可以遍历</span></span><br><span class=\"line\"></span><br><span class=\"line\">index <span class=\"comment\"># 通过下标获取元素</span></span><br><span class=\"line\">count <span class=\"comment\"># 用来统计指定元素的个数</span></span><br><span class=\"line\">x=(<span class=\"number\">1</span>,)  <span class=\"comment\">#表示只有一个元素的元组</span></span><br><span class=\"line\"><span class=\"built_in\">tuple</span>   <span class=\"comment\"># 实现可迭代对象转化为元组(列表list也可以这样用)</span></span><br></pre></td></tr></table></figure></li>\n<li><h3 id=\"列表\"><a href=\"#列表\" class=\"headerlink\" title=\"列表\"></a>列表</h3><figure class=\"highlight python\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br><span class=\"line\">38</span><br><span class=\"line\">39</span><br><span class=\"line\">40</span><br><span class=\"line\">41</span><br><span class=\"line\">42</span><br><span class=\"line\">43</span><br><span class=\"line\">44</span><br><span class=\"line\">45</span><br><span class=\"line\">46</span><br><span class=\"line\">47</span><br><span class=\"line\">48</span><br><span class=\"line\">49</span><br><span class=\"line\">50</span><br><span class=\"line\">51</span><br><span class=\"line\">52</span><br><span class=\"line\">53</span><br><span class=\"line\">54</span><br><span class=\"line\">55</span><br><span class=\"line\">56</span><br><span class=\"line\">57</span><br><span class=\"line\">58</span><br><span class=\"line\">59</span><br><span class=\"line\">60</span><br><span class=\"line\">61</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"number\">1.</span> 当我们保存多个数据时可以使用列表(列表近似于C语言的数组)</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"number\">2.</span> 使用[]表示一个列表，列表里的每一个数据表示元素，中间用逗号隔开</span><br><span class=\"line\">[<span class=\"string\">&#x27;xiaoming&#x27;</span>,<span class=\"number\">18</span>,<span class=\"string\">&#x27;河南&#x27;</span>] <span class=\"comment\"># 即表示一个列表，数据类型可以不同</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"number\">3.</span> 可以使用<span class=\"built_in\">list</span>(可迭代对象),将可迭代对象转换成一个列表</span><br><span class=\"line\">eg：</span><br><span class=\"line\">x=<span class=\"built_in\">list</span>((<span class=\"string\">&#x27;张三&#x27;</span>,<span class=\"string\">&#x27;李四&#x27;</span>,<span class=\"string\">&#x27;王五&#x27;</span>))</span><br><span class=\"line\">print(x) <span class=\"comment\"># 打印结果：[&#x27;张三&#x27;, &#x27;李四&#x27;, &#x27;王五&#x27;]</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"number\">4.</span> 可以通过下标获取修改列表即对列表进行切片</span><br><span class=\"line\">注：A[m:n] <span class=\"comment\"># 例如在对a进行切片时,从下标m开始,不包含下标为n的</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"number\">5.</span> 增加列表元素</span><br><span class=\"line\">append <span class=\"comment\"># 在列表末尾加一个元素</span></span><br><span class=\"line\">insert <span class=\"comment\"># 在指定位置插入元素</span></span><br><span class=\"line\">extend <span class=\"comment\"># 将可迭代对象添加到末尾</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"number\">6.</span> 删除列表元素</span><br><span class=\"line\">remove <span class=\"comment\"># 删除列表指定元素</span></span><br><span class=\"line\">clear <span class=\"comment\"># 清空列表</span></span><br><span class=\"line\"><span class=\"keyword\">del</span> <span class=\"comment\">#删除一个列表元素</span></span><br><span class=\"line\">pop <span class=\"comment\">#移除列表中的一个元素（默认最后一个元素），并且返回该元素的值</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"number\">7.</span> 查询列表元素</span><br><span class=\"line\">index <span class=\"comment\"># 返回指定元素下标,不存在会报错</span></span><br><span class=\"line\">count <span class=\"comment\"># 返回指定元素的个数</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"number\">8.</span> 修改元素</span><br><span class=\"line\">用下标定位到元素,直接赋值</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"number\">9.</span> 调用列表的sort方法进行排序</span><br><span class=\"line\">顺序排序:默认循序排序</span><br><span class=\"line\">逆序排序:x.sort(reverse=<span class=\"literal\">True</span>)</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"number\">10.</span> 内置函数<span class=\"built_in\">sorted</span>排序</span><br><span class=\"line\">新生成一个列表</span><br><span class=\"line\"><span class=\"comment\"># 注：sort排序是改变原列表的序列,sorted新生成一个列表</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"number\">11.</span> 列表逆序</span><br><span class=\"line\">reverse:用函数</span><br><span class=\"line\">x.[::-<span class=\"number\">1</span>]:用切片法</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"number\">12.</span> 复制列表</span><br><span class=\"line\">y=x <span class=\"comment\"># x,y指向了同一个内存地址,会相互影响</span></span><br><span class=\"line\">copy <span class=\"comment\"># 新列表和原列表数据相同,内存地址不同,不会相互影响</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"number\">13.</span> 使用<span class=\"keyword\">for</span>...<span class=\"keyword\">in</span>对列表进行循环遍历时,尽量不要对列表进行删除操作</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"number\">14.</span> 列表的嵌套</span><br><span class=\"line\">[<span class=\"number\">1</span>,<span class=\"number\">2</span>,[<span class=\"number\">3</span>,<span class=\"number\">4</span>],[<span class=\"number\">4</span>,<span class=\"number\">5</span>,<span class=\"number\">6</span>]] <span class=\"comment\"># 列表可以嵌套使用</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"number\">15.</span> 带下标进行<span class=\"keyword\">for</span>...<span class=\"keyword\">in</span>循环(一般用<span class=\"keyword\">while</span>)</span><br><span class=\"line\"><span class=\"keyword\">for</span> i,room <span class=\"keyword\">in</span> <span class=\"built_in\">enumerate</span>(rooms) <span class=\"comment\"># enumerate是关键字</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"number\">16.</span> 列表推导式</span><br><span class=\"line\"><span class=\"comment\"># 用列表推导式创建一个列表,产生列表条件简单的时候使用</span></span><br><span class=\"line\">nums=[i <span class=\"keyword\">for</span> i <span class=\"keyword\">in</span> <span class=\"built_in\">range</span>(<span class=\"number\">10</span>)] <span class=\"comment\"># 产生0-9,这10个数据的列表</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"number\">17.</span> 列表合并</span><br><span class=\"line\">extend <span class=\"comment\"># 将两个列表合并成一个列表</span></span><br></pre></td></tr></table></figure></li>\n<li><h3 id=\"字典\"><a href=\"#字典\" class=\"headerlink\" title=\"字典\"></a>字典</h3><figure class=\"highlight python\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br><span class=\"line\">38</span><br><span class=\"line\">39</span><br><span class=\"line\">40</span><br><span class=\"line\">41</span><br><span class=\"line\">42</span><br><span class=\"line\">43</span><br><span class=\"line\">44</span><br><span class=\"line\">45</span><br><span class=\"line\">46</span><br><span class=\"line\">47</span><br><span class=\"line\">48</span><br><span class=\"line\">49</span><br><span class=\"line\">50</span><br><span class=\"line\">51</span><br><span class=\"line\">52</span><br><span class=\"line\">53</span><br><span class=\"line\">54</span><br><span class=\"line\">55</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\"># 字典里的数据都是以键值对的形式保存的</span></span><br><span class=\"line\"><span class=\"comment\"># key,value之间使用冒号连接，多个键值对之间使用逗号连接</span></span><br><span class=\"line\"><span class=\"comment\"># key是不允许重复的,重复了后一个会覆盖前一个</span></span><br><span class=\"line\"><span class=\"comment\"># key只能是不可变数据类型，而value可以是任意数据类型</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\"># 1.查找数据(因为字典是无序的数据类型,所以只能用key来查找值)</span></span><br><span class=\"line\">x[<span class=\"string\">&#x27;key&#x27;</span>] <span class=\"comment\"># 查找不到会报错</span></span><br><span class=\"line\">x.get[<span class=\"string\">&#x27;key&#x27;</span>] <span class=\"comment\"># 查找不到会默认返回None</span></span><br><span class=\"line\">x.get[<span class=\"string\">&#x27;key&#x27;</span>,default] <span class=\"comment\"># 查找不到返回default</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\"># 2.修改和删除(若存在key则修改,不存在则删除)</span></span><br><span class=\"line\">x[<span class=\"string\">&#x27;key&#x27;</span>]=value</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\"># 3.删除</span></span><br><span class=\"line\">pop(<span class=\"string\">&#x27;key&#x27;</span>) <span class=\"comment\"># 删除并返回,否则返回默认值</span></span><br><span class=\"line\">pop(<span class=\"string\">&#x27;key&#x27;</span>,default) <span class=\"comment\"># 删除并返回,否则返回default</span></span><br><span class=\"line\">popitem() <span class=\"comment\"># 返回并删除字典中的最后一对键和值</span></span><br><span class=\"line\">clear() <span class=\"comment\"># 清空字典</span></span><br><span class=\"line\"><span class=\"keyword\">del</span> x[<span class=\"string\">&#x27;key&#x27;</span>] <span class=\"comment\"># 直接删除,无返回值</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"number\">4.</span>合并</span><br><span class=\"line\">A.update(B) <span class=\"comment\"># A,B合并成一个字典,并赋值给A</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"number\">5.</span>循环</span><br><span class=\"line\">方法一:直接<span class=\"keyword\">for</span>...<span class=\"keyword\">in</span>循环遍历字典</span><br><span class=\"line\"><span class=\"keyword\">for</span> k <span class=\"keyword\">in</span> x: <span class=\"comment\"># for...in循环遍历获取的是key</span></span><br><span class=\"line\">    print(x,<span class=\"string\">&#x27;=&#x27;</span>,x[k])</span><br><span class=\"line\"></span><br><span class=\"line\">方法二:获取所有的key,再由key获取value</span><br><span class=\"line\"><span class=\"keyword\">for</span> k <span class=\"keyword\">in</span> x.keys(): </span><br><span class=\"line\">    print(x,<span class=\"string\">&#x27;=&#x27;</span>,x[k])</span><br><span class=\"line\"><span class=\"comment\"># 一般不用这种方法,和方法一几乎相同,多此一举</span></span><br><span class=\"line\"></span><br><span class=\"line\">方法三:获取所有的value</span><br><span class=\"line\"><span class=\"keyword\">for</span> v <span class=\"keyword\">in</span> x.values():</span><br><span class=\"line\">    print(v)</span><br><span class=\"line\"></span><br><span class=\"line\">方法四:拆包获取key,value</span><br><span class=\"line\"><span class=\"keyword\">for</span> k,v <span class=\"keyword\">in</span> x.items():</span><br><span class=\"line\">    print(k,<span class=\"string\">&#x27;=&#x27;</span>,v)</span><br><span class=\"line\"><span class=\"comment\"># 常用方法一和四</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"number\">6.</span> 交换key和value的位置</span><br><span class=\"line\">方法一:</span><br><span class=\"line\">x1=&#123;<span class=\"string\">&#x27;name&#x27;</span>:<span class=\"string\">&#x27;xiaoming&#x27;</span>&#125;</span><br><span class=\"line\">x2=&#123;&#125;</span><br><span class=\"line\"><span class=\"keyword\">for</span> k,v <span class=\"keyword\">in</span> x1.items():</span><br><span class=\"line\">    x2[v]=k</span><br><span class=\"line\">方法二:字典推导式</span><br><span class=\"line\">x=&#123;<span class=\"string\">&#x27;name&#x27;</span>:<span class=\"string\">&#x27;xiaoming&#x27;</span>&#125;</span><br><span class=\"line\">x1=&#123;v:k <span class=\"keyword\">for</span> k,v <span class=\"keyword\">in</span> x.items() &#125;</span><br><span class=\"line\">print(x1)</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"number\">7.</span>字典推导式</span><br><span class=\"line\">x1=&#123;v:k <span class=\"keyword\">for</span> k,v <span class=\"keyword\">in</span> x.items() &#125;</span><br></pre></td></tr></table></figure></li>\n<li><h3 id=\"集合\"><a href=\"#集合\" class=\"headerlink\" title=\"集合\"></a>集合</h3><figure class=\"highlight python\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\"># 集合是一个不重复的无序的数据类型</span></span><br><span class=\"line\"><span class=\"comment\"># 集合可以用&#123;&#125;或set表示</span></span><br><span class=\"line\"><span class=\"comment\"># &#123;&#125;有两种意思:字典、集合;当里面的数据不是键值对时表示字典</span></span><br><span class=\"line\"><span class=\"comment\"># 字典中不允许有重复元素,当有重复元素时会自动去重</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"number\">1.</span>增加元素</span><br><span class=\"line\">add() <span class=\"comment\"># 增加一个元素</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"number\">2.</span>清空集合</span><br><span class=\"line\">clear() <span class=\"comment\"># 清空集合</span></span><br><span class=\"line\"><span class=\"built_in\">set</span>() <span class=\"comment\">#表示空集合</span></span><br><span class=\"line\">&#123;&#125; <span class=\"comment\"># 表示空列表</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"number\">3.</span> 删除元素</span><br><span class=\"line\">pop <span class=\"comment\"># 随机删除一个</span></span><br><span class=\"line\">remove <span class=\"comment\"># 指定删除一个,若删除的元素不存在则会报错</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"number\">4.</span> 合并</span><br><span class=\"line\">union <span class=\"comment\"># 两个集合合并在一起,生成一个新的集合</span></span><br><span class=\"line\">A.update(B) <span class=\"comment\"># 将B拼接在A里</span></span><br><span class=\"line\"><span class=\"comment\"># 被合并的那个是可迭代对象即可</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"number\">5.</span> 集合支持很多运算符(但不支持加法)</span><br><span class=\"line\">A-B <span class=\"comment\"># A与B的差集,就是去掉A中,B中有的元素</span></span><br><span class=\"line\">A&amp;b <span class=\"comment\"># A与B的交集</span></span><br><span class=\"line\">A|B <span class=\"comment\">#A与B的并集</span></span><br><span class=\"line\">A^B <span class=\"comment\">#A和B差集的并集(即去掉AB中共有的元素,把其余的合并在一起)</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"number\">6.</span> 特殊情况</span><br><span class=\"line\"><span class=\"comment\"># 当列表转化为集合,如果是数字会去重且自动按升序排序</span></span><br><span class=\"line\"></span><br></pre></td></tr></table></figure></li>\n<li><h3 id=\"元组、列表、字典的区别\"><a href=\"#元组、列表、字典的区别\" class=\"headerlink\" title=\"元组、列表、字典的区别\"></a>元组、列表、字典的区别</h3><figure class=\"highlight python\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"number\">1.</span>元组(Tuple)</span><br><span class=\"line\"><span class=\"comment\"># (),有序，元素任意，元素不可变</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"number\">2.</span>列表(List)</span><br><span class=\"line\"><span class=\"comment\"># [],有序，元素任意，元素可变</span></span><br><span class=\"line\"><span class=\"comment\"># 与C语言的数组相似，不同的是C语言的数据类型要相同，list可以不同</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"number\">3.</span>字典(Dictionary)</span><br><span class=\"line\"><span class=\"comment\"># &#123;&#125;，无序，元素任意，元素可变</span></span><br><span class=\"line\"><span class=\"comment\"># 元素键值对存在</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\"># 列表用extend合并,字典用update合并</span></span><br><span class=\"line\"><span class=\"comment\"># 元组和列表可以用加号使两个元组和列表合并成一个，字典不可以</span></span><br></pre></td></tr></table></figure></li>\n</ol>\n"},{"title":"Python分支语句和循环语句","abbrlink":49927,"date":"2021-01-10T02:54:42.000Z","_content":"## 分支语句\n1. ### if\n```Python\nif 判断条件:\n    条件成立时，执行的语句\neg:\nif 1 < 2 :\n    print(\"helloworld\")\n```\n2. ### if...else\n```Python\nif 判断条件:\n    条件成立时，执行的语句\nelse\n    当if中的条件不成立时，执行的语句\neg:\nmsg=1\nif msg==0 :\n    print(\"helloworld\")\nelse:\n    print(\"你好\")\neg:\nif 1 < 2 :\n    print(\"helloworld\")\n```\n3. ### if...elif...else\n```Python\nif 条件1:\n    条件1成立，执行语句\nelif 条件2:\n    条件2成立，执行语句\nelse:\n    当所有条件都不成立时，执行的语句\neg:\nmsg=10\nif 0 <msg<3 :\n    print(\"helloworld\")\nelif 3<= msg <=10 :  #在Python中，允许这样进行左右判断\n    print(\"你好\")\nelse:\n    print(msg)\n```\n\n4. pass关键字\n```Python\n# pass关键字在Python中没有意思，只是用来占位，保证代码的完整性\neg:\nif 1 < 2 :\n    pass   # pass无意义，保证代码完整性\n```\n5. ### if语句注意点\n```Python\n1.区间判断\n在Python中可以进行连写判断,如 0<=msg<=10\n2.隐式类型转换\nif后面需要一个bool类型的值，若不是bool类型的值，则会自动转换\neg：\nif 1 :\n    print(\"你好\") # 1会自动转换成bool类型的值true\n3.三元表达式(对if...else的简写)\nx=num1 if num1 > num2 else num2\neg:\nx=1 if 1 < 2 else 2 \nprint(x)   # 打印出的结果为1\n4. 在Python中不支持switch...case...\n5. 在Python中使用强制缩进来表示语句之间的结构\n```\n\n## 循环语句\n1. ### while循环\n```Python\nwhile 判断条件:\n    条件成立时,执行的语句\neg:\nwhile 2<3:\n    print(\"hello world\")\n```\n2. ### for循环\n```Python\nfor ele in iterable:\n    执行语句\n#这个和别的语言有所区别,对于计算数的时候一般用range\nfor i in range(0,5):\n    print(i) # 打印结果为0,1,2,3,4\n```\n3. ### for...in循环\n```Python\n# for...in循环的本质是不断的调用next方法查找下一个数据\nfor ele in iterable:\n    执行语句\neg:\nfor i in range(1,5):\n    print(\"aaa\")\n```\n4. ### for...else循环\n```Python\nfor ele in iterable:\n    执行语句\n    if 条件判断:\n        break   # 若break被执行，则退出for...each循环，each不会被执行\nelse:\n    执行语句 # 当for语句执行完后且没有被break,则最后再执行each语句\neg:\nfor i in range(1,5):\n    print(\"aaa\")\n    if i==3:\n        break\nelse:   # 当for里面break被执行，each就不会被执行\n    print(\"111\")\n```\n5. ### break和continue\n```Python\nbreak:终止本层循环\ncontinue:终止本次循环\n```\n6. ### 循环语句注意事项\n```Python\n1. Python中没有i++或i--,只能i+=1\n2. 常用range内置类生成一个整数区间进行循环\n3. range生成的整数区间以前一个数开始，以后一个数的前一个整数结束\n4. in后面是一个可迭代的对象,目前接触到的接迭代的对象:字符串,列表,字典,元组,集合,range\n5. Python中没有do...while...\n```\n\n","source":"_posts/Python分支语句和循环语句.md","raw":"---\ntitle: Python分支语句和循环语句\ntags:\n  - Python\ncategories: Python\nabbrlink: 49927\ndate: 2021-01-10 10:54:42\n---\n## 分支语句\n1. ### if\n```Python\nif 判断条件:\n    条件成立时，执行的语句\neg:\nif 1 < 2 :\n    print(\"helloworld\")\n```\n2. ### if...else\n```Python\nif 判断条件:\n    条件成立时，执行的语句\nelse\n    当if中的条件不成立时，执行的语句\neg:\nmsg=1\nif msg==0 :\n    print(\"helloworld\")\nelse:\n    print(\"你好\")\neg:\nif 1 < 2 :\n    print(\"helloworld\")\n```\n3. ### if...elif...else\n```Python\nif 条件1:\n    条件1成立，执行语句\nelif 条件2:\n    条件2成立，执行语句\nelse:\n    当所有条件都不成立时，执行的语句\neg:\nmsg=10\nif 0 <msg<3 :\n    print(\"helloworld\")\nelif 3<= msg <=10 :  #在Python中，允许这样进行左右判断\n    print(\"你好\")\nelse:\n    print(msg)\n```\n\n4. pass关键字\n```Python\n# pass关键字在Python中没有意思，只是用来占位，保证代码的完整性\neg:\nif 1 < 2 :\n    pass   # pass无意义，保证代码完整性\n```\n5. ### if语句注意点\n```Python\n1.区间判断\n在Python中可以进行连写判断,如 0<=msg<=10\n2.隐式类型转换\nif后面需要一个bool类型的值，若不是bool类型的值，则会自动转换\neg：\nif 1 :\n    print(\"你好\") # 1会自动转换成bool类型的值true\n3.三元表达式(对if...else的简写)\nx=num1 if num1 > num2 else num2\neg:\nx=1 if 1 < 2 else 2 \nprint(x)   # 打印出的结果为1\n4. 在Python中不支持switch...case...\n5. 在Python中使用强制缩进来表示语句之间的结构\n```\n\n## 循环语句\n1. ### while循环\n```Python\nwhile 判断条件:\n    条件成立时,执行的语句\neg:\nwhile 2<3:\n    print(\"hello world\")\n```\n2. ### for循环\n```Python\nfor ele in iterable:\n    执行语句\n#这个和别的语言有所区别,对于计算数的时候一般用range\nfor i in range(0,5):\n    print(i) # 打印结果为0,1,2,3,4\n```\n3. ### for...in循环\n```Python\n# for...in循环的本质是不断的调用next方法查找下一个数据\nfor ele in iterable:\n    执行语句\neg:\nfor i in range(1,5):\n    print(\"aaa\")\n```\n4. ### for...else循环\n```Python\nfor ele in iterable:\n    执行语句\n    if 条件判断:\n        break   # 若break被执行，则退出for...each循环，each不会被执行\nelse:\n    执行语句 # 当for语句执行完后且没有被break,则最后再执行each语句\neg:\nfor i in range(1,5):\n    print(\"aaa\")\n    if i==3:\n        break\nelse:   # 当for里面break被执行，each就不会被执行\n    print(\"111\")\n```\n5. ### break和continue\n```Python\nbreak:终止本层循环\ncontinue:终止本次循环\n```\n6. ### 循环语句注意事项\n```Python\n1. Python中没有i++或i--,只能i+=1\n2. 常用range内置类生成一个整数区间进行循环\n3. range生成的整数区间以前一个数开始，以后一个数的前一个整数结束\n4. in后面是一个可迭代的对象,目前接触到的接迭代的对象:字符串,列表,字典,元组,集合,range\n5. Python中没有do...while...\n```\n\n","slug":"Python分支语句和循环语句","published":1,"updated":"2021-07-27T14:51:43.511Z","comments":1,"layout":"post","photos":[],"link":"","_id":"ckrmv4jh90017zrfy8k4e8k72","content":"<h2 id=\"分支语句\"><a href=\"#分支语句\" class=\"headerlink\" title=\"分支语句\"></a>分支语句</h2><ol>\n<li><h3 id=\"if\"><a href=\"#if\" class=\"headerlink\" title=\"if\"></a>if</h3><figure class=\"highlight python\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">if</span> 判断条件:</span><br><span class=\"line\">    条件成立时，执行的语句</span><br><span class=\"line\">eg:</span><br><span class=\"line\"><span class=\"keyword\">if</span> <span class=\"number\">1</span> &lt; <span class=\"number\">2</span> :</span><br><span class=\"line\">    print(<span class=\"string\">&quot;helloworld&quot;</span>)</span><br></pre></td></tr></table></figure></li>\n<li><h3 id=\"if…else\"><a href=\"#if…else\" class=\"headerlink\" title=\"if…else\"></a>if…else</h3><figure class=\"highlight python\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">if</span> 判断条件:</span><br><span class=\"line\">    条件成立时，执行的语句</span><br><span class=\"line\"><span class=\"keyword\">else</span></span><br><span class=\"line\">    当<span class=\"keyword\">if</span>中的条件不成立时，执行的语句</span><br><span class=\"line\">eg:</span><br><span class=\"line\">msg=<span class=\"number\">1</span></span><br><span class=\"line\"><span class=\"keyword\">if</span> msg==<span class=\"number\">0</span> :</span><br><span class=\"line\">    print(<span class=\"string\">&quot;helloworld&quot;</span>)</span><br><span class=\"line\"><span class=\"keyword\">else</span>:</span><br><span class=\"line\">    print(<span class=\"string\">&quot;你好&quot;</span>)</span><br><span class=\"line\">eg:</span><br><span class=\"line\"><span class=\"keyword\">if</span> <span class=\"number\">1</span> &lt; <span class=\"number\">2</span> :</span><br><span class=\"line\">    print(<span class=\"string\">&quot;helloworld&quot;</span>)</span><br></pre></td></tr></table></figure></li>\n<li><h3 id=\"if…elif…else\"><a href=\"#if…elif…else\" class=\"headerlink\" title=\"if…elif…else\"></a>if…elif…else</h3><figure class=\"highlight python\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">if</span> 条件<span class=\"number\">1</span>:</span><br><span class=\"line\">    条件<span class=\"number\">1</span>成立，执行语句</span><br><span class=\"line\"><span class=\"keyword\">elif</span> 条件<span class=\"number\">2</span>:</span><br><span class=\"line\">    条件<span class=\"number\">2</span>成立，执行语句</span><br><span class=\"line\"><span class=\"keyword\">else</span>:</span><br><span class=\"line\">    当所有条件都不成立时，执行的语句</span><br><span class=\"line\">eg:</span><br><span class=\"line\">msg=<span class=\"number\">10</span></span><br><span class=\"line\"><span class=\"keyword\">if</span> <span class=\"number\">0</span> &lt;msg&lt;<span class=\"number\">3</span> :</span><br><span class=\"line\">    print(<span class=\"string\">&quot;helloworld&quot;</span>)</span><br><span class=\"line\"><span class=\"keyword\">elif</span> <span class=\"number\">3</span>&lt;= msg &lt;=<span class=\"number\">10</span> :  <span class=\"comment\">#在Python中，允许这样进行左右判断</span></span><br><span class=\"line\">    print(<span class=\"string\">&quot;你好&quot;</span>)</span><br><span class=\"line\"><span class=\"keyword\">else</span>:</span><br><span class=\"line\">    print(msg)</span><br></pre></td></tr></table></figure>\n</li>\n<li><p>pass关键字</p>\n<figure class=\"highlight python\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\"># pass关键字在Python中没有意思，只是用来占位，保证代码的完整性</span></span><br><span class=\"line\">eg:</span><br><span class=\"line\"><span class=\"keyword\">if</span> <span class=\"number\">1</span> &lt; <span class=\"number\">2</span> :</span><br><span class=\"line\">    <span class=\"keyword\">pass</span>   <span class=\"comment\"># pass无意义，保证代码完整性</span></span><br></pre></td></tr></table></figure></li>\n<li><h3 id=\"if语句注意点\"><a href=\"#if语句注意点\" class=\"headerlink\" title=\"if语句注意点\"></a>if语句注意点</h3><figure class=\"highlight python\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"number\">1.</span>区间判断</span><br><span class=\"line\">在Python中可以进行连写判断,如 <span class=\"number\">0</span>&lt;=msg&lt;=<span class=\"number\">10</span></span><br><span class=\"line\"><span class=\"number\">2.</span>隐式类型转换</span><br><span class=\"line\"><span class=\"keyword\">if</span>后面需要一个<span class=\"built_in\">bool</span>类型的值，若不是<span class=\"built_in\">bool</span>类型的值，则会自动转换</span><br><span class=\"line\">eg：</span><br><span class=\"line\"><span class=\"keyword\">if</span> <span class=\"number\">1</span> :</span><br><span class=\"line\">    print(<span class=\"string\">&quot;你好&quot;</span>) <span class=\"comment\"># 1会自动转换成bool类型的值true</span></span><br><span class=\"line\"><span class=\"number\">3.</span>三元表达式(对<span class=\"keyword\">if</span>...<span class=\"keyword\">else</span>的简写)</span><br><span class=\"line\">x=num1 <span class=\"keyword\">if</span> num1 &gt; num2 <span class=\"keyword\">else</span> num2</span><br><span class=\"line\">eg:</span><br><span class=\"line\">x=<span class=\"number\">1</span> <span class=\"keyword\">if</span> <span class=\"number\">1</span> &lt; <span class=\"number\">2</span> <span class=\"keyword\">else</span> <span class=\"number\">2</span> </span><br><span class=\"line\">print(x)   <span class=\"comment\"># 打印出的结果为1</span></span><br><span class=\"line\"><span class=\"number\">4.</span> 在Python中不支持switch...case...</span><br><span class=\"line\"><span class=\"number\">5.</span> 在Python中使用强制缩进来表示语句之间的结构</span><br></pre></td></tr></table></figure>\n\n</li>\n</ol>\n<h2 id=\"循环语句\"><a href=\"#循环语句\" class=\"headerlink\" title=\"循环语句\"></a>循环语句</h2><ol>\n<li><h3 id=\"while循环\"><a href=\"#while循环\" class=\"headerlink\" title=\"while循环\"></a>while循环</h3><figure class=\"highlight python\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">while</span> 判断条件:</span><br><span class=\"line\">    条件成立时,执行的语句</span><br><span class=\"line\">eg:</span><br><span class=\"line\"><span class=\"keyword\">while</span> <span class=\"number\">2</span>&lt;<span class=\"number\">3</span>:</span><br><span class=\"line\">    print(<span class=\"string\">&quot;hello world&quot;</span>)</span><br></pre></td></tr></table></figure></li>\n<li><h3 id=\"for循环\"><a href=\"#for循环\" class=\"headerlink\" title=\"for循环\"></a>for循环</h3><figure class=\"highlight python\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">for</span> ele <span class=\"keyword\">in</span> iterable:</span><br><span class=\"line\">    执行语句</span><br><span class=\"line\"><span class=\"comment\">#这个和别的语言有所区别,对于计算数的时候一般用range</span></span><br><span class=\"line\"><span class=\"keyword\">for</span> i <span class=\"keyword\">in</span> <span class=\"built_in\">range</span>(<span class=\"number\">0</span>,<span class=\"number\">5</span>):</span><br><span class=\"line\">    print(i) <span class=\"comment\"># 打印结果为0,1,2,3,4</span></span><br></pre></td></tr></table></figure></li>\n<li><h3 id=\"for…in循环\"><a href=\"#for…in循环\" class=\"headerlink\" title=\"for…in循环\"></a>for…in循环</h3><figure class=\"highlight python\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\"># for...in循环的本质是不断的调用next方法查找下一个数据</span></span><br><span class=\"line\"><span class=\"keyword\">for</span> ele <span class=\"keyword\">in</span> iterable:</span><br><span class=\"line\">    执行语句</span><br><span class=\"line\">eg:</span><br><span class=\"line\"><span class=\"keyword\">for</span> i <span class=\"keyword\">in</span> <span class=\"built_in\">range</span>(<span class=\"number\">1</span>,<span class=\"number\">5</span>):</span><br><span class=\"line\">    print(<span class=\"string\">&quot;aaa&quot;</span>)</span><br></pre></td></tr></table></figure></li>\n<li><h3 id=\"for…else循环\"><a href=\"#for…else循环\" class=\"headerlink\" title=\"for…else循环\"></a>for…else循环</h3><figure class=\"highlight python\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">for</span> ele <span class=\"keyword\">in</span> iterable:</span><br><span class=\"line\">    执行语句</span><br><span class=\"line\">    <span class=\"keyword\">if</span> 条件判断:</span><br><span class=\"line\">        <span class=\"keyword\">break</span>   <span class=\"comment\"># 若break被执行，则退出for...each循环，each不会被执行</span></span><br><span class=\"line\"><span class=\"keyword\">else</span>:</span><br><span class=\"line\">    执行语句 <span class=\"comment\"># 当for语句执行完后且没有被break,则最后再执行each语句</span></span><br><span class=\"line\">eg:</span><br><span class=\"line\"><span class=\"keyword\">for</span> i <span class=\"keyword\">in</span> <span class=\"built_in\">range</span>(<span class=\"number\">1</span>,<span class=\"number\">5</span>):</span><br><span class=\"line\">    print(<span class=\"string\">&quot;aaa&quot;</span>)</span><br><span class=\"line\">    <span class=\"keyword\">if</span> i==<span class=\"number\">3</span>:</span><br><span class=\"line\">        <span class=\"keyword\">break</span></span><br><span class=\"line\"><span class=\"keyword\">else</span>:   <span class=\"comment\"># 当for里面break被执行，each就不会被执行</span></span><br><span class=\"line\">    print(<span class=\"string\">&quot;111&quot;</span>)</span><br></pre></td></tr></table></figure></li>\n<li><h3 id=\"break和continue\"><a href=\"#break和continue\" class=\"headerlink\" title=\"break和continue\"></a>break和continue</h3><figure class=\"highlight python\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">break</span>:终止本层循环</span><br><span class=\"line\"><span class=\"keyword\">continue</span>:终止本次循环</span><br></pre></td></tr></table></figure></li>\n<li><h3 id=\"循环语句注意事项\"><a href=\"#循环语句注意事项\" class=\"headerlink\" title=\"循环语句注意事项\"></a>循环语句注意事项</h3><figure class=\"highlight python\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"number\">1.</span> Python中没有i++或i--,只能i+=<span class=\"number\">1</span></span><br><span class=\"line\"><span class=\"number\">2.</span> 常用<span class=\"built_in\">range</span>内置类生成一个整数区间进行循环</span><br><span class=\"line\"><span class=\"number\">3.</span> <span class=\"built_in\">range</span>生成的整数区间以前一个数开始，以后一个数的前一个整数结束</span><br><span class=\"line\"><span class=\"number\">4.</span> <span class=\"keyword\">in</span>后面是一个可迭代的对象,目前接触到的接迭代的对象:字符串,列表,字典,元组,集合,<span class=\"built_in\">range</span></span><br><span class=\"line\"><span class=\"number\">5.</span> Python中没有do...<span class=\"keyword\">while</span>...</span><br></pre></td></tr></table></figure>\n\n</li>\n</ol>\n","site":{"data":{}},"length":1590,"excerpt":"","more":"<h2 id=\"分支语句\"><a href=\"#分支语句\" class=\"headerlink\" title=\"分支语句\"></a>分支语句</h2><ol>\n<li><h3 id=\"if\"><a href=\"#if\" class=\"headerlink\" title=\"if\"></a>if</h3><figure class=\"highlight python\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">if</span> 判断条件:</span><br><span class=\"line\">    条件成立时，执行的语句</span><br><span class=\"line\">eg:</span><br><span class=\"line\"><span class=\"keyword\">if</span> <span class=\"number\">1</span> &lt; <span class=\"number\">2</span> :</span><br><span class=\"line\">    print(<span class=\"string\">&quot;helloworld&quot;</span>)</span><br></pre></td></tr></table></figure></li>\n<li><h3 id=\"if…else\"><a href=\"#if…else\" class=\"headerlink\" title=\"if…else\"></a>if…else</h3><figure class=\"highlight python\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">if</span> 判断条件:</span><br><span class=\"line\">    条件成立时，执行的语句</span><br><span class=\"line\"><span class=\"keyword\">else</span></span><br><span class=\"line\">    当<span class=\"keyword\">if</span>中的条件不成立时，执行的语句</span><br><span class=\"line\">eg:</span><br><span class=\"line\">msg=<span class=\"number\">1</span></span><br><span class=\"line\"><span class=\"keyword\">if</span> msg==<span class=\"number\">0</span> :</span><br><span class=\"line\">    print(<span class=\"string\">&quot;helloworld&quot;</span>)</span><br><span class=\"line\"><span class=\"keyword\">else</span>:</span><br><span class=\"line\">    print(<span class=\"string\">&quot;你好&quot;</span>)</span><br><span class=\"line\">eg:</span><br><span class=\"line\"><span class=\"keyword\">if</span> <span class=\"number\">1</span> &lt; <span class=\"number\">2</span> :</span><br><span class=\"line\">    print(<span class=\"string\">&quot;helloworld&quot;</span>)</span><br></pre></td></tr></table></figure></li>\n<li><h3 id=\"if…elif…else\"><a href=\"#if…elif…else\" class=\"headerlink\" title=\"if…elif…else\"></a>if…elif…else</h3><figure class=\"highlight python\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">if</span> 条件<span class=\"number\">1</span>:</span><br><span class=\"line\">    条件<span class=\"number\">1</span>成立，执行语句</span><br><span class=\"line\"><span class=\"keyword\">elif</span> 条件<span class=\"number\">2</span>:</span><br><span class=\"line\">    条件<span class=\"number\">2</span>成立，执行语句</span><br><span class=\"line\"><span class=\"keyword\">else</span>:</span><br><span class=\"line\">    当所有条件都不成立时，执行的语句</span><br><span class=\"line\">eg:</span><br><span class=\"line\">msg=<span class=\"number\">10</span></span><br><span class=\"line\"><span class=\"keyword\">if</span> <span class=\"number\">0</span> &lt;msg&lt;<span class=\"number\">3</span> :</span><br><span class=\"line\">    print(<span class=\"string\">&quot;helloworld&quot;</span>)</span><br><span class=\"line\"><span class=\"keyword\">elif</span> <span class=\"number\">3</span>&lt;= msg &lt;=<span class=\"number\">10</span> :  <span class=\"comment\">#在Python中，允许这样进行左右判断</span></span><br><span class=\"line\">    print(<span class=\"string\">&quot;你好&quot;</span>)</span><br><span class=\"line\"><span class=\"keyword\">else</span>:</span><br><span class=\"line\">    print(msg)</span><br></pre></td></tr></table></figure>\n</li>\n<li><p>pass关键字</p>\n<figure class=\"highlight python\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\"># pass关键字在Python中没有意思，只是用来占位，保证代码的完整性</span></span><br><span class=\"line\">eg:</span><br><span class=\"line\"><span class=\"keyword\">if</span> <span class=\"number\">1</span> &lt; <span class=\"number\">2</span> :</span><br><span class=\"line\">    <span class=\"keyword\">pass</span>   <span class=\"comment\"># pass无意义，保证代码完整性</span></span><br></pre></td></tr></table></figure></li>\n<li><h3 id=\"if语句注意点\"><a href=\"#if语句注意点\" class=\"headerlink\" title=\"if语句注意点\"></a>if语句注意点</h3><figure class=\"highlight python\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"number\">1.</span>区间判断</span><br><span class=\"line\">在Python中可以进行连写判断,如 <span class=\"number\">0</span>&lt;=msg&lt;=<span class=\"number\">10</span></span><br><span class=\"line\"><span class=\"number\">2.</span>隐式类型转换</span><br><span class=\"line\"><span class=\"keyword\">if</span>后面需要一个<span class=\"built_in\">bool</span>类型的值，若不是<span class=\"built_in\">bool</span>类型的值，则会自动转换</span><br><span class=\"line\">eg：</span><br><span class=\"line\"><span class=\"keyword\">if</span> <span class=\"number\">1</span> :</span><br><span class=\"line\">    print(<span class=\"string\">&quot;你好&quot;</span>) <span class=\"comment\"># 1会自动转换成bool类型的值true</span></span><br><span class=\"line\"><span class=\"number\">3.</span>三元表达式(对<span class=\"keyword\">if</span>...<span class=\"keyword\">else</span>的简写)</span><br><span class=\"line\">x=num1 <span class=\"keyword\">if</span> num1 &gt; num2 <span class=\"keyword\">else</span> num2</span><br><span class=\"line\">eg:</span><br><span class=\"line\">x=<span class=\"number\">1</span> <span class=\"keyword\">if</span> <span class=\"number\">1</span> &lt; <span class=\"number\">2</span> <span class=\"keyword\">else</span> <span class=\"number\">2</span> </span><br><span class=\"line\">print(x)   <span class=\"comment\"># 打印出的结果为1</span></span><br><span class=\"line\"><span class=\"number\">4.</span> 在Python中不支持switch...case...</span><br><span class=\"line\"><span class=\"number\">5.</span> 在Python中使用强制缩进来表示语句之间的结构</span><br></pre></td></tr></table></figure>\n\n</li>\n</ol>\n<h2 id=\"循环语句\"><a href=\"#循环语句\" class=\"headerlink\" title=\"循环语句\"></a>循环语句</h2><ol>\n<li><h3 id=\"while循环\"><a href=\"#while循环\" class=\"headerlink\" title=\"while循环\"></a>while循环</h3><figure class=\"highlight python\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">while</span> 判断条件:</span><br><span class=\"line\">    条件成立时,执行的语句</span><br><span class=\"line\">eg:</span><br><span class=\"line\"><span class=\"keyword\">while</span> <span class=\"number\">2</span>&lt;<span class=\"number\">3</span>:</span><br><span class=\"line\">    print(<span class=\"string\">&quot;hello world&quot;</span>)</span><br></pre></td></tr></table></figure></li>\n<li><h3 id=\"for循环\"><a href=\"#for循环\" class=\"headerlink\" title=\"for循环\"></a>for循环</h3><figure class=\"highlight python\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">for</span> ele <span class=\"keyword\">in</span> iterable:</span><br><span class=\"line\">    执行语句</span><br><span class=\"line\"><span class=\"comment\">#这个和别的语言有所区别,对于计算数的时候一般用range</span></span><br><span class=\"line\"><span class=\"keyword\">for</span> i <span class=\"keyword\">in</span> <span class=\"built_in\">range</span>(<span class=\"number\">0</span>,<span class=\"number\">5</span>):</span><br><span class=\"line\">    print(i) <span class=\"comment\"># 打印结果为0,1,2,3,4</span></span><br></pre></td></tr></table></figure></li>\n<li><h3 id=\"for…in循环\"><a href=\"#for…in循环\" class=\"headerlink\" title=\"for…in循环\"></a>for…in循环</h3><figure class=\"highlight python\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\"># for...in循环的本质是不断的调用next方法查找下一个数据</span></span><br><span class=\"line\"><span class=\"keyword\">for</span> ele <span class=\"keyword\">in</span> iterable:</span><br><span class=\"line\">    执行语句</span><br><span class=\"line\">eg:</span><br><span class=\"line\"><span class=\"keyword\">for</span> i <span class=\"keyword\">in</span> <span class=\"built_in\">range</span>(<span class=\"number\">1</span>,<span class=\"number\">5</span>):</span><br><span class=\"line\">    print(<span class=\"string\">&quot;aaa&quot;</span>)</span><br></pre></td></tr></table></figure></li>\n<li><h3 id=\"for…else循环\"><a href=\"#for…else循环\" class=\"headerlink\" title=\"for…else循环\"></a>for…else循环</h3><figure class=\"highlight python\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">for</span> ele <span class=\"keyword\">in</span> iterable:</span><br><span class=\"line\">    执行语句</span><br><span class=\"line\">    <span class=\"keyword\">if</span> 条件判断:</span><br><span class=\"line\">        <span class=\"keyword\">break</span>   <span class=\"comment\"># 若break被执行，则退出for...each循环，each不会被执行</span></span><br><span class=\"line\"><span class=\"keyword\">else</span>:</span><br><span class=\"line\">    执行语句 <span class=\"comment\"># 当for语句执行完后且没有被break,则最后再执行each语句</span></span><br><span class=\"line\">eg:</span><br><span class=\"line\"><span class=\"keyword\">for</span> i <span class=\"keyword\">in</span> <span class=\"built_in\">range</span>(<span class=\"number\">1</span>,<span class=\"number\">5</span>):</span><br><span class=\"line\">    print(<span class=\"string\">&quot;aaa&quot;</span>)</span><br><span class=\"line\">    <span class=\"keyword\">if</span> i==<span class=\"number\">3</span>:</span><br><span class=\"line\">        <span class=\"keyword\">break</span></span><br><span class=\"line\"><span class=\"keyword\">else</span>:   <span class=\"comment\"># 当for里面break被执行，each就不会被执行</span></span><br><span class=\"line\">    print(<span class=\"string\">&quot;111&quot;</span>)</span><br></pre></td></tr></table></figure></li>\n<li><h3 id=\"break和continue\"><a href=\"#break和continue\" class=\"headerlink\" title=\"break和continue\"></a>break和continue</h3><figure class=\"highlight python\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">break</span>:终止本层循环</span><br><span class=\"line\"><span class=\"keyword\">continue</span>:终止本次循环</span><br></pre></td></tr></table></figure></li>\n<li><h3 id=\"循环语句注意事项\"><a href=\"#循环语句注意事项\" class=\"headerlink\" title=\"循环语句注意事项\"></a>循环语句注意事项</h3><figure class=\"highlight python\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"number\">1.</span> Python中没有i++或i--,只能i+=<span class=\"number\">1</span></span><br><span class=\"line\"><span class=\"number\">2.</span> 常用<span class=\"built_in\">range</span>内置类生成一个整数区间进行循环</span><br><span class=\"line\"><span class=\"number\">3.</span> <span class=\"built_in\">range</span>生成的整数区间以前一个数开始，以后一个数的前一个整数结束</span><br><span class=\"line\"><span class=\"number\">4.</span> <span class=\"keyword\">in</span>后面是一个可迭代的对象,目前接触到的接迭代的对象:字符串,列表,字典,元组,集合,<span class=\"built_in\">range</span></span><br><span class=\"line\"><span class=\"number\">5.</span> Python中没有do...<span class=\"keyword\">while</span>...</span><br></pre></td></tr></table></figure>\n\n</li>\n</ol>\n"},{"title":"Python可变数据类型和不可变数据类型","abbrlink":15278,"date":"2021-01-12T05:01:08.000Z","_content":"Python中的数据分为可变数据类型和不可变数据类型\n### 可变数据类型\n定义：如果修改值，内存地址不会发生变化\n可变数据类型:列表,字典,集合\n\n### 不可变数据类型\n定义：如果修改值，内存地址会发生变化\n可变数据类型:字符串,数字,元组\n\n### 看图理解\n![](https://gitee.com/light_trap/for-picgo/raw/master/image/20210111164602.png)\n![](https://gitee.com/light_trap/for-picgo/raw/master/image/20210111165444.png)\n","source":"_posts/Python可变数据类型和不可变数据类型.md","raw":"---\ntitle: Python可变数据类型和不可变数据类型\ntags:\n  - Python\ncategories: Python\nabbrlink: 15278\ndate: 2021-01-12 13:01:08\n---\nPython中的数据分为可变数据类型和不可变数据类型\n### 可变数据类型\n定义：如果修改值，内存地址不会发生变化\n可变数据类型:列表,字典,集合\n\n### 不可变数据类型\n定义：如果修改值，内存地址会发生变化\n可变数据类型:字符串,数字,元组\n\n### 看图理解\n![](https://gitee.com/light_trap/for-picgo/raw/master/image/20210111164602.png)\n![](https://gitee.com/light_trap/for-picgo/raw/master/image/20210111165444.png)\n","slug":"Python可变数据类型和不可变数据类型","published":1,"updated":"2021-07-27T14:51:43.512Z","comments":1,"layout":"post","photos":[],"link":"","_id":"ckrmv4jha0019zrfy66pd2skb","content":"<p>Python中的数据分为可变数据类型和不可变数据类型</p>\n<h3 id=\"可变数据类型\"><a href=\"#可变数据类型\" class=\"headerlink\" title=\"可变数据类型\"></a>可变数据类型</h3><p>定义：如果修改值，内存地址不会发生变化<br>可变数据类型:列表,字典,集合</p>\n<h3 id=\"不可变数据类型\"><a href=\"#不可变数据类型\" class=\"headerlink\" title=\"不可变数据类型\"></a>不可变数据类型</h3><p>定义：如果修改值，内存地址会发生变化<br>可变数据类型:字符串,数字,元组</p>\n<h3 id=\"看图理解\"><a href=\"#看图理解\" class=\"headerlink\" title=\"看图理解\"></a>看图理解</h3><p><img src=\"https://gitee.com/light_trap/for-picgo/raw/master/image/20210111164602.png\"><br><img src=\"https://gitee.com/light_trap/for-picgo/raw/master/image/20210111165444.png\"></p>\n","site":{"data":{}},"length":111,"excerpt":"","more":"<p>Python中的数据分为可变数据类型和不可变数据类型</p>\n<h3 id=\"可变数据类型\"><a href=\"#可变数据类型\" class=\"headerlink\" title=\"可变数据类型\"></a>可变数据类型</h3><p>定义：如果修改值，内存地址不会发生变化<br>可变数据类型:列表,字典,集合</p>\n<h3 id=\"不可变数据类型\"><a href=\"#不可变数据类型\" class=\"headerlink\" title=\"不可变数据类型\"></a>不可变数据类型</h3><p>定义：如果修改值，内存地址会发生变化<br>可变数据类型:字符串,数字,元组</p>\n<h3 id=\"看图理解\"><a href=\"#看图理解\" class=\"headerlink\" title=\"看图理解\"></a>看图理解</h3><p><img src=\"https://gitee.com/light_trap/for-picgo/raw/master/image/20210111164602.png\"><br><img src=\"https://gitee.com/light_trap/for-picgo/raw/master/image/20210111165444.png\"></p>\n"},{"title":"Python基本语法","abbrlink":24577,"date":"2021-01-08T02:55:56.000Z","_content":"## Python基本语法\n1. 注释\n```python\n# 单行注释\n# ptint(\"Hello Python\")  //用# 或ctrl+/\n```\n```python\n# 多行注释\n# print(\"你好\")\n# print(\"您好\") //先选中，然后用Ctrl+/\n```\n2. 变量\n```python\n# 变量直接赋值\nmsg=\"abc\"\n``` \n3. input输入\n```python\nmsg=input(\"请输入\")\n# msg为变量名\n# input括号里为输入提示信息\n```\n4. del删除\n```python\ndel(msg)\n# msg：删除的变量名\n```\n5. 标识符规则\n* 由字母，数字，下划线组成\n* 开头不能是数字\n* 不能是Python关键字\n6. 数据类型\n* str(字符串)\n* Number(数字)\n   - 整数\n   - 浮点数\n   - 复数`msg=1+2j`\n* bool(布尔值)\n* None(空值)\n* list(列表)\n* tuple(元组)\n* dict(字典)\n* set(集合)\n```python\n#使用type获取数据类型\nmsg=123\nprint(type(a))\n```\n7. 数据运算符的分类(与C语言一直的省略)\n```python\n# 求幂 **\nprint(2**3) # 2的3次幂\n# 取整 //\nprint(12//5) # 12对5取整\n```\n8. 符合运算符(写法与C一致)\n```python\na=a+b\n等价于\na+=b\n```\n9. 关系运算符(与C一致)\n```python\n== != > < >= <=\n```\n10. 常用位运算符(将数字转化为二进制进行运算)\n```python\n& # 按位与\n| # 按位或\n^ # 按位异或\n~ # 按位取反\n<< # 左移位\n>> # 右移位\n```\n11. print\n```python\nprint(a,b,c); \n# 可以打印一个或多个变量或字符串\nprint(value1,value2,value3,,sep=' ',end='\\n')\n# sep值用来设定输出时多个值之间的连接符，默认是空格\n# end值用来设定输出结束时的结束符，默认是换行\n# sep,end两者都是以键值对的形式出现\n```\n12. input\n```python\nmsg=input(\"提示信息\") \n# input括号里保存的是提示信息\n# 输入的信息会保存在变量msg\n# 无论输入的是什么，msg的数据类型都为str\n```","source":"_posts/Python基本语法.md","raw":"---\ntitle: Python基本语法\ntags:\n  - Python\ncategories: Python\nabbrlink: 24577\ndate: 2021-01-08 10:55:56\n---\n## Python基本语法\n1. 注释\n```python\n# 单行注释\n# ptint(\"Hello Python\")  //用# 或ctrl+/\n```\n```python\n# 多行注释\n# print(\"你好\")\n# print(\"您好\") //先选中，然后用Ctrl+/\n```\n2. 变量\n```python\n# 变量直接赋值\nmsg=\"abc\"\n``` \n3. input输入\n```python\nmsg=input(\"请输入\")\n# msg为变量名\n# input括号里为输入提示信息\n```\n4. del删除\n```python\ndel(msg)\n# msg：删除的变量名\n```\n5. 标识符规则\n* 由字母，数字，下划线组成\n* 开头不能是数字\n* 不能是Python关键字\n6. 数据类型\n* str(字符串)\n* Number(数字)\n   - 整数\n   - 浮点数\n   - 复数`msg=1+2j`\n* bool(布尔值)\n* None(空值)\n* list(列表)\n* tuple(元组)\n* dict(字典)\n* set(集合)\n```python\n#使用type获取数据类型\nmsg=123\nprint(type(a))\n```\n7. 数据运算符的分类(与C语言一直的省略)\n```python\n# 求幂 **\nprint(2**3) # 2的3次幂\n# 取整 //\nprint(12//5) # 12对5取整\n```\n8. 符合运算符(写法与C一致)\n```python\na=a+b\n等价于\na+=b\n```\n9. 关系运算符(与C一致)\n```python\n== != > < >= <=\n```\n10. 常用位运算符(将数字转化为二进制进行运算)\n```python\n& # 按位与\n| # 按位或\n^ # 按位异或\n~ # 按位取反\n<< # 左移位\n>> # 右移位\n```\n11. print\n```python\nprint(a,b,c); \n# 可以打印一个或多个变量或字符串\nprint(value1,value2,value3,,sep=' ',end='\\n')\n# sep值用来设定输出时多个值之间的连接符，默认是空格\n# end值用来设定输出结束时的结束符，默认是换行\n# sep,end两者都是以键值对的形式出现\n```\n12. input\n```python\nmsg=input(\"提示信息\") \n# input括号里保存的是提示信息\n# 输入的信息会保存在变量msg\n# 无论输入的是什么，msg的数据类型都为str\n```","slug":"Python基本语法","published":1,"updated":"2021-07-27T14:51:43.513Z","comments":1,"layout":"post","photos":[],"link":"","_id":"ckrmv4jhf001dzrfybric0rva","content":"<h2 id=\"Python基本语法\"><a href=\"#Python基本语法\" class=\"headerlink\" title=\"Python基本语法\"></a>Python基本语法</h2><ol>\n<li>注释<figure class=\"highlight python\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\"># 单行注释</span></span><br><span class=\"line\"><span class=\"comment\"># ptint(&quot;Hello Python&quot;)  //用# 或ctrl+/</span></span><br></pre></td></tr></table></figure>\n<figure class=\"highlight python\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\"># 多行注释</span></span><br><span class=\"line\"><span class=\"comment\"># print(&quot;你好&quot;)</span></span><br><span class=\"line\"><span class=\"comment\"># print(&quot;您好&quot;) //先选中，然后用Ctrl+/</span></span><br></pre></td></tr></table></figure></li>\n<li>变量<figure class=\"highlight python\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\"># 变量直接赋值</span></span><br><span class=\"line\">msg=<span class=\"string\">&quot;abc&quot;</span></span><br></pre></td></tr></table></figure></li>\n<li>input输入<figure class=\"highlight python\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">msg=<span class=\"built_in\">input</span>(<span class=\"string\">&quot;请输入&quot;</span>)</span><br><span class=\"line\"><span class=\"comment\"># msg为变量名</span></span><br><span class=\"line\"><span class=\"comment\"># input括号里为输入提示信息</span></span><br></pre></td></tr></table></figure></li>\n<li>del删除<figure class=\"highlight python\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">del</span>(msg)</span><br><span class=\"line\"><span class=\"comment\"># msg：删除的变量名</span></span><br></pre></td></tr></table></figure></li>\n<li>标识符规则</li>\n</ol>\n<ul>\n<li>由字母，数字，下划线组成</li>\n<li>开头不能是数字</li>\n<li>不能是Python关键字</li>\n</ul>\n<ol start=\"6\">\n<li>数据类型</li>\n</ol>\n<ul>\n<li>str(字符串)</li>\n<li>Number(数字)<ul>\n<li>整数</li>\n<li>浮点数</li>\n<li>复数<code>msg=1+2j</code></li>\n</ul>\n</li>\n<li>bool(布尔值)</li>\n<li>None(空值)</li>\n<li>list(列表)</li>\n<li>tuple(元组)</li>\n<li>dict(字典)</li>\n<li>set(集合)<figure class=\"highlight python\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">#使用type获取数据类型</span></span><br><span class=\"line\">msg=<span class=\"number\">123</span></span><br><span class=\"line\">print(<span class=\"built_in\">type</span>(a))</span><br></pre></td></tr></table></figure></li>\n</ul>\n<ol start=\"7\">\n<li>数据运算符的分类(与C语言一直的省略)<figure class=\"highlight python\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\"># 求幂 **</span></span><br><span class=\"line\">print(<span class=\"number\">2</span>**<span class=\"number\">3</span>) <span class=\"comment\"># 2的3次幂</span></span><br><span class=\"line\"><span class=\"comment\"># 取整 //</span></span><br><span class=\"line\">print(<span class=\"number\">12</span>//<span class=\"number\">5</span>) <span class=\"comment\"># 12对5取整</span></span><br></pre></td></tr></table></figure></li>\n<li>符合运算符(写法与C一致)<figure class=\"highlight python\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">a=a+b</span><br><span class=\"line\">等价于</span><br><span class=\"line\">a+=b</span><br></pre></td></tr></table></figure></li>\n<li>关系运算符(与C一致)<figure class=\"highlight python\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">== != &gt; &lt; &gt;= &lt;=</span><br></pre></td></tr></table></figure></li>\n<li>常用位运算符(将数字转化为二进制进行运算)<figure class=\"highlight python\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">&amp; <span class=\"comment\"># 按位与</span></span><br><span class=\"line\">| <span class=\"comment\"># 按位或</span></span><br><span class=\"line\">^ <span class=\"comment\"># 按位异或</span></span><br><span class=\"line\">~ <span class=\"comment\"># 按位取反</span></span><br><span class=\"line\">&lt;&lt; <span class=\"comment\"># 左移位</span></span><br><span class=\"line\">&gt;&gt; <span class=\"comment\"># 右移位</span></span><br></pre></td></tr></table></figure></li>\n<li>print<figure class=\"highlight python\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">print(a,b,c); </span><br><span class=\"line\"><span class=\"comment\"># 可以打印一个或多个变量或字符串</span></span><br><span class=\"line\">print(value1,value2,value3,,sep=<span class=\"string\">&#x27; &#x27;</span>,end=<span class=\"string\">&#x27;\\n&#x27;</span>)</span><br><span class=\"line\"><span class=\"comment\"># sep值用来设定输出时多个值之间的连接符，默认是空格</span></span><br><span class=\"line\"><span class=\"comment\"># end值用来设定输出结束时的结束符，默认是换行</span></span><br><span class=\"line\"><span class=\"comment\"># sep,end两者都是以键值对的形式出现</span></span><br></pre></td></tr></table></figure></li>\n<li>input<figure class=\"highlight python\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">msg=<span class=\"built_in\">input</span>(<span class=\"string\">&quot;提示信息&quot;</span>) </span><br><span class=\"line\"><span class=\"comment\"># input括号里保存的是提示信息</span></span><br><span class=\"line\"><span class=\"comment\"># 输入的信息会保存在变量msg</span></span><br><span class=\"line\"><span class=\"comment\"># 无论输入的是什么，msg的数据类型都为str</span></span><br></pre></td></tr></table></figure></li>\n</ol>\n","site":{"data":{}},"length":878,"excerpt":"","more":"<h2 id=\"Python基本语法\"><a href=\"#Python基本语法\" class=\"headerlink\" title=\"Python基本语法\"></a>Python基本语法</h2><ol>\n<li>注释<figure class=\"highlight python\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\"># 单行注释</span></span><br><span class=\"line\"><span class=\"comment\"># ptint(&quot;Hello Python&quot;)  //用# 或ctrl+/</span></span><br></pre></td></tr></table></figure>\n<figure class=\"highlight python\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\"># 多行注释</span></span><br><span class=\"line\"><span class=\"comment\"># print(&quot;你好&quot;)</span></span><br><span class=\"line\"><span class=\"comment\"># print(&quot;您好&quot;) //先选中，然后用Ctrl+/</span></span><br></pre></td></tr></table></figure></li>\n<li>变量<figure class=\"highlight python\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\"># 变量直接赋值</span></span><br><span class=\"line\">msg=<span class=\"string\">&quot;abc&quot;</span></span><br></pre></td></tr></table></figure></li>\n<li>input输入<figure class=\"highlight python\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">msg=<span class=\"built_in\">input</span>(<span class=\"string\">&quot;请输入&quot;</span>)</span><br><span class=\"line\"><span class=\"comment\"># msg为变量名</span></span><br><span class=\"line\"><span class=\"comment\"># input括号里为输入提示信息</span></span><br></pre></td></tr></table></figure></li>\n<li>del删除<figure class=\"highlight python\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">del</span>(msg)</span><br><span class=\"line\"><span class=\"comment\"># msg：删除的变量名</span></span><br></pre></td></tr></table></figure></li>\n<li>标识符规则</li>\n</ol>\n<ul>\n<li>由字母，数字，下划线组成</li>\n<li>开头不能是数字</li>\n<li>不能是Python关键字</li>\n</ul>\n<ol start=\"6\">\n<li>数据类型</li>\n</ol>\n<ul>\n<li>str(字符串)</li>\n<li>Number(数字)<ul>\n<li>整数</li>\n<li>浮点数</li>\n<li>复数<code>msg=1+2j</code></li>\n</ul>\n</li>\n<li>bool(布尔值)</li>\n<li>None(空值)</li>\n<li>list(列表)</li>\n<li>tuple(元组)</li>\n<li>dict(字典)</li>\n<li>set(集合)<figure class=\"highlight python\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">#使用type获取数据类型</span></span><br><span class=\"line\">msg=<span class=\"number\">123</span></span><br><span class=\"line\">print(<span class=\"built_in\">type</span>(a))</span><br></pre></td></tr></table></figure></li>\n</ul>\n<ol start=\"7\">\n<li>数据运算符的分类(与C语言一直的省略)<figure class=\"highlight python\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\"># 求幂 **</span></span><br><span class=\"line\">print(<span class=\"number\">2</span>**<span class=\"number\">3</span>) <span class=\"comment\"># 2的3次幂</span></span><br><span class=\"line\"><span class=\"comment\"># 取整 //</span></span><br><span class=\"line\">print(<span class=\"number\">12</span>//<span class=\"number\">5</span>) <span class=\"comment\"># 12对5取整</span></span><br></pre></td></tr></table></figure></li>\n<li>符合运算符(写法与C一致)<figure class=\"highlight python\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">a=a+b</span><br><span class=\"line\">等价于</span><br><span class=\"line\">a+=b</span><br></pre></td></tr></table></figure></li>\n<li>关系运算符(与C一致)<figure class=\"highlight python\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">== != &gt; &lt; &gt;= &lt;=</span><br></pre></td></tr></table></figure></li>\n<li>常用位运算符(将数字转化为二进制进行运算)<figure class=\"highlight python\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">&amp; <span class=\"comment\"># 按位与</span></span><br><span class=\"line\">| <span class=\"comment\"># 按位或</span></span><br><span class=\"line\">^ <span class=\"comment\"># 按位异或</span></span><br><span class=\"line\">~ <span class=\"comment\"># 按位取反</span></span><br><span class=\"line\">&lt;&lt; <span class=\"comment\"># 左移位</span></span><br><span class=\"line\">&gt;&gt; <span class=\"comment\"># 右移位</span></span><br></pre></td></tr></table></figure></li>\n<li>print<figure class=\"highlight python\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">print(a,b,c); </span><br><span class=\"line\"><span class=\"comment\"># 可以打印一个或多个变量或字符串</span></span><br><span class=\"line\">print(value1,value2,value3,,sep=<span class=\"string\">&#x27; &#x27;</span>,end=<span class=\"string\">&#x27;\\n&#x27;</span>)</span><br><span class=\"line\"><span class=\"comment\"># sep值用来设定输出时多个值之间的连接符，默认是空格</span></span><br><span class=\"line\"><span class=\"comment\"># end值用来设定输出结束时的结束符，默认是换行</span></span><br><span class=\"line\"><span class=\"comment\"># sep,end两者都是以键值对的形式出现</span></span><br></pre></td></tr></table></figure></li>\n<li>input<figure class=\"highlight python\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">msg=<span class=\"built_in\">input</span>(<span class=\"string\">&quot;提示信息&quot;</span>) </span><br><span class=\"line\"><span class=\"comment\"># input括号里保存的是提示信息</span></span><br><span class=\"line\"><span class=\"comment\"># 输入的信息会保存在变量msg</span></span><br><span class=\"line\"><span class=\"comment\"># 无论输入的是什么，msg的数据类型都为str</span></span><br></pre></td></tr></table></figure></li>\n</ol>\n"},{"title":"Python字符串","abbrlink":35224,"date":"2021-01-12T05:32:47.000Z","_content":"## 字符串\n1. ### 单引号和双引号\n```Python\n在Python中可以使用一对单引号或双引号；也可以使用三对单引号或双引号\neg:\n'hello'\n\"hello\"\n'''hello'''\n\"\"\"hello\"\"\"\n\n当字符串里面还有引号时，用单双引号嵌套使用，使表达的意思清晰\neg:\nmsg='xiaoming say\"I am xiaoming\"'\n```\n2. ### 字符串的转义字符\\\n```Python\n# \\' ==> 显示一个普通的单引号\n# \\\" ==> 显示一个普通的双引号\n# \\n ==> 表示一个换行\n# \\t ==> 表示一个制表符\n# \\\\ ==> 表示一个普通的\\\n# r'字符串' ==> 表示原生字符串，\\n等会原生输出，不会表现特殊含义(r,R都可以)\neg:\nx1='I\\'m xiaoming'     # 若不用转移字符对'进行转义，则在m之前最会被截断，从而报错，不是一个字符串\nx2='你好\\n世界'     \n# 打印是：\n你好\n世界\n#中间会转行 \n#若x3='你好\\\\n世界'\n#打印结果是 你好\\n世界     #因为已经对\\进行转义，转义后仅表示一个普通的\\字符 \nm='hello\\tworld'\nn=r'hello\\tworld'\nprint(m) # 打印 hello\tworld\nprint(n) # 打印 hello\\tworld，因为r会使字符串保持原生\n```\n3. ### 字符串下标\n```Python\n# 下标又被称为索引，表示第几个数据\n# str,list,tuple类型的数据可以通过下标获取或操作数据\n# 切记，字符串是不可变数据类型(原数据永远不会修改，是在原数据的基础上新产生的数据)\n# 下标是用0开始\n\n# 可以通过下标来获取或则修改指定位置的数据\nword='zhangsan'\nprint(word[4]) # 打印n\n\n# 字符串是不可变数据类型\n# 对于字符串的任何操作，都不会改变原有的字符串！！！\nword='zhangsan'\n# 不管对word做任何操作\nprint(word)   # word打印的结果恒为 zhangsan\n```\n4. ### 字符串切片\n```Python\n# 切片就是从字符串里复制一段指定的内容，生成一个新的字符串\n\n# 切片语法\nm[star:end:step]    # m是字符串的变量名\n# 复制的内容中包含stat位，不包含end位\n# step表示步长，每步取一个数据，step默认为1\nm[Index] # 获取字符串指定下标的数据\nm[star:end] # 获取从star到end的数据\nm[star:] # 获取从star开始的所有数据\nm[:end] # 获取从头开始到end的数据\nm[::] # 从复制整个字符串\nm[::step] #整个字符串每step复制一个数据\nm[star:end:step] #获取从star到end,没step取一个数据\n\n#注意\n# 1.步长不能为0，但可以为负\n# 2.当步长为负时，从star位开始向前运算\n# 3.当step<0且star<end时，截取的内容为空(因为从star开始向前找不到end)\n# 4.当star和end都为负数，表示从右向左数\n```\n5. ### 字符串常见操作\n```Python\nlen(x) # 获取字符串长度\n\n# 查找相关方法\nx.find(a) # 查找字符串x中,字符c串a的下标，失败返回-1(返回a第一次出现的)\nx.index(a)  # 查找字符串x中,字符串a的下标，失败会报错(返回a第一次出现的)\nx.rfind(a)  # 查找字符串x中,字符串a的下标，失败返回-1(返回a最后一次出现的)\nx.rindex(a)  # 查找字符串x中,字符串a的下标，失败会报错(返回a最后一次出现的)\n\n# 判断相关方法\n# is开头的都是判断结果是bool值\nx.startswith(a) # 判断是否以字符串a开头\nx.endswith(a) # 判断是否以字符串a结尾\nx.isdigit() # 判断是否是纯数字\nx.isalpha() # 判断是否是纯字母\nx.isalnum() # 判断是否由纯字母数字组成(纯数字,纯字母,字母数字混合都为True,但当有其他字符如空格时就是False)\nx.isspace() # 检测字符串是否只由空格组成,只有空格返回True,否则返回False\n\n# 替换\nx.replace(a,b) # 用b替换字符串x中的a    \n\n# 分割\n#按照指定字符串分割 \nx.split(a) # 用字符串a将字符串x分割成一个列表\nx.rsplit(a,b) # 用字符串a将字符串x从左切b次分割成一个列表\nx.split(a) # 用字符串a将字符串x分割成一个列表\nx.rsplit(a,b) # 用字符串a将字符串x从右切b次分割成一个列表\n#按照行分割\nx.splitlines() # 在有换行出\\n处分割\n#按照指定字符串分成三部分\nx.partition(a) # 在第一个a处将字符串x分成三部分:a左侧,a,a右侧\nx.rpartition(a) # 在最后一个a处将字符串x分成三部分:a左侧,a,a右侧\n```\n6. ### 修改大小写\n```Python\nx.capitalize() # 让字符串x第一个字符大写\nx.upper() # 让字符串x中所有字符都大写\nx.lower() # 让字符串x中所有字符都小写\nx.title() # 让字符串x中所有单词首字母大写\n```\n7. ### 字符串填充\n```Python\nx.ljust(width) # 在字符串x的左边填空格，使字符串长度变为width(len(x)大于width，不做任何操作)\nx.rjust(width) # 在字符串x的右边填空格，使字符串长度变为width(len(x)大于width，不做任何操作)\nx.center(width) # 在字符串两侧平均填空格，使字符串长度变为width(len(x)大于width，不做任何操作)\nx.ljust(width,fillchar) # 在字符串x的左边填filechar，使字符串长度变为width(len(x)大于width，不做任何操作)\nx.rjust(width,fillchar) # 在字符串x的右边填filechar，使字符串长度变为width(len(x)大于width，不做任何操作)\nx.center(width,fillchar) # 在字符串两侧平均填fillchar，使字符串长度变为width(len(x)大于width，不做任何操作)\n```\n8. ### 增删空格\n```Python\nx.lstrip() #去除x中左侧的空格\nx.rstrip() #去除x中右侧的空格\nx.lstrip(chars) #去除x中左侧的chars\nx.rstrip(chars) #去除x中右侧的chars\n```\n9. ### 列表、字符串之间的转化\n```Python\nx.split(str) # 用字符str把x分成一个list\nstr.join(chars) # 用字符str把chars连接成一个字符串\n# chars是一个可迭代的对象\n```\n10. ### 字符串的运算符\n```Python\n# 1.字符串和字符串之间可以相加\n# 2.字符串和数字之间可以相乘\n# 3.字符串和数字之前：==为False；!=为True\n# 4.字符串和字符串之间做比较运算，会逐个比较字符串的编码值\n# 5.不支持其他运算符\n```\n11. ### 利用内置函数实现数字、字符间的转化(ASCII码)\n```Python\nord(char) # 查看字符char的ASCII码\nchr(num) # 查看ASCII码num所对应的字符\n```\n12. ### in 和 not in\n```Python\nin # 用来判断一个内容是否在可迭代对象中\nnot in # 用来判断一个内容是否不在可迭代对象中\n```\n13. ### 使用% 占位符来格式化字符串 \n```Python\n# %s    表示的是字符串的占位符\n# %d    表示的整数的占位符\n# %nd   打印时显示n位，如果不够，n>0在前面用空格补齐,n<0在后面补空格\n# %0d   打印时显示n位，如果不够，在前面用0补齐\n# %f    表示浮点数的占位符\n# %nf   表示浮点数的占位符,四舍五入保留n为小数\n# %%    打印一个%\n# %x    将数字按16进制输出，字符为小写\n# %X    将数字按16进制输出，字符为大写\n# print('%3d'% 15) ##语法\n```\n14. ### format方法 \n```Python\n# {} 可以用来占位，用format中的数据进行填充\n\n# 一一对应填充\n# x='大家好,我是{},今年{}岁'.format('xiaoming',18)\n\n# {数字}，数字从0开始\n# x='大家好,我是{1},今年{0}岁'.format(18,'xiaoming')\n\n# {变量名},相当于键值对\n# x='大家好,我是{name},今年{age}岁'.format(name='xiaoming',age=18)\n\n# {数字}{变量名}混合使用\n# x='大家好,我是{name},今年{1}岁,身高{0}cm'.format(180,18,name='xiaoming')\n# 要先写数字的值，再写变量名的值\n\n# 用list填充\n# data=['xiaoming',18,180]\n# x='大家好,我是{},今年{}岁,身高{}cm'.format(*data)\n# 切记加*\n\n# 用dictionary填充\n# data={'name':'xiaoming','age':18,'high':180}\n# x='大家好,我是{name},今年{age}岁,身高{high}cm'.format(**data)\n# 切记加**\n```\n","source":"_posts/Python字符串.md","raw":"---\ntitle: Python字符串\ntags:\n  - Python\ncategories: Python\nabbrlink: 35224\ndate: 2021-01-12 13:32:47\n---\n## 字符串\n1. ### 单引号和双引号\n```Python\n在Python中可以使用一对单引号或双引号；也可以使用三对单引号或双引号\neg:\n'hello'\n\"hello\"\n'''hello'''\n\"\"\"hello\"\"\"\n\n当字符串里面还有引号时，用单双引号嵌套使用，使表达的意思清晰\neg:\nmsg='xiaoming say\"I am xiaoming\"'\n```\n2. ### 字符串的转义字符\\\n```Python\n# \\' ==> 显示一个普通的单引号\n# \\\" ==> 显示一个普通的双引号\n# \\n ==> 表示一个换行\n# \\t ==> 表示一个制表符\n# \\\\ ==> 表示一个普通的\\\n# r'字符串' ==> 表示原生字符串，\\n等会原生输出，不会表现特殊含义(r,R都可以)\neg:\nx1='I\\'m xiaoming'     # 若不用转移字符对'进行转义，则在m之前最会被截断，从而报错，不是一个字符串\nx2='你好\\n世界'     \n# 打印是：\n你好\n世界\n#中间会转行 \n#若x3='你好\\\\n世界'\n#打印结果是 你好\\n世界     #因为已经对\\进行转义，转义后仅表示一个普通的\\字符 \nm='hello\\tworld'\nn=r'hello\\tworld'\nprint(m) # 打印 hello\tworld\nprint(n) # 打印 hello\\tworld，因为r会使字符串保持原生\n```\n3. ### 字符串下标\n```Python\n# 下标又被称为索引，表示第几个数据\n# str,list,tuple类型的数据可以通过下标获取或操作数据\n# 切记，字符串是不可变数据类型(原数据永远不会修改，是在原数据的基础上新产生的数据)\n# 下标是用0开始\n\n# 可以通过下标来获取或则修改指定位置的数据\nword='zhangsan'\nprint(word[4]) # 打印n\n\n# 字符串是不可变数据类型\n# 对于字符串的任何操作，都不会改变原有的字符串！！！\nword='zhangsan'\n# 不管对word做任何操作\nprint(word)   # word打印的结果恒为 zhangsan\n```\n4. ### 字符串切片\n```Python\n# 切片就是从字符串里复制一段指定的内容，生成一个新的字符串\n\n# 切片语法\nm[star:end:step]    # m是字符串的变量名\n# 复制的内容中包含stat位，不包含end位\n# step表示步长，每步取一个数据，step默认为1\nm[Index] # 获取字符串指定下标的数据\nm[star:end] # 获取从star到end的数据\nm[star:] # 获取从star开始的所有数据\nm[:end] # 获取从头开始到end的数据\nm[::] # 从复制整个字符串\nm[::step] #整个字符串每step复制一个数据\nm[star:end:step] #获取从star到end,没step取一个数据\n\n#注意\n# 1.步长不能为0，但可以为负\n# 2.当步长为负时，从star位开始向前运算\n# 3.当step<0且star<end时，截取的内容为空(因为从star开始向前找不到end)\n# 4.当star和end都为负数，表示从右向左数\n```\n5. ### 字符串常见操作\n```Python\nlen(x) # 获取字符串长度\n\n# 查找相关方法\nx.find(a) # 查找字符串x中,字符c串a的下标，失败返回-1(返回a第一次出现的)\nx.index(a)  # 查找字符串x中,字符串a的下标，失败会报错(返回a第一次出现的)\nx.rfind(a)  # 查找字符串x中,字符串a的下标，失败返回-1(返回a最后一次出现的)\nx.rindex(a)  # 查找字符串x中,字符串a的下标，失败会报错(返回a最后一次出现的)\n\n# 判断相关方法\n# is开头的都是判断结果是bool值\nx.startswith(a) # 判断是否以字符串a开头\nx.endswith(a) # 判断是否以字符串a结尾\nx.isdigit() # 判断是否是纯数字\nx.isalpha() # 判断是否是纯字母\nx.isalnum() # 判断是否由纯字母数字组成(纯数字,纯字母,字母数字混合都为True,但当有其他字符如空格时就是False)\nx.isspace() # 检测字符串是否只由空格组成,只有空格返回True,否则返回False\n\n# 替换\nx.replace(a,b) # 用b替换字符串x中的a    \n\n# 分割\n#按照指定字符串分割 \nx.split(a) # 用字符串a将字符串x分割成一个列表\nx.rsplit(a,b) # 用字符串a将字符串x从左切b次分割成一个列表\nx.split(a) # 用字符串a将字符串x分割成一个列表\nx.rsplit(a,b) # 用字符串a将字符串x从右切b次分割成一个列表\n#按照行分割\nx.splitlines() # 在有换行出\\n处分割\n#按照指定字符串分成三部分\nx.partition(a) # 在第一个a处将字符串x分成三部分:a左侧,a,a右侧\nx.rpartition(a) # 在最后一个a处将字符串x分成三部分:a左侧,a,a右侧\n```\n6. ### 修改大小写\n```Python\nx.capitalize() # 让字符串x第一个字符大写\nx.upper() # 让字符串x中所有字符都大写\nx.lower() # 让字符串x中所有字符都小写\nx.title() # 让字符串x中所有单词首字母大写\n```\n7. ### 字符串填充\n```Python\nx.ljust(width) # 在字符串x的左边填空格，使字符串长度变为width(len(x)大于width，不做任何操作)\nx.rjust(width) # 在字符串x的右边填空格，使字符串长度变为width(len(x)大于width，不做任何操作)\nx.center(width) # 在字符串两侧平均填空格，使字符串长度变为width(len(x)大于width，不做任何操作)\nx.ljust(width,fillchar) # 在字符串x的左边填filechar，使字符串长度变为width(len(x)大于width，不做任何操作)\nx.rjust(width,fillchar) # 在字符串x的右边填filechar，使字符串长度变为width(len(x)大于width，不做任何操作)\nx.center(width,fillchar) # 在字符串两侧平均填fillchar，使字符串长度变为width(len(x)大于width，不做任何操作)\n```\n8. ### 增删空格\n```Python\nx.lstrip() #去除x中左侧的空格\nx.rstrip() #去除x中右侧的空格\nx.lstrip(chars) #去除x中左侧的chars\nx.rstrip(chars) #去除x中右侧的chars\n```\n9. ### 列表、字符串之间的转化\n```Python\nx.split(str) # 用字符str把x分成一个list\nstr.join(chars) # 用字符str把chars连接成一个字符串\n# chars是一个可迭代的对象\n```\n10. ### 字符串的运算符\n```Python\n# 1.字符串和字符串之间可以相加\n# 2.字符串和数字之间可以相乘\n# 3.字符串和数字之前：==为False；!=为True\n# 4.字符串和字符串之间做比较运算，会逐个比较字符串的编码值\n# 5.不支持其他运算符\n```\n11. ### 利用内置函数实现数字、字符间的转化(ASCII码)\n```Python\nord(char) # 查看字符char的ASCII码\nchr(num) # 查看ASCII码num所对应的字符\n```\n12. ### in 和 not in\n```Python\nin # 用来判断一个内容是否在可迭代对象中\nnot in # 用来判断一个内容是否不在可迭代对象中\n```\n13. ### 使用% 占位符来格式化字符串 \n```Python\n# %s    表示的是字符串的占位符\n# %d    表示的整数的占位符\n# %nd   打印时显示n位，如果不够，n>0在前面用空格补齐,n<0在后面补空格\n# %0d   打印时显示n位，如果不够，在前面用0补齐\n# %f    表示浮点数的占位符\n# %nf   表示浮点数的占位符,四舍五入保留n为小数\n# %%    打印一个%\n# %x    将数字按16进制输出，字符为小写\n# %X    将数字按16进制输出，字符为大写\n# print('%3d'% 15) ##语法\n```\n14. ### format方法 \n```Python\n# {} 可以用来占位，用format中的数据进行填充\n\n# 一一对应填充\n# x='大家好,我是{},今年{}岁'.format('xiaoming',18)\n\n# {数字}，数字从0开始\n# x='大家好,我是{1},今年{0}岁'.format(18,'xiaoming')\n\n# {变量名},相当于键值对\n# x='大家好,我是{name},今年{age}岁'.format(name='xiaoming',age=18)\n\n# {数字}{变量名}混合使用\n# x='大家好,我是{name},今年{1}岁,身高{0}cm'.format(180,18,name='xiaoming')\n# 要先写数字的值，再写变量名的值\n\n# 用list填充\n# data=['xiaoming',18,180]\n# x='大家好,我是{},今年{}岁,身高{}cm'.format(*data)\n# 切记加*\n\n# 用dictionary填充\n# data={'name':'xiaoming','age':18,'high':180}\n# x='大家好,我是{name},今年{age}岁,身高{high}cm'.format(**data)\n# 切记加**\n```\n","slug":"Python字符串","published":1,"updated":"2021-07-27T14:51:43.514Z","comments":1,"layout":"post","photos":[],"link":"","_id":"ckrmv4jhg001ezrfy441c9bgl","content":"<h2 id=\"字符串\"><a href=\"#字符串\" class=\"headerlink\" title=\"字符串\"></a>字符串</h2><ol>\n<li><h3 id=\"单引号和双引号\"><a href=\"#单引号和双引号\" class=\"headerlink\" title=\"单引号和双引号\"></a>单引号和双引号</h3><figure class=\"highlight python\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">在Python中可以使用一对单引号或双引号；也可以使用三对单引号或双引号</span><br><span class=\"line\">eg:</span><br><span class=\"line\"><span class=\"string\">&#x27;hello&#x27;</span></span><br><span class=\"line\"><span class=\"string\">&quot;hello&quot;</span></span><br><span class=\"line\"><span class=\"string\">&#x27;&#x27;&#x27;hello&#x27;&#x27;&#x27;</span></span><br><span class=\"line\"><span class=\"string\">&quot;&quot;&quot;hello&quot;&quot;&quot;</span></span><br><span class=\"line\"></span><br><span class=\"line\">当字符串里面还有引号时，用单双引号嵌套使用，使表达的意思清晰</span><br><span class=\"line\">eg:</span><br><span class=\"line\">msg=<span class=\"string\">&#x27;xiaoming say&quot;I am xiaoming&quot;&#x27;</span></span><br></pre></td></tr></table></figure></li>\n<li><h3 id=\"字符串的转义字符\"><a href=\"#字符串的转义字符\" class=\"headerlink\" title=\"字符串的转义字符\\\"></a>字符串的转义字符\\</h3><figure class=\"highlight python\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\"># \\&#x27; ==&gt; 显示一个普通的单引号</span></span><br><span class=\"line\"><span class=\"comment\"># \\&quot; ==&gt; 显示一个普通的双引号</span></span><br><span class=\"line\"><span class=\"comment\"># \\n ==&gt; 表示一个换行</span></span><br><span class=\"line\"><span class=\"comment\"># \\t ==&gt; 表示一个制表符</span></span><br><span class=\"line\"><span class=\"comment\"># \\\\ ==&gt; 表示一个普通的\\</span></span><br><span class=\"line\"><span class=\"comment\"># r&#x27;字符串&#x27; ==&gt; 表示原生字符串，\\n等会原生输出，不会表现特殊含义(r,R都可以)</span></span><br><span class=\"line\">eg:</span><br><span class=\"line\">x1=<span class=\"string\">&#x27;I\\&#x27;m xiaoming&#x27;</span>     <span class=\"comment\"># 若不用转移字符对&#x27;进行转义，则在m之前最会被截断，从而报错，不是一个字符串</span></span><br><span class=\"line\">x2=<span class=\"string\">&#x27;你好\\n世界&#x27;</span>     </span><br><span class=\"line\"><span class=\"comment\"># 打印是：</span></span><br><span class=\"line\">你好</span><br><span class=\"line\">世界</span><br><span class=\"line\"><span class=\"comment\">#中间会转行 </span></span><br><span class=\"line\"><span class=\"comment\">#若x3=&#x27;你好\\\\n世界&#x27;</span></span><br><span class=\"line\"><span class=\"comment\">#打印结果是 你好\\n世界     #因为已经对\\进行转义，转义后仅表示一个普通的\\字符 </span></span><br><span class=\"line\">m=<span class=\"string\">&#x27;hello\\tworld&#x27;</span></span><br><span class=\"line\">n=<span class=\"string\">r&#x27;hello\\tworld&#x27;</span></span><br><span class=\"line\">print(m) <span class=\"comment\"># 打印 hello\tworld</span></span><br><span class=\"line\">print(n) <span class=\"comment\"># 打印 hello\\tworld，因为r会使字符串保持原生</span></span><br></pre></td></tr></table></figure></li>\n<li><h3 id=\"字符串下标\"><a href=\"#字符串下标\" class=\"headerlink\" title=\"字符串下标\"></a>字符串下标</h3><figure class=\"highlight python\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\"># 下标又被称为索引，表示第几个数据</span></span><br><span class=\"line\"><span class=\"comment\"># str,list,tuple类型的数据可以通过下标获取或操作数据</span></span><br><span class=\"line\"><span class=\"comment\"># 切记，字符串是不可变数据类型(原数据永远不会修改，是在原数据的基础上新产生的数据)</span></span><br><span class=\"line\"><span class=\"comment\"># 下标是用0开始</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\"># 可以通过下标来获取或则修改指定位置的数据</span></span><br><span class=\"line\">word=<span class=\"string\">&#x27;zhangsan&#x27;</span></span><br><span class=\"line\">print(word[<span class=\"number\">4</span>]) <span class=\"comment\"># 打印n</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\"># 字符串是不可变数据类型</span></span><br><span class=\"line\"><span class=\"comment\"># 对于字符串的任何操作，都不会改变原有的字符串！！！</span></span><br><span class=\"line\">word=<span class=\"string\">&#x27;zhangsan&#x27;</span></span><br><span class=\"line\"><span class=\"comment\"># 不管对word做任何操作</span></span><br><span class=\"line\">print(word)   <span class=\"comment\"># word打印的结果恒为 zhangsan</span></span><br></pre></td></tr></table></figure></li>\n<li><h3 id=\"字符串切片\"><a href=\"#字符串切片\" class=\"headerlink\" title=\"字符串切片\"></a>字符串切片</h3><figure class=\"highlight python\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\"># 切片就是从字符串里复制一段指定的内容，生成一个新的字符串</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\"># 切片语法</span></span><br><span class=\"line\">m[star:end:step]    <span class=\"comment\"># m是字符串的变量名</span></span><br><span class=\"line\"><span class=\"comment\"># 复制的内容中包含stat位，不包含end位</span></span><br><span class=\"line\"><span class=\"comment\"># step表示步长，每步取一个数据，step默认为1</span></span><br><span class=\"line\">m[Index] <span class=\"comment\"># 获取字符串指定下标的数据</span></span><br><span class=\"line\">m[star:end] <span class=\"comment\"># 获取从star到end的数据</span></span><br><span class=\"line\">m[star:] <span class=\"comment\"># 获取从star开始的所有数据</span></span><br><span class=\"line\">m[:end] <span class=\"comment\"># 获取从头开始到end的数据</span></span><br><span class=\"line\">m[::] <span class=\"comment\"># 从复制整个字符串</span></span><br><span class=\"line\">m[::step] <span class=\"comment\">#整个字符串每step复制一个数据</span></span><br><span class=\"line\">m[star:end:step] <span class=\"comment\">#获取从star到end,没step取一个数据</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">#注意</span></span><br><span class=\"line\"><span class=\"comment\"># 1.步长不能为0，但可以为负</span></span><br><span class=\"line\"><span class=\"comment\"># 2.当步长为负时，从star位开始向前运算</span></span><br><span class=\"line\"><span class=\"comment\"># 3.当step&lt;0且star&lt;end时，截取的内容为空(因为从star开始向前找不到end)</span></span><br><span class=\"line\"><span class=\"comment\"># 4.当star和end都为负数，表示从右向左数</span></span><br></pre></td></tr></table></figure></li>\n<li><h3 id=\"字符串常见操作\"><a href=\"#字符串常见操作\" class=\"headerlink\" title=\"字符串常见操作\"></a>字符串常见操作</h3><figure class=\"highlight python\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"built_in\">len</span>(x) <span class=\"comment\"># 获取字符串长度</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\"># 查找相关方法</span></span><br><span class=\"line\">x.find(a) <span class=\"comment\"># 查找字符串x中,字符c串a的下标，失败返回-1(返回a第一次出现的)</span></span><br><span class=\"line\">x.index(a)  <span class=\"comment\"># 查找字符串x中,字符串a的下标，失败会报错(返回a第一次出现的)</span></span><br><span class=\"line\">x.rfind(a)  <span class=\"comment\"># 查找字符串x中,字符串a的下标，失败返回-1(返回a最后一次出现的)</span></span><br><span class=\"line\">x.rindex(a)  <span class=\"comment\"># 查找字符串x中,字符串a的下标，失败会报错(返回a最后一次出现的)</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\"># 判断相关方法</span></span><br><span class=\"line\"><span class=\"comment\"># is开头的都是判断结果是bool值</span></span><br><span class=\"line\">x.startswith(a) <span class=\"comment\"># 判断是否以字符串a开头</span></span><br><span class=\"line\">x.endswith(a) <span class=\"comment\"># 判断是否以字符串a结尾</span></span><br><span class=\"line\">x.isdigit() <span class=\"comment\"># 判断是否是纯数字</span></span><br><span class=\"line\">x.isalpha() <span class=\"comment\"># 判断是否是纯字母</span></span><br><span class=\"line\">x.isalnum() <span class=\"comment\"># 判断是否由纯字母数字组成(纯数字,纯字母,字母数字混合都为True,但当有其他字符如空格时就是False)</span></span><br><span class=\"line\">x.isspace() <span class=\"comment\"># 检测字符串是否只由空格组成,只有空格返回True,否则返回False</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\"># 替换</span></span><br><span class=\"line\">x.replace(a,b) <span class=\"comment\"># 用b替换字符串x中的a    </span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\"># 分割</span></span><br><span class=\"line\"><span class=\"comment\">#按照指定字符串分割 </span></span><br><span class=\"line\">x.split(a) <span class=\"comment\"># 用字符串a将字符串x分割成一个列表</span></span><br><span class=\"line\">x.rsplit(a,b) <span class=\"comment\"># 用字符串a将字符串x从左切b次分割成一个列表</span></span><br><span class=\"line\">x.split(a) <span class=\"comment\"># 用字符串a将字符串x分割成一个列表</span></span><br><span class=\"line\">x.rsplit(a,b) <span class=\"comment\"># 用字符串a将字符串x从右切b次分割成一个列表</span></span><br><span class=\"line\"><span class=\"comment\">#按照行分割</span></span><br><span class=\"line\">x.splitlines() <span class=\"comment\"># 在有换行出\\n处分割</span></span><br><span class=\"line\"><span class=\"comment\">#按照指定字符串分成三部分</span></span><br><span class=\"line\">x.partition(a) <span class=\"comment\"># 在第一个a处将字符串x分成三部分:a左侧,a,a右侧</span></span><br><span class=\"line\">x.rpartition(a) <span class=\"comment\"># 在最后一个a处将字符串x分成三部分:a左侧,a,a右侧</span></span><br></pre></td></tr></table></figure></li>\n<li><h3 id=\"修改大小写\"><a href=\"#修改大小写\" class=\"headerlink\" title=\"修改大小写\"></a>修改大小写</h3><figure class=\"highlight python\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">x.capitalize() <span class=\"comment\"># 让字符串x第一个字符大写</span></span><br><span class=\"line\">x.upper() <span class=\"comment\"># 让字符串x中所有字符都大写</span></span><br><span class=\"line\">x.lower() <span class=\"comment\"># 让字符串x中所有字符都小写</span></span><br><span class=\"line\">x.title() <span class=\"comment\"># 让字符串x中所有单词首字母大写</span></span><br></pre></td></tr></table></figure></li>\n<li><h3 id=\"字符串填充\"><a href=\"#字符串填充\" class=\"headerlink\" title=\"字符串填充\"></a>字符串填充</h3><figure class=\"highlight python\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">x.ljust(width) <span class=\"comment\"># 在字符串x的左边填空格，使字符串长度变为width(len(x)大于width，不做任何操作)</span></span><br><span class=\"line\">x.rjust(width) <span class=\"comment\"># 在字符串x的右边填空格，使字符串长度变为width(len(x)大于width，不做任何操作)</span></span><br><span class=\"line\">x.center(width) <span class=\"comment\"># 在字符串两侧平均填空格，使字符串长度变为width(len(x)大于width，不做任何操作)</span></span><br><span class=\"line\">x.ljust(width,fillchar) <span class=\"comment\"># 在字符串x的左边填filechar，使字符串长度变为width(len(x)大于width，不做任何操作)</span></span><br><span class=\"line\">x.rjust(width,fillchar) <span class=\"comment\"># 在字符串x的右边填filechar，使字符串长度变为width(len(x)大于width，不做任何操作)</span></span><br><span class=\"line\">x.center(width,fillchar) <span class=\"comment\"># 在字符串两侧平均填fillchar，使字符串长度变为width(len(x)大于width，不做任何操作)</span></span><br></pre></td></tr></table></figure></li>\n<li><h3 id=\"增删空格\"><a href=\"#增删空格\" class=\"headerlink\" title=\"增删空格\"></a>增删空格</h3><figure class=\"highlight python\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">x.lstrip() <span class=\"comment\">#去除x中左侧的空格</span></span><br><span class=\"line\">x.rstrip() <span class=\"comment\">#去除x中右侧的空格</span></span><br><span class=\"line\">x.lstrip(chars) <span class=\"comment\">#去除x中左侧的chars</span></span><br><span class=\"line\">x.rstrip(chars) <span class=\"comment\">#去除x中右侧的chars</span></span><br></pre></td></tr></table></figure></li>\n<li><h3 id=\"列表、字符串之间的转化\"><a href=\"#列表、字符串之间的转化\" class=\"headerlink\" title=\"列表、字符串之间的转化\"></a>列表、字符串之间的转化</h3><figure class=\"highlight python\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">x.split(<span class=\"built_in\">str</span>) <span class=\"comment\"># 用字符str把x分成一个list</span></span><br><span class=\"line\"><span class=\"built_in\">str</span>.join(chars) <span class=\"comment\"># 用字符str把chars连接成一个字符串</span></span><br><span class=\"line\"><span class=\"comment\"># chars是一个可迭代的对象</span></span><br></pre></td></tr></table></figure></li>\n<li><h3 id=\"字符串的运算符\"><a href=\"#字符串的运算符\" class=\"headerlink\" title=\"字符串的运算符\"></a>字符串的运算符</h3><figure class=\"highlight python\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\"># 1.字符串和字符串之间可以相加</span></span><br><span class=\"line\"><span class=\"comment\"># 2.字符串和数字之间可以相乘</span></span><br><span class=\"line\"><span class=\"comment\"># 3.字符串和数字之前：==为False；!=为True</span></span><br><span class=\"line\"><span class=\"comment\"># 4.字符串和字符串之间做比较运算，会逐个比较字符串的编码值</span></span><br><span class=\"line\"><span class=\"comment\"># 5.不支持其他运算符</span></span><br></pre></td></tr></table></figure></li>\n<li><h3 id=\"利用内置函数实现数字、字符间的转化-ASCII码\"><a href=\"#利用内置函数实现数字、字符间的转化-ASCII码\" class=\"headerlink\" title=\"利用内置函数实现数字、字符间的转化(ASCII码)\"></a>利用内置函数实现数字、字符间的转化(ASCII码)</h3><figure class=\"highlight python\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"built_in\">ord</span>(char) <span class=\"comment\"># 查看字符char的ASCII码</span></span><br><span class=\"line\"><span class=\"built_in\">chr</span>(num) <span class=\"comment\"># 查看ASCII码num所对应的字符</span></span><br></pre></td></tr></table></figure></li>\n<li><h3 id=\"in-和-not-in\"><a href=\"#in-和-not-in\" class=\"headerlink\" title=\"in 和 not in\"></a>in 和 not in</h3><figure class=\"highlight python\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">in</span> <span class=\"comment\"># 用来判断一个内容是否在可迭代对象中</span></span><br><span class=\"line\"><span class=\"keyword\">not</span> <span class=\"keyword\">in</span> <span class=\"comment\"># 用来判断一个内容是否不在可迭代对象中</span></span><br></pre></td></tr></table></figure></li>\n<li><h3 id=\"使用-占位符来格式化字符串\"><a href=\"#使用-占位符来格式化字符串\" class=\"headerlink\" title=\"使用% 占位符来格式化字符串\"></a>使用% 占位符来格式化字符串</h3><figure class=\"highlight python\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\"># %s    表示的是字符串的占位符</span></span><br><span class=\"line\"><span class=\"comment\"># %d    表示的整数的占位符</span></span><br><span class=\"line\"><span class=\"comment\"># %nd   打印时显示n位，如果不够，n&gt;0在前面用空格补齐,n&lt;0在后面补空格</span></span><br><span class=\"line\"><span class=\"comment\"># %0d   打印时显示n位，如果不够，在前面用0补齐</span></span><br><span class=\"line\"><span class=\"comment\"># %f    表示浮点数的占位符</span></span><br><span class=\"line\"><span class=\"comment\"># %nf   表示浮点数的占位符,四舍五入保留n为小数</span></span><br><span class=\"line\"><span class=\"comment\"># %%    打印一个%</span></span><br><span class=\"line\"><span class=\"comment\"># %x    将数字按16进制输出，字符为小写</span></span><br><span class=\"line\"><span class=\"comment\"># %X    将数字按16进制输出，字符为大写</span></span><br><span class=\"line\"><span class=\"comment\"># print(&#x27;%3d&#x27;% 15) ##语法</span></span><br></pre></td></tr></table></figure></li>\n<li><h3 id=\"format方法\"><a href=\"#format方法\" class=\"headerlink\" title=\"format方法\"></a>format方法</h3><figure class=\"highlight python\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\"># &#123;&#125; 可以用来占位，用format中的数据进行填充</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\"># 一一对应填充</span></span><br><span class=\"line\"><span class=\"comment\"># x=&#x27;大家好,我是&#123;&#125;,今年&#123;&#125;岁&#x27;.format(&#x27;xiaoming&#x27;,18)</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\"># &#123;数字&#125;，数字从0开始</span></span><br><span class=\"line\"><span class=\"comment\"># x=&#x27;大家好,我是&#123;1&#125;,今年&#123;0&#125;岁&#x27;.format(18,&#x27;xiaoming&#x27;)</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\"># &#123;变量名&#125;,相当于键值对</span></span><br><span class=\"line\"><span class=\"comment\"># x=&#x27;大家好,我是&#123;name&#125;,今年&#123;age&#125;岁&#x27;.format(name=&#x27;xiaoming&#x27;,age=18)</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\"># &#123;数字&#125;&#123;变量名&#125;混合使用</span></span><br><span class=\"line\"><span class=\"comment\"># x=&#x27;大家好,我是&#123;name&#125;,今年&#123;1&#125;岁,身高&#123;0&#125;cm&#x27;.format(180,18,name=&#x27;xiaoming&#x27;)</span></span><br><span class=\"line\"><span class=\"comment\"># 要先写数字的值，再写变量名的值</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\"># 用list填充</span></span><br><span class=\"line\"><span class=\"comment\"># data=[&#x27;xiaoming&#x27;,18,180]</span></span><br><span class=\"line\"><span class=\"comment\"># x=&#x27;大家好,我是&#123;&#125;,今年&#123;&#125;岁,身高&#123;&#125;cm&#x27;.format(*data)</span></span><br><span class=\"line\"><span class=\"comment\"># 切记加*</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\"># 用dictionary填充</span></span><br><span class=\"line\"><span class=\"comment\"># data=&#123;&#x27;name&#x27;:&#x27;xiaoming&#x27;,&#x27;age&#x27;:18,&#x27;high&#x27;:180&#125;</span></span><br><span class=\"line\"><span class=\"comment\"># x=&#x27;大家好,我是&#123;name&#125;,今年&#123;age&#125;岁,身高&#123;high&#125;cm&#x27;.format(**data)</span></span><br><span class=\"line\"><span class=\"comment\"># 切记加**</span></span><br></pre></td></tr></table></figure>\n</li>\n</ol>\n","site":{"data":{}},"length":4345,"excerpt":"","more":"<h2 id=\"字符串\"><a href=\"#字符串\" class=\"headerlink\" title=\"字符串\"></a>字符串</h2><ol>\n<li><h3 id=\"单引号和双引号\"><a href=\"#单引号和双引号\" class=\"headerlink\" title=\"单引号和双引号\"></a>单引号和双引号</h3><figure class=\"highlight python\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">在Python中可以使用一对单引号或双引号；也可以使用三对单引号或双引号</span><br><span class=\"line\">eg:</span><br><span class=\"line\"><span class=\"string\">&#x27;hello&#x27;</span></span><br><span class=\"line\"><span class=\"string\">&quot;hello&quot;</span></span><br><span class=\"line\"><span class=\"string\">&#x27;&#x27;&#x27;hello&#x27;&#x27;&#x27;</span></span><br><span class=\"line\"><span class=\"string\">&quot;&quot;&quot;hello&quot;&quot;&quot;</span></span><br><span class=\"line\"></span><br><span class=\"line\">当字符串里面还有引号时，用单双引号嵌套使用，使表达的意思清晰</span><br><span class=\"line\">eg:</span><br><span class=\"line\">msg=<span class=\"string\">&#x27;xiaoming say&quot;I am xiaoming&quot;&#x27;</span></span><br></pre></td></tr></table></figure></li>\n<li><h3 id=\"字符串的转义字符\"><a href=\"#字符串的转义字符\" class=\"headerlink\" title=\"字符串的转义字符\\\"></a>字符串的转义字符\\</h3><figure class=\"highlight python\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\"># \\&#x27; ==&gt; 显示一个普通的单引号</span></span><br><span class=\"line\"><span class=\"comment\"># \\&quot; ==&gt; 显示一个普通的双引号</span></span><br><span class=\"line\"><span class=\"comment\"># \\n ==&gt; 表示一个换行</span></span><br><span class=\"line\"><span class=\"comment\"># \\t ==&gt; 表示一个制表符</span></span><br><span class=\"line\"><span class=\"comment\"># \\\\ ==&gt; 表示一个普通的\\</span></span><br><span class=\"line\"><span class=\"comment\"># r&#x27;字符串&#x27; ==&gt; 表示原生字符串，\\n等会原生输出，不会表现特殊含义(r,R都可以)</span></span><br><span class=\"line\">eg:</span><br><span class=\"line\">x1=<span class=\"string\">&#x27;I\\&#x27;m xiaoming&#x27;</span>     <span class=\"comment\"># 若不用转移字符对&#x27;进行转义，则在m之前最会被截断，从而报错，不是一个字符串</span></span><br><span class=\"line\">x2=<span class=\"string\">&#x27;你好\\n世界&#x27;</span>     </span><br><span class=\"line\"><span class=\"comment\"># 打印是：</span></span><br><span class=\"line\">你好</span><br><span class=\"line\">世界</span><br><span class=\"line\"><span class=\"comment\">#中间会转行 </span></span><br><span class=\"line\"><span class=\"comment\">#若x3=&#x27;你好\\\\n世界&#x27;</span></span><br><span class=\"line\"><span class=\"comment\">#打印结果是 你好\\n世界     #因为已经对\\进行转义，转义后仅表示一个普通的\\字符 </span></span><br><span class=\"line\">m=<span class=\"string\">&#x27;hello\\tworld&#x27;</span></span><br><span class=\"line\">n=<span class=\"string\">r&#x27;hello\\tworld&#x27;</span></span><br><span class=\"line\">print(m) <span class=\"comment\"># 打印 hello\tworld</span></span><br><span class=\"line\">print(n) <span class=\"comment\"># 打印 hello\\tworld，因为r会使字符串保持原生</span></span><br></pre></td></tr></table></figure></li>\n<li><h3 id=\"字符串下标\"><a href=\"#字符串下标\" class=\"headerlink\" title=\"字符串下标\"></a>字符串下标</h3><figure class=\"highlight python\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\"># 下标又被称为索引，表示第几个数据</span></span><br><span class=\"line\"><span class=\"comment\"># str,list,tuple类型的数据可以通过下标获取或操作数据</span></span><br><span class=\"line\"><span class=\"comment\"># 切记，字符串是不可变数据类型(原数据永远不会修改，是在原数据的基础上新产生的数据)</span></span><br><span class=\"line\"><span class=\"comment\"># 下标是用0开始</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\"># 可以通过下标来获取或则修改指定位置的数据</span></span><br><span class=\"line\">word=<span class=\"string\">&#x27;zhangsan&#x27;</span></span><br><span class=\"line\">print(word[<span class=\"number\">4</span>]) <span class=\"comment\"># 打印n</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\"># 字符串是不可变数据类型</span></span><br><span class=\"line\"><span class=\"comment\"># 对于字符串的任何操作，都不会改变原有的字符串！！！</span></span><br><span class=\"line\">word=<span class=\"string\">&#x27;zhangsan&#x27;</span></span><br><span class=\"line\"><span class=\"comment\"># 不管对word做任何操作</span></span><br><span class=\"line\">print(word)   <span class=\"comment\"># word打印的结果恒为 zhangsan</span></span><br></pre></td></tr></table></figure></li>\n<li><h3 id=\"字符串切片\"><a href=\"#字符串切片\" class=\"headerlink\" title=\"字符串切片\"></a>字符串切片</h3><figure class=\"highlight python\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\"># 切片就是从字符串里复制一段指定的内容，生成一个新的字符串</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\"># 切片语法</span></span><br><span class=\"line\">m[star:end:step]    <span class=\"comment\"># m是字符串的变量名</span></span><br><span class=\"line\"><span class=\"comment\"># 复制的内容中包含stat位，不包含end位</span></span><br><span class=\"line\"><span class=\"comment\"># step表示步长，每步取一个数据，step默认为1</span></span><br><span class=\"line\">m[Index] <span class=\"comment\"># 获取字符串指定下标的数据</span></span><br><span class=\"line\">m[star:end] <span class=\"comment\"># 获取从star到end的数据</span></span><br><span class=\"line\">m[star:] <span class=\"comment\"># 获取从star开始的所有数据</span></span><br><span class=\"line\">m[:end] <span class=\"comment\"># 获取从头开始到end的数据</span></span><br><span class=\"line\">m[::] <span class=\"comment\"># 从复制整个字符串</span></span><br><span class=\"line\">m[::step] <span class=\"comment\">#整个字符串每step复制一个数据</span></span><br><span class=\"line\">m[star:end:step] <span class=\"comment\">#获取从star到end,没step取一个数据</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">#注意</span></span><br><span class=\"line\"><span class=\"comment\"># 1.步长不能为0，但可以为负</span></span><br><span class=\"line\"><span class=\"comment\"># 2.当步长为负时，从star位开始向前运算</span></span><br><span class=\"line\"><span class=\"comment\"># 3.当step&lt;0且star&lt;end时，截取的内容为空(因为从star开始向前找不到end)</span></span><br><span class=\"line\"><span class=\"comment\"># 4.当star和end都为负数，表示从右向左数</span></span><br></pre></td></tr></table></figure></li>\n<li><h3 id=\"字符串常见操作\"><a href=\"#字符串常见操作\" class=\"headerlink\" title=\"字符串常见操作\"></a>字符串常见操作</h3><figure class=\"highlight python\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"built_in\">len</span>(x) <span class=\"comment\"># 获取字符串长度</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\"># 查找相关方法</span></span><br><span class=\"line\">x.find(a) <span class=\"comment\"># 查找字符串x中,字符c串a的下标，失败返回-1(返回a第一次出现的)</span></span><br><span class=\"line\">x.index(a)  <span class=\"comment\"># 查找字符串x中,字符串a的下标，失败会报错(返回a第一次出现的)</span></span><br><span class=\"line\">x.rfind(a)  <span class=\"comment\"># 查找字符串x中,字符串a的下标，失败返回-1(返回a最后一次出现的)</span></span><br><span class=\"line\">x.rindex(a)  <span class=\"comment\"># 查找字符串x中,字符串a的下标，失败会报错(返回a最后一次出现的)</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\"># 判断相关方法</span></span><br><span class=\"line\"><span class=\"comment\"># is开头的都是判断结果是bool值</span></span><br><span class=\"line\">x.startswith(a) <span class=\"comment\"># 判断是否以字符串a开头</span></span><br><span class=\"line\">x.endswith(a) <span class=\"comment\"># 判断是否以字符串a结尾</span></span><br><span class=\"line\">x.isdigit() <span class=\"comment\"># 判断是否是纯数字</span></span><br><span class=\"line\">x.isalpha() <span class=\"comment\"># 判断是否是纯字母</span></span><br><span class=\"line\">x.isalnum() <span class=\"comment\"># 判断是否由纯字母数字组成(纯数字,纯字母,字母数字混合都为True,但当有其他字符如空格时就是False)</span></span><br><span class=\"line\">x.isspace() <span class=\"comment\"># 检测字符串是否只由空格组成,只有空格返回True,否则返回False</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\"># 替换</span></span><br><span class=\"line\">x.replace(a,b) <span class=\"comment\"># 用b替换字符串x中的a    </span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\"># 分割</span></span><br><span class=\"line\"><span class=\"comment\">#按照指定字符串分割 </span></span><br><span class=\"line\">x.split(a) <span class=\"comment\"># 用字符串a将字符串x分割成一个列表</span></span><br><span class=\"line\">x.rsplit(a,b) <span class=\"comment\"># 用字符串a将字符串x从左切b次分割成一个列表</span></span><br><span class=\"line\">x.split(a) <span class=\"comment\"># 用字符串a将字符串x分割成一个列表</span></span><br><span class=\"line\">x.rsplit(a,b) <span class=\"comment\"># 用字符串a将字符串x从右切b次分割成一个列表</span></span><br><span class=\"line\"><span class=\"comment\">#按照行分割</span></span><br><span class=\"line\">x.splitlines() <span class=\"comment\"># 在有换行出\\n处分割</span></span><br><span class=\"line\"><span class=\"comment\">#按照指定字符串分成三部分</span></span><br><span class=\"line\">x.partition(a) <span class=\"comment\"># 在第一个a处将字符串x分成三部分:a左侧,a,a右侧</span></span><br><span class=\"line\">x.rpartition(a) <span class=\"comment\"># 在最后一个a处将字符串x分成三部分:a左侧,a,a右侧</span></span><br></pre></td></tr></table></figure></li>\n<li><h3 id=\"修改大小写\"><a href=\"#修改大小写\" class=\"headerlink\" title=\"修改大小写\"></a>修改大小写</h3><figure class=\"highlight python\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">x.capitalize() <span class=\"comment\"># 让字符串x第一个字符大写</span></span><br><span class=\"line\">x.upper() <span class=\"comment\"># 让字符串x中所有字符都大写</span></span><br><span class=\"line\">x.lower() <span class=\"comment\"># 让字符串x中所有字符都小写</span></span><br><span class=\"line\">x.title() <span class=\"comment\"># 让字符串x中所有单词首字母大写</span></span><br></pre></td></tr></table></figure></li>\n<li><h3 id=\"字符串填充\"><a href=\"#字符串填充\" class=\"headerlink\" title=\"字符串填充\"></a>字符串填充</h3><figure class=\"highlight python\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">x.ljust(width) <span class=\"comment\"># 在字符串x的左边填空格，使字符串长度变为width(len(x)大于width，不做任何操作)</span></span><br><span class=\"line\">x.rjust(width) <span class=\"comment\"># 在字符串x的右边填空格，使字符串长度变为width(len(x)大于width，不做任何操作)</span></span><br><span class=\"line\">x.center(width) <span class=\"comment\"># 在字符串两侧平均填空格，使字符串长度变为width(len(x)大于width，不做任何操作)</span></span><br><span class=\"line\">x.ljust(width,fillchar) <span class=\"comment\"># 在字符串x的左边填filechar，使字符串长度变为width(len(x)大于width，不做任何操作)</span></span><br><span class=\"line\">x.rjust(width,fillchar) <span class=\"comment\"># 在字符串x的右边填filechar，使字符串长度变为width(len(x)大于width，不做任何操作)</span></span><br><span class=\"line\">x.center(width,fillchar) <span class=\"comment\"># 在字符串两侧平均填fillchar，使字符串长度变为width(len(x)大于width，不做任何操作)</span></span><br></pre></td></tr></table></figure></li>\n<li><h3 id=\"增删空格\"><a href=\"#增删空格\" class=\"headerlink\" title=\"增删空格\"></a>增删空格</h3><figure class=\"highlight python\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">x.lstrip() <span class=\"comment\">#去除x中左侧的空格</span></span><br><span class=\"line\">x.rstrip() <span class=\"comment\">#去除x中右侧的空格</span></span><br><span class=\"line\">x.lstrip(chars) <span class=\"comment\">#去除x中左侧的chars</span></span><br><span class=\"line\">x.rstrip(chars) <span class=\"comment\">#去除x中右侧的chars</span></span><br></pre></td></tr></table></figure></li>\n<li><h3 id=\"列表、字符串之间的转化\"><a href=\"#列表、字符串之间的转化\" class=\"headerlink\" title=\"列表、字符串之间的转化\"></a>列表、字符串之间的转化</h3><figure class=\"highlight python\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">x.split(<span class=\"built_in\">str</span>) <span class=\"comment\"># 用字符str把x分成一个list</span></span><br><span class=\"line\"><span class=\"built_in\">str</span>.join(chars) <span class=\"comment\"># 用字符str把chars连接成一个字符串</span></span><br><span class=\"line\"><span class=\"comment\"># chars是一个可迭代的对象</span></span><br></pre></td></tr></table></figure></li>\n<li><h3 id=\"字符串的运算符\"><a href=\"#字符串的运算符\" class=\"headerlink\" title=\"字符串的运算符\"></a>字符串的运算符</h3><figure class=\"highlight python\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\"># 1.字符串和字符串之间可以相加</span></span><br><span class=\"line\"><span class=\"comment\"># 2.字符串和数字之间可以相乘</span></span><br><span class=\"line\"><span class=\"comment\"># 3.字符串和数字之前：==为False；!=为True</span></span><br><span class=\"line\"><span class=\"comment\"># 4.字符串和字符串之间做比较运算，会逐个比较字符串的编码值</span></span><br><span class=\"line\"><span class=\"comment\"># 5.不支持其他运算符</span></span><br></pre></td></tr></table></figure></li>\n<li><h3 id=\"利用内置函数实现数字、字符间的转化-ASCII码\"><a href=\"#利用内置函数实现数字、字符间的转化-ASCII码\" class=\"headerlink\" title=\"利用内置函数实现数字、字符间的转化(ASCII码)\"></a>利用内置函数实现数字、字符间的转化(ASCII码)</h3><figure class=\"highlight python\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"built_in\">ord</span>(char) <span class=\"comment\"># 查看字符char的ASCII码</span></span><br><span class=\"line\"><span class=\"built_in\">chr</span>(num) <span class=\"comment\"># 查看ASCII码num所对应的字符</span></span><br></pre></td></tr></table></figure></li>\n<li><h3 id=\"in-和-not-in\"><a href=\"#in-和-not-in\" class=\"headerlink\" title=\"in 和 not in\"></a>in 和 not in</h3><figure class=\"highlight python\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">in</span> <span class=\"comment\"># 用来判断一个内容是否在可迭代对象中</span></span><br><span class=\"line\"><span class=\"keyword\">not</span> <span class=\"keyword\">in</span> <span class=\"comment\"># 用来判断一个内容是否不在可迭代对象中</span></span><br></pre></td></tr></table></figure></li>\n<li><h3 id=\"使用-占位符来格式化字符串\"><a href=\"#使用-占位符来格式化字符串\" class=\"headerlink\" title=\"使用% 占位符来格式化字符串\"></a>使用% 占位符来格式化字符串</h3><figure class=\"highlight python\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\"># %s    表示的是字符串的占位符</span></span><br><span class=\"line\"><span class=\"comment\"># %d    表示的整数的占位符</span></span><br><span class=\"line\"><span class=\"comment\"># %nd   打印时显示n位，如果不够，n&gt;0在前面用空格补齐,n&lt;0在后面补空格</span></span><br><span class=\"line\"><span class=\"comment\"># %0d   打印时显示n位，如果不够，在前面用0补齐</span></span><br><span class=\"line\"><span class=\"comment\"># %f    表示浮点数的占位符</span></span><br><span class=\"line\"><span class=\"comment\"># %nf   表示浮点数的占位符,四舍五入保留n为小数</span></span><br><span class=\"line\"><span class=\"comment\"># %%    打印一个%</span></span><br><span class=\"line\"><span class=\"comment\"># %x    将数字按16进制输出，字符为小写</span></span><br><span class=\"line\"><span class=\"comment\"># %X    将数字按16进制输出，字符为大写</span></span><br><span class=\"line\"><span class=\"comment\"># print(&#x27;%3d&#x27;% 15) ##语法</span></span><br></pre></td></tr></table></figure></li>\n<li><h3 id=\"format方法\"><a href=\"#format方法\" class=\"headerlink\" title=\"format方法\"></a>format方法</h3><figure class=\"highlight python\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\"># &#123;&#125; 可以用来占位，用format中的数据进行填充</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\"># 一一对应填充</span></span><br><span class=\"line\"><span class=\"comment\"># x=&#x27;大家好,我是&#123;&#125;,今年&#123;&#125;岁&#x27;.format(&#x27;xiaoming&#x27;,18)</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\"># &#123;数字&#125;，数字从0开始</span></span><br><span class=\"line\"><span class=\"comment\"># x=&#x27;大家好,我是&#123;1&#125;,今年&#123;0&#125;岁&#x27;.format(18,&#x27;xiaoming&#x27;)</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\"># &#123;变量名&#125;,相当于键值对</span></span><br><span class=\"line\"><span class=\"comment\"># x=&#x27;大家好,我是&#123;name&#125;,今年&#123;age&#125;岁&#x27;.format(name=&#x27;xiaoming&#x27;,age=18)</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\"># &#123;数字&#125;&#123;变量名&#125;混合使用</span></span><br><span class=\"line\"><span class=\"comment\"># x=&#x27;大家好,我是&#123;name&#125;,今年&#123;1&#125;岁,身高&#123;0&#125;cm&#x27;.format(180,18,name=&#x27;xiaoming&#x27;)</span></span><br><span class=\"line\"><span class=\"comment\"># 要先写数字的值，再写变量名的值</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\"># 用list填充</span></span><br><span class=\"line\"><span class=\"comment\"># data=[&#x27;xiaoming&#x27;,18,180]</span></span><br><span class=\"line\"><span class=\"comment\"># x=&#x27;大家好,我是&#123;&#125;,今年&#123;&#125;岁,身高&#123;&#125;cm&#x27;.format(*data)</span></span><br><span class=\"line\"><span class=\"comment\"># 切记加*</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\"># 用dictionary填充</span></span><br><span class=\"line\"><span class=\"comment\"># data=&#123;&#x27;name&#x27;:&#x27;xiaoming&#x27;,&#x27;age&#x27;:18,&#x27;high&#x27;:180&#125;</span></span><br><span class=\"line\"><span class=\"comment\"># x=&#x27;大家好,我是&#123;name&#125;,今年&#123;age&#125;岁,身高&#123;high&#125;cm&#x27;.format(**data)</span></span><br><span class=\"line\"><span class=\"comment\"># 切记加**</span></span><br></pre></td></tr></table></figure>\n</li>\n</ol>\n"},{"title":"Python经典问题","abbrlink":59786,"date":"2021-01-12T05:43:27.000Z","_content":"1. ### 交换两个变量的值\n```Python\na=1\nb=2\n# 方法一:利用第三个变量实现\nc=b\nb=a\na=c\n\n# 方法二:利用运算符实现\na=a+b\nb=a-b\na=a-b\n\n# 方法三:利用异或运算符实现\na=a^b\nb=a^b\na=a^b\n# 原理 a^b^b==a\n\n# 方法四:使用Python特有的方法实现\na,b=b,a\n```\n2. for...in循环删除元素\n","source":"_posts/Python经典问题.md","raw":"---\ntitle: Python经典问题\ntags:\n  - Python\ncategories: Python\nabbrlink: 59786\ndate: 2021-01-12 13:43:27\n---\n1. ### 交换两个变量的值\n```Python\na=1\nb=2\n# 方法一:利用第三个变量实现\nc=b\nb=a\na=c\n\n# 方法二:利用运算符实现\na=a+b\nb=a-b\na=a-b\n\n# 方法三:利用异或运算符实现\na=a^b\nb=a^b\na=a^b\n# 原理 a^b^b==a\n\n# 方法四:使用Python特有的方法实现\na,b=b,a\n```\n2. for...in循环删除元素\n","slug":"Python经典问题","published":1,"updated":"2021-07-27T14:51:43.515Z","comments":1,"layout":"post","photos":[],"link":"","_id":"ckrmv4jhi001izrfy9d2o40z9","content":"<ol>\n<li><h3 id=\"交换两个变量的值\"><a href=\"#交换两个变量的值\" class=\"headerlink\" title=\"交换两个变量的值\"></a>交换两个变量的值</h3><figure class=\"highlight python\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">a=<span class=\"number\">1</span></span><br><span class=\"line\">b=<span class=\"number\">2</span></span><br><span class=\"line\"><span class=\"comment\"># 方法一:利用第三个变量实现</span></span><br><span class=\"line\">c=b</span><br><span class=\"line\">b=a</span><br><span class=\"line\">a=c</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\"># 方法二:利用运算符实现</span></span><br><span class=\"line\">a=a+b</span><br><span class=\"line\">b=a-b</span><br><span class=\"line\">a=a-b</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\"># 方法三:利用异或运算符实现</span></span><br><span class=\"line\">a=a^b</span><br><span class=\"line\">b=a^b</span><br><span class=\"line\">a=a^b</span><br><span class=\"line\"><span class=\"comment\"># 原理 a^b^b==a</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\"># 方法四:使用Python特有的方法实现</span></span><br><span class=\"line\">a,b=b,a</span><br></pre></td></tr></table></figure></li>\n<li>for…in循环删除元素</li>\n</ol>\n","site":{"data":{}},"length":174,"excerpt":"","more":"<ol>\n<li><h3 id=\"交换两个变量的值\"><a href=\"#交换两个变量的值\" class=\"headerlink\" title=\"交换两个变量的值\"></a>交换两个变量的值</h3><figure class=\"highlight python\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">a=<span class=\"number\">1</span></span><br><span class=\"line\">b=<span class=\"number\">2</span></span><br><span class=\"line\"><span class=\"comment\"># 方法一:利用第三个变量实现</span></span><br><span class=\"line\">c=b</span><br><span class=\"line\">b=a</span><br><span class=\"line\">a=c</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\"># 方法二:利用运算符实现</span></span><br><span class=\"line\">a=a+b</span><br><span class=\"line\">b=a-b</span><br><span class=\"line\">a=a-b</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\"># 方法三:利用异或运算符实现</span></span><br><span class=\"line\">a=a^b</span><br><span class=\"line\">b=a^b</span><br><span class=\"line\">a=a^b</span><br><span class=\"line\"><span class=\"comment\"># 原理 a^b^b==a</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\"># 方法四:使用Python特有的方法实现</span></span><br><span class=\"line\">a,b=b,a</span><br></pre></td></tr></table></figure></li>\n<li>for…in循环删除元素</li>\n</ol>\n"},{"title":"Python运算符","abbrlink":16318,"date":"2021-01-12T04:48:58.000Z","_content":"## 运算符\n1. ### 算术运算符\n```Python\n+:加\n-:减\n*:乘\n/:除(结果可以是float)\n%:取余\n**:幂运算 eg: print(2**3) #打印2的3次幂\n//:整除(向下取整)\n注：\n# 可用幂运算进行开方运算\neg:print(81**(1/2)) #打印的是81开平方的结果，即为9\n# 在Python2中，/得到的是一个整数;在Python3中得到是一个浮点数\n# 在开发中使用括号来表示优先级,比较清晰\n```\n2. ### 算术运算符在字符串中的使用\n```Python\n# 在字符串中有限度的支持加法和乘法运算符\nprint(\"hello\"+\"world\")   # 结果为 helloworld(用于拼接字符串)\nprint(\"hello\"*2)         # 结果为 hellohello\n注：字符串和数字是不能相加的\nprint(\"a\"+1) # 会报错\n```\n3. ### 赋值运算符\n```Python\na=1 # 单个变量赋值\nm,n=1,2 # 多个变量赋值(拆包),且当等号左右两侧个数不相等时会报错\no*,p,q=1,2,3,4,5 #加*表示可变长度,把4,5分别赋给p,q,其余全部赋值给o\nm='hello','world' # 元组赋值\n```\n4. ### 比较运算符\n```Python\n# 比较运算符\n>:大于\n<:小于\n>=:大于等于\n<=:小于等于\n!=:不等于(在python2<>也表示不等于，python3不支持)\n\n# 比较运算符在字符串中的使用\nprint('a'<'b') # 结果为true 按照ASCII码进行比较\nprint('abc'<'b') # 结果为true,直接字符a,b相比得出结果\nprint('abc'=='abc') # 结果为true\n在数字和字符串之间做==为true,做!=比较为false\n```\n5. ### 逻辑运算符\n```Python\nand:逻辑与\nor:逻辑或\nnot:逻辑非\n\n#规则\n逻辑与规则:只有一个运算数是False,结果就为False\n逻辑或规则:只有一个运算数是True,结果就为True\n优先级:not > and > or\n\n#逻辑运算符的取值问题(逻辑运算结果不一定是bool值)\nprint(3 and 'Hello' and 0 and 2) \n# 结果为0(按照逻辑与的运算规则,有False则False)\nprint(3 or 0)\n# 结果为3,逻辑或运算当有一个是True时，后面的将不会被执行\n\n#逻辑运算符的短路问题\n4 > 3 and print('hello world') \n# 打印hello world\n4 > 3 or print('hello world') \n# print将会短路，因为逻辑或前面已经是True,后面将不会被执行\n```\n5. ### 位运算\n```Python\n&:按位与(都为1取1,否则取0)\n|:按位或(有1取1,否则取0)\n^:按位异或(不同取1,相同取0)\n~:按位取反(0取1,1取0)\n<<:左移(向左移,后面补0)\n>>:右移(向右移,数据会丢失)\n# 左移:x左移a位结果为x乘以2的a次方\n# 右移:x右移a位结果为x除以2的a次方(取整)\n```\n","source":"_posts/Python运算符.md","raw":"---\ntitle: Python运算符\ntags:\n  - Python\ncategories: Python\nabbrlink: 16318\ndate: 2021-01-12 12:48:58\n---\n## 运算符\n1. ### 算术运算符\n```Python\n+:加\n-:减\n*:乘\n/:除(结果可以是float)\n%:取余\n**:幂运算 eg: print(2**3) #打印2的3次幂\n//:整除(向下取整)\n注：\n# 可用幂运算进行开方运算\neg:print(81**(1/2)) #打印的是81开平方的结果，即为9\n# 在Python2中，/得到的是一个整数;在Python3中得到是一个浮点数\n# 在开发中使用括号来表示优先级,比较清晰\n```\n2. ### 算术运算符在字符串中的使用\n```Python\n# 在字符串中有限度的支持加法和乘法运算符\nprint(\"hello\"+\"world\")   # 结果为 helloworld(用于拼接字符串)\nprint(\"hello\"*2)         # 结果为 hellohello\n注：字符串和数字是不能相加的\nprint(\"a\"+1) # 会报错\n```\n3. ### 赋值运算符\n```Python\na=1 # 单个变量赋值\nm,n=1,2 # 多个变量赋值(拆包),且当等号左右两侧个数不相等时会报错\no*,p,q=1,2,3,4,5 #加*表示可变长度,把4,5分别赋给p,q,其余全部赋值给o\nm='hello','world' # 元组赋值\n```\n4. ### 比较运算符\n```Python\n# 比较运算符\n>:大于\n<:小于\n>=:大于等于\n<=:小于等于\n!=:不等于(在python2<>也表示不等于，python3不支持)\n\n# 比较运算符在字符串中的使用\nprint('a'<'b') # 结果为true 按照ASCII码进行比较\nprint('abc'<'b') # 结果为true,直接字符a,b相比得出结果\nprint('abc'=='abc') # 结果为true\n在数字和字符串之间做==为true,做!=比较为false\n```\n5. ### 逻辑运算符\n```Python\nand:逻辑与\nor:逻辑或\nnot:逻辑非\n\n#规则\n逻辑与规则:只有一个运算数是False,结果就为False\n逻辑或规则:只有一个运算数是True,结果就为True\n优先级:not > and > or\n\n#逻辑运算符的取值问题(逻辑运算结果不一定是bool值)\nprint(3 and 'Hello' and 0 and 2) \n# 结果为0(按照逻辑与的运算规则,有False则False)\nprint(3 or 0)\n# 结果为3,逻辑或运算当有一个是True时，后面的将不会被执行\n\n#逻辑运算符的短路问题\n4 > 3 and print('hello world') \n# 打印hello world\n4 > 3 or print('hello world') \n# print将会短路，因为逻辑或前面已经是True,后面将不会被执行\n```\n5. ### 位运算\n```Python\n&:按位与(都为1取1,否则取0)\n|:按位或(有1取1,否则取0)\n^:按位异或(不同取1,相同取0)\n~:按位取反(0取1,1取0)\n<<:左移(向左移,后面补0)\n>>:右移(向右移,数据会丢失)\n# 左移:x左移a位结果为x乘以2的a次方\n# 右移:x右移a位结果为x除以2的a次方(取整)\n```\n","slug":"Python运算符","published":1,"updated":"2021-07-27T14:51:43.516Z","comments":1,"layout":"post","photos":[],"link":"","_id":"ckrmv4jhj001kzrfygqwydb4x","content":"<h2 id=\"运算符\"><a href=\"#运算符\" class=\"headerlink\" title=\"运算符\"></a>运算符</h2><ol>\n<li><h3 id=\"算术运算符\"><a href=\"#算术运算符\" class=\"headerlink\" title=\"算术运算符\"></a>算术运算符</h3><figure class=\"highlight python\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">+:加</span><br><span class=\"line\">-:减</span><br><span class=\"line\">*:乘</span><br><span class=\"line\">/:除(结果可以是<span class=\"built_in\">float</span>)</span><br><span class=\"line\">%:取余</span><br><span class=\"line\">**:幂运算 eg: print(<span class=\"number\">2</span>**<span class=\"number\">3</span>) <span class=\"comment\">#打印2的3次幂</span></span><br><span class=\"line\">//:整除(向下取整)</span><br><span class=\"line\">注：</span><br><span class=\"line\"><span class=\"comment\"># 可用幂运算进行开方运算</span></span><br><span class=\"line\">eg:print(<span class=\"number\">81</span>**(<span class=\"number\">1</span>/<span class=\"number\">2</span>)) <span class=\"comment\">#打印的是81开平方的结果，即为9</span></span><br><span class=\"line\"><span class=\"comment\"># 在Python2中，/得到的是一个整数;在Python3中得到是一个浮点数</span></span><br><span class=\"line\"><span class=\"comment\"># 在开发中使用括号来表示优先级,比较清晰</span></span><br></pre></td></tr></table></figure></li>\n<li><h3 id=\"算术运算符在字符串中的使用\"><a href=\"#算术运算符在字符串中的使用\" class=\"headerlink\" title=\"算术运算符在字符串中的使用\"></a>算术运算符在字符串中的使用</h3><figure class=\"highlight python\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\"># 在字符串中有限度的支持加法和乘法运算符</span></span><br><span class=\"line\">print(<span class=\"string\">&quot;hello&quot;</span>+<span class=\"string\">&quot;world&quot;</span>)   <span class=\"comment\"># 结果为 helloworld(用于拼接字符串)</span></span><br><span class=\"line\">print(<span class=\"string\">&quot;hello&quot;</span>*<span class=\"number\">2</span>)         <span class=\"comment\"># 结果为 hellohello</span></span><br><span class=\"line\">注：字符串和数字是不能相加的</span><br><span class=\"line\">print(<span class=\"string\">&quot;a&quot;</span>+<span class=\"number\">1</span>) <span class=\"comment\"># 会报错</span></span><br></pre></td></tr></table></figure></li>\n<li><h3 id=\"赋值运算符\"><a href=\"#赋值运算符\" class=\"headerlink\" title=\"赋值运算符\"></a>赋值运算符</h3><figure class=\"highlight python\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">a=<span class=\"number\">1</span> <span class=\"comment\"># 单个变量赋值</span></span><br><span class=\"line\">m,n=<span class=\"number\">1</span>,<span class=\"number\">2</span> <span class=\"comment\"># 多个变量赋值(拆包),且当等号左右两侧个数不相等时会报错</span></span><br><span class=\"line\">o*,p,q=<span class=\"number\">1</span>,<span class=\"number\">2</span>,<span class=\"number\">3</span>,<span class=\"number\">4</span>,<span class=\"number\">5</span> <span class=\"comment\">#加*表示可变长度,把4,5分别赋给p,q,其余全部赋值给o</span></span><br><span class=\"line\">m=<span class=\"string\">&#x27;hello&#x27;</span>,<span class=\"string\">&#x27;world&#x27;</span> <span class=\"comment\"># 元组赋值</span></span><br></pre></td></tr></table></figure></li>\n<li><h3 id=\"比较运算符\"><a href=\"#比较运算符\" class=\"headerlink\" title=\"比较运算符\"></a>比较运算符</h3><figure class=\"highlight python\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\"># 比较运算符</span></span><br><span class=\"line\">&gt;:大于</span><br><span class=\"line\">&lt;:小于</span><br><span class=\"line\">&gt;=:大于等于</span><br><span class=\"line\">&lt;=:小于等于</span><br><span class=\"line\">!=:不等于(在python2&lt;&gt;也表示不等于，python3不支持)</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\"># 比较运算符在字符串中的使用</span></span><br><span class=\"line\">print(<span class=\"string\">&#x27;a&#x27;</span>&lt;<span class=\"string\">&#x27;b&#x27;</span>) <span class=\"comment\"># 结果为true 按照ASCII码进行比较</span></span><br><span class=\"line\">print(<span class=\"string\">&#x27;abc&#x27;</span>&lt;<span class=\"string\">&#x27;b&#x27;</span>) <span class=\"comment\"># 结果为true,直接字符a,b相比得出结果</span></span><br><span class=\"line\">print(<span class=\"string\">&#x27;abc&#x27;</span>==<span class=\"string\">&#x27;abc&#x27;</span>) <span class=\"comment\"># 结果为true</span></span><br><span class=\"line\">在数字和字符串之间做==为true,做!=比较为false</span><br></pre></td></tr></table></figure></li>\n<li><h3 id=\"逻辑运算符\"><a href=\"#逻辑运算符\" class=\"headerlink\" title=\"逻辑运算符\"></a>逻辑运算符</h3><figure class=\"highlight python\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">and</span>:逻辑与</span><br><span class=\"line\"><span class=\"keyword\">or</span>:逻辑或</span><br><span class=\"line\"><span class=\"keyword\">not</span>:逻辑非</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">#规则</span></span><br><span class=\"line\">逻辑与规则:只有一个运算数是<span class=\"literal\">False</span>,结果就为<span class=\"literal\">False</span></span><br><span class=\"line\">逻辑或规则:只有一个运算数是<span class=\"literal\">True</span>,结果就为<span class=\"literal\">True</span></span><br><span class=\"line\">优先级:<span class=\"keyword\">not</span> &gt; <span class=\"keyword\">and</span> &gt; <span class=\"keyword\">or</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">#逻辑运算符的取值问题(逻辑运算结果不一定是bool值)</span></span><br><span class=\"line\">print(<span class=\"number\">3</span> <span class=\"keyword\">and</span> <span class=\"string\">&#x27;Hello&#x27;</span> <span class=\"keyword\">and</span> <span class=\"number\">0</span> <span class=\"keyword\">and</span> <span class=\"number\">2</span>) </span><br><span class=\"line\"><span class=\"comment\"># 结果为0(按照逻辑与的运算规则,有False则False)</span></span><br><span class=\"line\">print(<span class=\"number\">3</span> <span class=\"keyword\">or</span> <span class=\"number\">0</span>)</span><br><span class=\"line\"><span class=\"comment\"># 结果为3,逻辑或运算当有一个是True时，后面的将不会被执行</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">#逻辑运算符的短路问题</span></span><br><span class=\"line\"><span class=\"number\">4</span> &gt; <span class=\"number\">3</span> <span class=\"keyword\">and</span> print(<span class=\"string\">&#x27;hello world&#x27;</span>) </span><br><span class=\"line\"><span class=\"comment\"># 打印hello world</span></span><br><span class=\"line\"><span class=\"number\">4</span> &gt; <span class=\"number\">3</span> <span class=\"keyword\">or</span> print(<span class=\"string\">&#x27;hello world&#x27;</span>) </span><br><span class=\"line\"><span class=\"comment\"># print将会短路，因为逻辑或前面已经是True,后面将不会被执行</span></span><br></pre></td></tr></table></figure></li>\n<li><h3 id=\"位运算\"><a href=\"#位运算\" class=\"headerlink\" title=\"位运算\"></a>位运算</h3><figure class=\"highlight python\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">&amp;:按位与(都为<span class=\"number\">1</span>取<span class=\"number\">1</span>,否则取<span class=\"number\">0</span>)</span><br><span class=\"line\">|:按位或(有<span class=\"number\">1</span>取<span class=\"number\">1</span>,否则取<span class=\"number\">0</span>)</span><br><span class=\"line\">^:按位异或(不同取<span class=\"number\">1</span>,相同取<span class=\"number\">0</span>)</span><br><span class=\"line\">~:按位取反(<span class=\"number\">0</span>取<span class=\"number\">1</span>,<span class=\"number\">1</span>取<span class=\"number\">0</span>)</span><br><span class=\"line\">&lt;&lt;:左移(向左移,后面补<span class=\"number\">0</span>)</span><br><span class=\"line\">&gt;&gt;:右移(向右移,数据会丢失)</span><br><span class=\"line\"><span class=\"comment\"># 左移:x左移a位结果为x乘以2的a次方</span></span><br><span class=\"line\"><span class=\"comment\"># 右移:x右移a位结果为x除以2的a次方(取整)</span></span><br></pre></td></tr></table></figure>\n</li>\n</ol>\n","site":{"data":{}},"length":1404,"excerpt":"","more":"<h2 id=\"运算符\"><a href=\"#运算符\" class=\"headerlink\" title=\"运算符\"></a>运算符</h2><ol>\n<li><h3 id=\"算术运算符\"><a href=\"#算术运算符\" class=\"headerlink\" title=\"算术运算符\"></a>算术运算符</h3><figure class=\"highlight python\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">+:加</span><br><span class=\"line\">-:减</span><br><span class=\"line\">*:乘</span><br><span class=\"line\">/:除(结果可以是<span class=\"built_in\">float</span>)</span><br><span class=\"line\">%:取余</span><br><span class=\"line\">**:幂运算 eg: print(<span class=\"number\">2</span>**<span class=\"number\">3</span>) <span class=\"comment\">#打印2的3次幂</span></span><br><span class=\"line\">//:整除(向下取整)</span><br><span class=\"line\">注：</span><br><span class=\"line\"><span class=\"comment\"># 可用幂运算进行开方运算</span></span><br><span class=\"line\">eg:print(<span class=\"number\">81</span>**(<span class=\"number\">1</span>/<span class=\"number\">2</span>)) <span class=\"comment\">#打印的是81开平方的结果，即为9</span></span><br><span class=\"line\"><span class=\"comment\"># 在Python2中，/得到的是一个整数;在Python3中得到是一个浮点数</span></span><br><span class=\"line\"><span class=\"comment\"># 在开发中使用括号来表示优先级,比较清晰</span></span><br></pre></td></tr></table></figure></li>\n<li><h3 id=\"算术运算符在字符串中的使用\"><a href=\"#算术运算符在字符串中的使用\" class=\"headerlink\" title=\"算术运算符在字符串中的使用\"></a>算术运算符在字符串中的使用</h3><figure class=\"highlight python\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\"># 在字符串中有限度的支持加法和乘法运算符</span></span><br><span class=\"line\">print(<span class=\"string\">&quot;hello&quot;</span>+<span class=\"string\">&quot;world&quot;</span>)   <span class=\"comment\"># 结果为 helloworld(用于拼接字符串)</span></span><br><span class=\"line\">print(<span class=\"string\">&quot;hello&quot;</span>*<span class=\"number\">2</span>)         <span class=\"comment\"># 结果为 hellohello</span></span><br><span class=\"line\">注：字符串和数字是不能相加的</span><br><span class=\"line\">print(<span class=\"string\">&quot;a&quot;</span>+<span class=\"number\">1</span>) <span class=\"comment\"># 会报错</span></span><br></pre></td></tr></table></figure></li>\n<li><h3 id=\"赋值运算符\"><a href=\"#赋值运算符\" class=\"headerlink\" title=\"赋值运算符\"></a>赋值运算符</h3><figure class=\"highlight python\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">a=<span class=\"number\">1</span> <span class=\"comment\"># 单个变量赋值</span></span><br><span class=\"line\">m,n=<span class=\"number\">1</span>,<span class=\"number\">2</span> <span class=\"comment\"># 多个变量赋值(拆包),且当等号左右两侧个数不相等时会报错</span></span><br><span class=\"line\">o*,p,q=<span class=\"number\">1</span>,<span class=\"number\">2</span>,<span class=\"number\">3</span>,<span class=\"number\">4</span>,<span class=\"number\">5</span> <span class=\"comment\">#加*表示可变长度,把4,5分别赋给p,q,其余全部赋值给o</span></span><br><span class=\"line\">m=<span class=\"string\">&#x27;hello&#x27;</span>,<span class=\"string\">&#x27;world&#x27;</span> <span class=\"comment\"># 元组赋值</span></span><br></pre></td></tr></table></figure></li>\n<li><h3 id=\"比较运算符\"><a href=\"#比较运算符\" class=\"headerlink\" title=\"比较运算符\"></a>比较运算符</h3><figure class=\"highlight python\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\"># 比较运算符</span></span><br><span class=\"line\">&gt;:大于</span><br><span class=\"line\">&lt;:小于</span><br><span class=\"line\">&gt;=:大于等于</span><br><span class=\"line\">&lt;=:小于等于</span><br><span class=\"line\">!=:不等于(在python2&lt;&gt;也表示不等于，python3不支持)</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\"># 比较运算符在字符串中的使用</span></span><br><span class=\"line\">print(<span class=\"string\">&#x27;a&#x27;</span>&lt;<span class=\"string\">&#x27;b&#x27;</span>) <span class=\"comment\"># 结果为true 按照ASCII码进行比较</span></span><br><span class=\"line\">print(<span class=\"string\">&#x27;abc&#x27;</span>&lt;<span class=\"string\">&#x27;b&#x27;</span>) <span class=\"comment\"># 结果为true,直接字符a,b相比得出结果</span></span><br><span class=\"line\">print(<span class=\"string\">&#x27;abc&#x27;</span>==<span class=\"string\">&#x27;abc&#x27;</span>) <span class=\"comment\"># 结果为true</span></span><br><span class=\"line\">在数字和字符串之间做==为true,做!=比较为false</span><br></pre></td></tr></table></figure></li>\n<li><h3 id=\"逻辑运算符\"><a href=\"#逻辑运算符\" class=\"headerlink\" title=\"逻辑运算符\"></a>逻辑运算符</h3><figure class=\"highlight python\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">and</span>:逻辑与</span><br><span class=\"line\"><span class=\"keyword\">or</span>:逻辑或</span><br><span class=\"line\"><span class=\"keyword\">not</span>:逻辑非</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">#规则</span></span><br><span class=\"line\">逻辑与规则:只有一个运算数是<span class=\"literal\">False</span>,结果就为<span class=\"literal\">False</span></span><br><span class=\"line\">逻辑或规则:只有一个运算数是<span class=\"literal\">True</span>,结果就为<span class=\"literal\">True</span></span><br><span class=\"line\">优先级:<span class=\"keyword\">not</span> &gt; <span class=\"keyword\">and</span> &gt; <span class=\"keyword\">or</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">#逻辑运算符的取值问题(逻辑运算结果不一定是bool值)</span></span><br><span class=\"line\">print(<span class=\"number\">3</span> <span class=\"keyword\">and</span> <span class=\"string\">&#x27;Hello&#x27;</span> <span class=\"keyword\">and</span> <span class=\"number\">0</span> <span class=\"keyword\">and</span> <span class=\"number\">2</span>) </span><br><span class=\"line\"><span class=\"comment\"># 结果为0(按照逻辑与的运算规则,有False则False)</span></span><br><span class=\"line\">print(<span class=\"number\">3</span> <span class=\"keyword\">or</span> <span class=\"number\">0</span>)</span><br><span class=\"line\"><span class=\"comment\"># 结果为3,逻辑或运算当有一个是True时，后面的将不会被执行</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">#逻辑运算符的短路问题</span></span><br><span class=\"line\"><span class=\"number\">4</span> &gt; <span class=\"number\">3</span> <span class=\"keyword\">and</span> print(<span class=\"string\">&#x27;hello world&#x27;</span>) </span><br><span class=\"line\"><span class=\"comment\"># 打印hello world</span></span><br><span class=\"line\"><span class=\"number\">4</span> &gt; <span class=\"number\">3</span> <span class=\"keyword\">or</span> print(<span class=\"string\">&#x27;hello world&#x27;</span>) </span><br><span class=\"line\"><span class=\"comment\"># print将会短路，因为逻辑或前面已经是True,后面将不会被执行</span></span><br></pre></td></tr></table></figure></li>\n<li><h3 id=\"位运算\"><a href=\"#位运算\" class=\"headerlink\" title=\"位运算\"></a>位运算</h3><figure class=\"highlight python\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">&amp;:按位与(都为<span class=\"number\">1</span>取<span class=\"number\">1</span>,否则取<span class=\"number\">0</span>)</span><br><span class=\"line\">|:按位或(有<span class=\"number\">1</span>取<span class=\"number\">1</span>,否则取<span class=\"number\">0</span>)</span><br><span class=\"line\">^:按位异或(不同取<span class=\"number\">1</span>,相同取<span class=\"number\">0</span>)</span><br><span class=\"line\">~:按位取反(<span class=\"number\">0</span>取<span class=\"number\">1</span>,<span class=\"number\">1</span>取<span class=\"number\">0</span>)</span><br><span class=\"line\">&lt;&lt;:左移(向左移,后面补<span class=\"number\">0</span>)</span><br><span class=\"line\">&gt;&gt;:右移(向右移,数据会丢失)</span><br><span class=\"line\"><span class=\"comment\"># 左移:x左移a位结果为x乘以2的a次方</span></span><br><span class=\"line\"><span class=\"comment\"># 右移:x右移a位结果为x除以2的a次方(取整)</span></span><br></pre></td></tr></table></figure>\n</li>\n</ol>\n"},{"title":"createjs小游戏笔记","abbrlink":6052,"date":"2021-07-08T16:37:05.000Z","_content":"1. 创建舞台\n```javascript\nlet stage = new createjs.Stage();//()中为画布的id,与画布进行绑定\n```\n2. 创建容器\n```javascript\nlet gameView = new createjs.Container();\nstage.addChild(gameView);//可将容器放在舞台中，创建的元素放在容器中\nstage > container > 单个元素//三代之间的关系，可通过addChild()方法进行追加元素\n```\n3. 创建图形\n```javascript\nlet shape = new createjs.Shape();//创建一个图形\nshape.graphics.beginFill(color)drawRect(x,y,w,h);//画一个矩形\nshape.graphics.beginFill(color)drawRoundRect(x,y,w,h,radius);//画圆角矩形\nshape.graphics.beginFill(color)drawCircle(x,y,r);//画圆\n```\n4. 创建图片\n```javascript\nlet img = new createjs.Bitmap();//括号中为图片路径\n```\n5. 创建文字\n```javascript\nlet text = new createjs.Text(text,font,color);//创建文字\n//属性\ntext.lineWidth  //设置行宽\ntext.lineHeight //设置行高\ntext.textAlign  //设置对齐方式\n注：\n当设置左对齐的时候，text.x的值为文字的起始点横坐标；\n当设置右对齐的时候，text.x的值为文字的结束点横坐标；\n当设置居中对齐的时候，text.x的值为文字的中间点横坐标；\n当设置lineWidth会出现中文不换行问题见19；\n```\n6. 常见属性和方法\n```javascript\ndemo.x //设置起始位置横坐标\ndemo.y //设置起始位置纵坐标\ndemo.alpha //设置透明度\ndemo.x //设置起始位置横坐标\ndemo.y //设置起始位置纵坐标\ndemo.scaleX //水平变换\ndemo.scaleY //垂直变换\ndemo.scale  //整体变换\ndemo.alpha  //设置透明度\ndemo.mask   //设置蒙版\ndemo.name   //设置名称\ndemo.visible //设置元素是否显示 \ndemo.removeAllChildren(); //移除所有子元素\nparent.addChild(child); //添加子元素\nparent.setChildIndex(child,parent.getNumChildren()-num);//设置层级\n注：\n1. 当alpha为0时不能触发事件；\n2. mask显示的内容为和蒙版重合的部分，为蒙版不追加入img的父元素中；\n```\n7. 雪碧图\n```javascript\nlet data = {\n    images: [url],//图片路径\n    frames: {width:w,height:h,count:count},//w,h是一张精灵图的实际宽高，count的图片数量\n    animations: {\n        run: {\n            frames:[0,3],//显示哪几张图片，0，3为0～3四张\n            speed:0.5 //图片运动速度\n        },\n    }\n};\nlet spriteSheet = new createjs.SpriteSheet(data);\nlet animation = new createjs.Sprite(spriteSheet,\"run\");\nnimation.set({x:x,y:y,scaleX:scaleX,scaleY:scaleY});\n```\n8. 创建动画\n```javascript\ncreatejs.Tween.get(元素).to({属性:值},时间)；//异步执行\ncreatejs.Tween.get(元素).to({属性:值},时间).call(function(){})；//function()和动画同步执行，会在动画结束后执行\n```\n9. 资源预加载\n```javascript\n$.when(filePreload()).then(function(){});\n//预加载完成后在执行then后面的函数\nfunction filePreload(){\n    //deferred对象的含义就是\"延迟\"到未来某个点再执行。\n    let deferred = new $.Deferred();\n    //preload可以方便我们预先加载相关资源\n    let queue = new createjs.LoadQueue(false);\n    //如果载入声音，必须先注册createjs.Sound\n    queue.installPlugin(createjs.Sound);\n    //将需要预加载的资源放在manifest数组中\n    //url：资源的路径\n    //id:给资源重新定义的名字，调用改资源时使用\n    let manifest = [\n        {id:id,src:url\"}\n    ];\n    //预加载过程中执行的函数\n    //当调用某一资源时使用bitmapList[id].clone(),且bitmapList需为全局变量\n    queue.on(\"fileload\", function (event) {\n        if (event.item.type == \"image\") {\n            bitmapList[event.item.id] = new createjs.Bitmap(event.result);\n            }\n        }\n    }, this);\n    //预加载完成后执行的函数\n    queue.on(\"complete\", function (event) {\n        deferred.resolve();\n    }, this);\n    queue.loadManifest(manifest);\n    return deferred.promise();\n}\n```\n10. 设置旋转(竖屏转成横屏) \n```javascript\nstage.rotation = 90;\nstage.x = screenWidth;\nstage.y = 0;\nlet temp = screenWidth;\nscreenWidth = screenHeight;\nscreenHeight = temp;\n注：等号右侧为竖屏宽高，左侧为横屏宽高\n```\n11. 当使用高清图片时若图片还是不清晰，可适当扩大画布的倍数；\n12. 当使用onload方法且需要传参时，避免异步的影响\n```javascript\n//如加载图片时，图片没有加载好就获取图片属性会报错\n//若在for循环中，可能计数i会产生影响\nlet img = new Image();\nimg.src = url;\nimg.index = 1;\nimg.onload = function(){\n    console.log(img.index);\n}\n//可推广\nlet obj = {};\nobj.x = 1;\nobg.onload = function(){\n    console.log(obj.x);\n}\n```\n13. 动态修改shape图形的参数\n```javascript\nshape.graphics.command.属性 = 值；\n```\n14. 实现container的滚动\n```javascript\n//主函数\nif(createjs.Touch.isSupported() == true){\n        createjs.Touch.enable(stage)\n    }\n//设置滚动条件\nlet localPos,y;\ngameView.addEventListener('mousedown',function(evt){\n    //滑动开始时的位置\n    let stageX = evt.stageX;\n    let stageY = evt.stageY;\n    //将gameView对象从舞台（全局）坐标转换为显示对象的（本地）坐标\n    localPos = stage.globalToLocal(stageX,stageY);\n    //获取gameview对象的坐标\n    y = gameView.y;\n})\ngameView.addEventListener('pressmove',function(evt){\n    //gameview.y = 滑动结束时滑动点处的y-滑动开始时滑动点处的y+滑动开始时gameview的y\n    let move_y = evt.stageY - localPos.y + y;\n    //通过滑动区域y坐标的大小限制滑动区域\n    if(move_y >= -(滑动区域.y-显示区域.y) && move_y <= 0){\n        gameView.y = move_y;\n    }\n})\n```\n15. 全局只需要在入口函数设置tick刷新舞台即可；\n16. 适配不同的手机屏幕可通过长宽比例进行适配； \n17. js合并两个数组\n```javascript\narr1 = arr1.concat(arr2);\n```\n18. 获取屏幕的宽高\n```javascript\nlet screenWidth = window.innerWidth;\nlet screenHeight = window.innerHeight;\n```\n19. EaselJS的Text中文不会自动换行的问题\n修改easeljs的p._drawText方法为\n[点击](https://pasteme.cn/135634)\n","source":"_posts/createjs小游戏笔记.md","raw":"---\ntitle: createjs小游戏笔记\ntags:\n  - 前端\n  - createjs\ncategories: 前端\nabbrlink: 6052\ndate: 2021-07-09 00:37:05\n---\n1. 创建舞台\n```javascript\nlet stage = new createjs.Stage();//()中为画布的id,与画布进行绑定\n```\n2. 创建容器\n```javascript\nlet gameView = new createjs.Container();\nstage.addChild(gameView);//可将容器放在舞台中，创建的元素放在容器中\nstage > container > 单个元素//三代之间的关系，可通过addChild()方法进行追加元素\n```\n3. 创建图形\n```javascript\nlet shape = new createjs.Shape();//创建一个图形\nshape.graphics.beginFill(color)drawRect(x,y,w,h);//画一个矩形\nshape.graphics.beginFill(color)drawRoundRect(x,y,w,h,radius);//画圆角矩形\nshape.graphics.beginFill(color)drawCircle(x,y,r);//画圆\n```\n4. 创建图片\n```javascript\nlet img = new createjs.Bitmap();//括号中为图片路径\n```\n5. 创建文字\n```javascript\nlet text = new createjs.Text(text,font,color);//创建文字\n//属性\ntext.lineWidth  //设置行宽\ntext.lineHeight //设置行高\ntext.textAlign  //设置对齐方式\n注：\n当设置左对齐的时候，text.x的值为文字的起始点横坐标；\n当设置右对齐的时候，text.x的值为文字的结束点横坐标；\n当设置居中对齐的时候，text.x的值为文字的中间点横坐标；\n当设置lineWidth会出现中文不换行问题见19；\n```\n6. 常见属性和方法\n```javascript\ndemo.x //设置起始位置横坐标\ndemo.y //设置起始位置纵坐标\ndemo.alpha //设置透明度\ndemo.x //设置起始位置横坐标\ndemo.y //设置起始位置纵坐标\ndemo.scaleX //水平变换\ndemo.scaleY //垂直变换\ndemo.scale  //整体变换\ndemo.alpha  //设置透明度\ndemo.mask   //设置蒙版\ndemo.name   //设置名称\ndemo.visible //设置元素是否显示 \ndemo.removeAllChildren(); //移除所有子元素\nparent.addChild(child); //添加子元素\nparent.setChildIndex(child,parent.getNumChildren()-num);//设置层级\n注：\n1. 当alpha为0时不能触发事件；\n2. mask显示的内容为和蒙版重合的部分，为蒙版不追加入img的父元素中；\n```\n7. 雪碧图\n```javascript\nlet data = {\n    images: [url],//图片路径\n    frames: {width:w,height:h,count:count},//w,h是一张精灵图的实际宽高，count的图片数量\n    animations: {\n        run: {\n            frames:[0,3],//显示哪几张图片，0，3为0～3四张\n            speed:0.5 //图片运动速度\n        },\n    }\n};\nlet spriteSheet = new createjs.SpriteSheet(data);\nlet animation = new createjs.Sprite(spriteSheet,\"run\");\nnimation.set({x:x,y:y,scaleX:scaleX,scaleY:scaleY});\n```\n8. 创建动画\n```javascript\ncreatejs.Tween.get(元素).to({属性:值},时间)；//异步执行\ncreatejs.Tween.get(元素).to({属性:值},时间).call(function(){})；//function()和动画同步执行，会在动画结束后执行\n```\n9. 资源预加载\n```javascript\n$.when(filePreload()).then(function(){});\n//预加载完成后在执行then后面的函数\nfunction filePreload(){\n    //deferred对象的含义就是\"延迟\"到未来某个点再执行。\n    let deferred = new $.Deferred();\n    //preload可以方便我们预先加载相关资源\n    let queue = new createjs.LoadQueue(false);\n    //如果载入声音，必须先注册createjs.Sound\n    queue.installPlugin(createjs.Sound);\n    //将需要预加载的资源放在manifest数组中\n    //url：资源的路径\n    //id:给资源重新定义的名字，调用改资源时使用\n    let manifest = [\n        {id:id,src:url\"}\n    ];\n    //预加载过程中执行的函数\n    //当调用某一资源时使用bitmapList[id].clone(),且bitmapList需为全局变量\n    queue.on(\"fileload\", function (event) {\n        if (event.item.type == \"image\") {\n            bitmapList[event.item.id] = new createjs.Bitmap(event.result);\n            }\n        }\n    }, this);\n    //预加载完成后执行的函数\n    queue.on(\"complete\", function (event) {\n        deferred.resolve();\n    }, this);\n    queue.loadManifest(manifest);\n    return deferred.promise();\n}\n```\n10. 设置旋转(竖屏转成横屏) \n```javascript\nstage.rotation = 90;\nstage.x = screenWidth;\nstage.y = 0;\nlet temp = screenWidth;\nscreenWidth = screenHeight;\nscreenHeight = temp;\n注：等号右侧为竖屏宽高，左侧为横屏宽高\n```\n11. 当使用高清图片时若图片还是不清晰，可适当扩大画布的倍数；\n12. 当使用onload方法且需要传参时，避免异步的影响\n```javascript\n//如加载图片时，图片没有加载好就获取图片属性会报错\n//若在for循环中，可能计数i会产生影响\nlet img = new Image();\nimg.src = url;\nimg.index = 1;\nimg.onload = function(){\n    console.log(img.index);\n}\n//可推广\nlet obj = {};\nobj.x = 1;\nobg.onload = function(){\n    console.log(obj.x);\n}\n```\n13. 动态修改shape图形的参数\n```javascript\nshape.graphics.command.属性 = 值；\n```\n14. 实现container的滚动\n```javascript\n//主函数\nif(createjs.Touch.isSupported() == true){\n        createjs.Touch.enable(stage)\n    }\n//设置滚动条件\nlet localPos,y;\ngameView.addEventListener('mousedown',function(evt){\n    //滑动开始时的位置\n    let stageX = evt.stageX;\n    let stageY = evt.stageY;\n    //将gameView对象从舞台（全局）坐标转换为显示对象的（本地）坐标\n    localPos = stage.globalToLocal(stageX,stageY);\n    //获取gameview对象的坐标\n    y = gameView.y;\n})\ngameView.addEventListener('pressmove',function(evt){\n    //gameview.y = 滑动结束时滑动点处的y-滑动开始时滑动点处的y+滑动开始时gameview的y\n    let move_y = evt.stageY - localPos.y + y;\n    //通过滑动区域y坐标的大小限制滑动区域\n    if(move_y >= -(滑动区域.y-显示区域.y) && move_y <= 0){\n        gameView.y = move_y;\n    }\n})\n```\n15. 全局只需要在入口函数设置tick刷新舞台即可；\n16. 适配不同的手机屏幕可通过长宽比例进行适配； \n17. js合并两个数组\n```javascript\narr1 = arr1.concat(arr2);\n```\n18. 获取屏幕的宽高\n```javascript\nlet screenWidth = window.innerWidth;\nlet screenHeight = window.innerHeight;\n```\n19. EaselJS的Text中文不会自动换行的问题\n修改easeljs的p._drawText方法为\n[点击](https://pasteme.cn/135634)\n","slug":"createjs小游戏笔记","published":1,"updated":"2021-07-27T14:51:43.517Z","comments":1,"layout":"post","photos":[],"link":"","_id":"ckrmv4jhl001ozrfy39iscnhl","content":"<ol>\n<li>创建舞台<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">let</span> stage = <span class=\"keyword\">new</span> createjs.Stage();<span class=\"comment\">//()中为画布的id,与画布进行绑定</span></span><br></pre></td></tr></table></figure></li>\n<li>创建容器<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">let</span> gameView = <span class=\"keyword\">new</span> createjs.Container();</span><br><span class=\"line\">stage.addChild(gameView);<span class=\"comment\">//可将容器放在舞台中，创建的元素放在容器中</span></span><br><span class=\"line\">stage &gt; container &gt; 单个元素<span class=\"comment\">//三代之间的关系，可通过addChild()方法进行追加元素</span></span><br></pre></td></tr></table></figure></li>\n<li>创建图形<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">let</span> shape = <span class=\"keyword\">new</span> createjs.Shape();<span class=\"comment\">//创建一个图形</span></span><br><span class=\"line\">shape.graphics.beginFill(color)drawRect(x,y,w,h);<span class=\"comment\">//画一个矩形</span></span><br><span class=\"line\">shape.graphics.beginFill(color)drawRoundRect(x,y,w,h,radius);<span class=\"comment\">//画圆角矩形</span></span><br><span class=\"line\">shape.graphics.beginFill(color)drawCircle(x,y,r);<span class=\"comment\">//画圆</span></span><br></pre></td></tr></table></figure></li>\n<li>创建图片<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">let</span> img = <span class=\"keyword\">new</span> createjs.Bitmap();<span class=\"comment\">//括号中为图片路径</span></span><br></pre></td></tr></table></figure></li>\n<li>创建文字<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">let</span> text = <span class=\"keyword\">new</span> createjs.Text(text,font,color);<span class=\"comment\">//创建文字</span></span><br><span class=\"line\"><span class=\"comment\">//属性</span></span><br><span class=\"line\">text.lineWidth  <span class=\"comment\">//设置行宽</span></span><br><span class=\"line\">text.lineHeight <span class=\"comment\">//设置行高</span></span><br><span class=\"line\">text.textAlign  <span class=\"comment\">//设置对齐方式</span></span><br><span class=\"line\">注：</span><br><span class=\"line\">当设置左对齐的时候，text.x的值为文字的起始点横坐标；</span><br><span class=\"line\">当设置右对齐的时候，text.x的值为文字的结束点横坐标；</span><br><span class=\"line\">当设置居中对齐的时候，text.x的值为文字的中间点横坐标；</span><br><span class=\"line\">当设置lineWidth会出现中文不换行问题见<span class=\"number\">19</span>；</span><br></pre></td></tr></table></figure></li>\n<li>常见属性和方法<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">demo.x <span class=\"comment\">//设置起始位置横坐标</span></span><br><span class=\"line\">demo.y <span class=\"comment\">//设置起始位置纵坐标</span></span><br><span class=\"line\">demo.alpha <span class=\"comment\">//设置透明度</span></span><br><span class=\"line\">demo.x <span class=\"comment\">//设置起始位置横坐标</span></span><br><span class=\"line\">demo.y <span class=\"comment\">//设置起始位置纵坐标</span></span><br><span class=\"line\">demo.scaleX <span class=\"comment\">//水平变换</span></span><br><span class=\"line\">demo.scaleY <span class=\"comment\">//垂直变换</span></span><br><span class=\"line\">demo.scale  <span class=\"comment\">//整体变换</span></span><br><span class=\"line\">demo.alpha  <span class=\"comment\">//设置透明度</span></span><br><span class=\"line\">demo.mask   <span class=\"comment\">//设置蒙版</span></span><br><span class=\"line\">demo.name   <span class=\"comment\">//设置名称</span></span><br><span class=\"line\">demo.visible <span class=\"comment\">//设置元素是否显示 </span></span><br><span class=\"line\">demo.removeAllChildren(); <span class=\"comment\">//移除所有子元素</span></span><br><span class=\"line\">parent.addChild(child); <span class=\"comment\">//添加子元素</span></span><br><span class=\"line\">parent.setChildIndex(child,parent.getNumChildren()-num);<span class=\"comment\">//设置层级</span></span><br><span class=\"line\">注：</span><br><span class=\"line\"><span class=\"number\">1.</span> 当alpha为<span class=\"number\">0</span>时不能触发事件；</span><br><span class=\"line\"><span class=\"number\">2.</span> mask显示的内容为和蒙版重合的部分，为蒙版不追加入img的父元素中；</span><br></pre></td></tr></table></figure></li>\n<li>雪碧图<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">let</span> data = &#123;</span><br><span class=\"line\">    images: [url],<span class=\"comment\">//图片路径</span></span><br><span class=\"line\">    frames: &#123;<span class=\"attr\">width</span>:w,<span class=\"attr\">height</span>:h,<span class=\"attr\">count</span>:count&#125;,<span class=\"comment\">//w,h是一张精灵图的实际宽高，count的图片数量</span></span><br><span class=\"line\">    animations: &#123;</span><br><span class=\"line\">        run: &#123;</span><br><span class=\"line\">            frames:[<span class=\"number\">0</span>,<span class=\"number\">3</span>],<span class=\"comment\">//显示哪几张图片，0，3为0～3四张</span></span><br><span class=\"line\">            speed:<span class=\"number\">0.5</span> <span class=\"comment\">//图片运动速度</span></span><br><span class=\"line\">        &#125;,</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;;</span><br><span class=\"line\"><span class=\"keyword\">let</span> spriteSheet = <span class=\"keyword\">new</span> createjs.SpriteSheet(data);</span><br><span class=\"line\"><span class=\"keyword\">let</span> animation = <span class=\"keyword\">new</span> createjs.Sprite(spriteSheet,<span class=\"string\">&quot;run&quot;</span>);</span><br><span class=\"line\">nimation.set(&#123;<span class=\"attr\">x</span>:x,<span class=\"attr\">y</span>:y,<span class=\"attr\">scaleX</span>:scaleX,<span class=\"attr\">scaleY</span>:scaleY&#125;);</span><br></pre></td></tr></table></figure></li>\n<li>创建动画<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">createjs.Tween.get(元素).to(&#123;属性:值&#125;,时间)；<span class=\"comment\">//异步执行</span></span><br><span class=\"line\">createjs.Tween.get(元素).to(&#123;属性:值&#125;,时间).call(<span class=\"function\"><span class=\"keyword\">function</span>(<span class=\"params\"></span>)</span>&#123;&#125;)；<span class=\"comment\">//function()和动画同步执行，会在动画结束后执行</span></span><br></pre></td></tr></table></figure></li>\n<li>资源预加载<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">$.when(filePreload()).then(<span class=\"function\"><span class=\"keyword\">function</span>(<span class=\"params\"></span>)</span>&#123;&#125;);</span><br><span class=\"line\"><span class=\"comment\">//预加载完成后在执行then后面的函数</span></span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">function</span> <span class=\"title\">filePreload</span>(<span class=\"params\"></span>)</span>&#123;</span><br><span class=\"line\">    <span class=\"comment\">//deferred对象的含义就是&quot;延迟&quot;到未来某个点再执行。</span></span><br><span class=\"line\">    <span class=\"keyword\">let</span> deferred = <span class=\"keyword\">new</span> $.Deferred();</span><br><span class=\"line\">    <span class=\"comment\">//preload可以方便我们预先加载相关资源</span></span><br><span class=\"line\">    <span class=\"keyword\">let</span> queue = <span class=\"keyword\">new</span> createjs.LoadQueue(<span class=\"literal\">false</span>);</span><br><span class=\"line\">    <span class=\"comment\">//如果载入声音，必须先注册createjs.Sound</span></span><br><span class=\"line\">    queue.installPlugin(createjs.Sound);</span><br><span class=\"line\">    <span class=\"comment\">//将需要预加载的资源放在manifest数组中</span></span><br><span class=\"line\">    <span class=\"comment\">//url：资源的路径</span></span><br><span class=\"line\">    <span class=\"comment\">//id:给资源重新定义的名字，调用改资源时使用</span></span><br><span class=\"line\">    <span class=\"keyword\">let</span> manifest = [</span><br><span class=\"line\">        &#123;<span class=\"attr\">id</span>:id,<span class=\"attr\">src</span>:url<span class=\"string\">&quot;&#125;</span></span><br><span class=\"line\"><span class=\"string\">    ];</span></span><br><span class=\"line\"><span class=\"string\">    //预加载过程中执行的函数</span></span><br><span class=\"line\"><span class=\"string\">    //当调用某一资源时使用bitmapList[id].clone(),且bitmapList需为全局变量</span></span><br><span class=\"line\"><span class=\"string\">    queue.on(&quot;</span>fileload<span class=\"string\">&quot;, function (event) &#123;</span></span><br><span class=\"line\"><span class=\"string\">        if (event.item.type == &quot;</span>image<span class=\"string\">&quot;) &#123;</span></span><br><span class=\"line\"><span class=\"string\">            bitmapList[event.item.id] = new createjs.Bitmap(event.result);</span></span><br><span class=\"line\"><span class=\"string\">            &#125;</span></span><br><span class=\"line\"><span class=\"string\">        &#125;</span></span><br><span class=\"line\"><span class=\"string\">    &#125;, this);</span></span><br><span class=\"line\"><span class=\"string\">    //预加载完成后执行的函数</span></span><br><span class=\"line\"><span class=\"string\">    queue.on(&quot;</span>complete<span class=\"string\">&quot;, function (event) &#123;</span></span><br><span class=\"line\"><span class=\"string\">        deferred.resolve();</span></span><br><span class=\"line\"><span class=\"string\">    &#125;, this);</span></span><br><span class=\"line\"><span class=\"string\">    queue.loadManifest(manifest);</span></span><br><span class=\"line\"><span class=\"string\">    return deferred.promise();</span></span><br><span class=\"line\"><span class=\"string\">&#125;</span></span><br></pre></td></tr></table></figure></li>\n<li>设置旋转(竖屏转成横屏) <figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">stage.rotation = <span class=\"number\">90</span>;</span><br><span class=\"line\">stage.x = screenWidth;</span><br><span class=\"line\">stage.y = <span class=\"number\">0</span>;</span><br><span class=\"line\"><span class=\"keyword\">let</span> temp = screenWidth;</span><br><span class=\"line\">screenWidth = screenHeight;</span><br><span class=\"line\">screenHeight = temp;</span><br><span class=\"line\">注：等号右侧为竖屏宽高，左侧为横屏宽高</span><br></pre></td></tr></table></figure></li>\n<li>当使用高清图片时若图片还是不清晰，可适当扩大画布的倍数；</li>\n<li>当使用onload方法且需要传参时，避免异步的影响<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">//如加载图片时，图片没有加载好就获取图片属性会报错</span></span><br><span class=\"line\"><span class=\"comment\">//若在for循环中，可能计数i会产生影响</span></span><br><span class=\"line\"><span class=\"keyword\">let</span> img = <span class=\"keyword\">new</span> Image();</span><br><span class=\"line\">img.src = url;</span><br><span class=\"line\">img.index = <span class=\"number\">1</span>;</span><br><span class=\"line\">img.onload = <span class=\"function\"><span class=\"keyword\">function</span>(<span class=\"params\"></span>)</span>&#123;</span><br><span class=\"line\">    <span class=\"built_in\">console</span>.log(img.index);</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"><span class=\"comment\">//可推广</span></span><br><span class=\"line\"><span class=\"keyword\">let</span> obj = &#123;&#125;;</span><br><span class=\"line\">obj.x = <span class=\"number\">1</span>;</span><br><span class=\"line\">obg.onload = <span class=\"function\"><span class=\"keyword\">function</span>(<span class=\"params\"></span>)</span>&#123;</span><br><span class=\"line\">    <span class=\"built_in\">console</span>.log(obj.x);</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure></li>\n<li>动态修改shape图形的参数<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">shape.graphics.command.属性 = 值；</span><br></pre></td></tr></table></figure></li>\n<li>实现container的滚动<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">//主函数</span></span><br><span class=\"line\"><span class=\"keyword\">if</span>(createjs.Touch.isSupported() == <span class=\"literal\">true</span>)&#123;</span><br><span class=\"line\">        createjs.Touch.enable(stage)</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"><span class=\"comment\">//设置滚动条件</span></span><br><span class=\"line\"><span class=\"keyword\">let</span> localPos,y;</span><br><span class=\"line\">gameView.addEventListener(<span class=\"string\">&#x27;mousedown&#x27;</span>,<span class=\"function\"><span class=\"keyword\">function</span>(<span class=\"params\">evt</span>)</span>&#123;</span><br><span class=\"line\">    <span class=\"comment\">//滑动开始时的位置</span></span><br><span class=\"line\">    <span class=\"keyword\">let</span> stageX = evt.stageX;</span><br><span class=\"line\">    <span class=\"keyword\">let</span> stageY = evt.stageY;</span><br><span class=\"line\">    <span class=\"comment\">//将gameView对象从舞台（全局）坐标转换为显示对象的（本地）坐标</span></span><br><span class=\"line\">    localPos = stage.globalToLocal(stageX,stageY);</span><br><span class=\"line\">    <span class=\"comment\">//获取gameview对象的坐标</span></span><br><span class=\"line\">    y = gameView.y;</span><br><span class=\"line\">&#125;)</span><br><span class=\"line\">gameView.addEventListener(<span class=\"string\">&#x27;pressmove&#x27;</span>,<span class=\"function\"><span class=\"keyword\">function</span>(<span class=\"params\">evt</span>)</span>&#123;</span><br><span class=\"line\">    <span class=\"comment\">//gameview.y = 滑动结束时滑动点处的y-滑动开始时滑动点处的y+滑动开始时gameview的y</span></span><br><span class=\"line\">    <span class=\"keyword\">let</span> move_y = evt.stageY - localPos.y + y;</span><br><span class=\"line\">    <span class=\"comment\">//通过滑动区域y坐标的大小限制滑动区域</span></span><br><span class=\"line\">    <span class=\"keyword\">if</span>(move_y &gt;= -(滑动区域.y-显示区域.y) &amp;&amp; move_y &lt;= <span class=\"number\">0</span>)&#123;</span><br><span class=\"line\">        gameView.y = move_y;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;)</span><br></pre></td></tr></table></figure></li>\n<li>全局只需要在入口函数设置tick刷新舞台即可；</li>\n<li>适配不同的手机屏幕可通过长宽比例进行适配； </li>\n<li>js合并两个数组<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">arr1 = arr1.concat(arr2);</span><br></pre></td></tr></table></figure></li>\n<li>获取屏幕的宽高<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">let</span> screenWidth = <span class=\"built_in\">window</span>.innerWidth;</span><br><span class=\"line\"><span class=\"keyword\">let</span> screenHeight = <span class=\"built_in\">window</span>.innerHeight;</span><br></pre></td></tr></table></figure></li>\n<li>EaselJS的Text中文不会自动换行的问题<br>修改easeljs的p._drawText方法为<br><a href=\"https://pasteme.cn/135634\">点击</a></li>\n</ol>\n","site":{"data":{}},"length":3892,"excerpt":"","more":"<ol>\n<li>创建舞台<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">let</span> stage = <span class=\"keyword\">new</span> createjs.Stage();<span class=\"comment\">//()中为画布的id,与画布进行绑定</span></span><br></pre></td></tr></table></figure></li>\n<li>创建容器<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">let</span> gameView = <span class=\"keyword\">new</span> createjs.Container();</span><br><span class=\"line\">stage.addChild(gameView);<span class=\"comment\">//可将容器放在舞台中，创建的元素放在容器中</span></span><br><span class=\"line\">stage &gt; container &gt; 单个元素<span class=\"comment\">//三代之间的关系，可通过addChild()方法进行追加元素</span></span><br></pre></td></tr></table></figure></li>\n<li>创建图形<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">let</span> shape = <span class=\"keyword\">new</span> createjs.Shape();<span class=\"comment\">//创建一个图形</span></span><br><span class=\"line\">shape.graphics.beginFill(color)drawRect(x,y,w,h);<span class=\"comment\">//画一个矩形</span></span><br><span class=\"line\">shape.graphics.beginFill(color)drawRoundRect(x,y,w,h,radius);<span class=\"comment\">//画圆角矩形</span></span><br><span class=\"line\">shape.graphics.beginFill(color)drawCircle(x,y,r);<span class=\"comment\">//画圆</span></span><br></pre></td></tr></table></figure></li>\n<li>创建图片<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">let</span> img = <span class=\"keyword\">new</span> createjs.Bitmap();<span class=\"comment\">//括号中为图片路径</span></span><br></pre></td></tr></table></figure></li>\n<li>创建文字<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">let</span> text = <span class=\"keyword\">new</span> createjs.Text(text,font,color);<span class=\"comment\">//创建文字</span></span><br><span class=\"line\"><span class=\"comment\">//属性</span></span><br><span class=\"line\">text.lineWidth  <span class=\"comment\">//设置行宽</span></span><br><span class=\"line\">text.lineHeight <span class=\"comment\">//设置行高</span></span><br><span class=\"line\">text.textAlign  <span class=\"comment\">//设置对齐方式</span></span><br><span class=\"line\">注：</span><br><span class=\"line\">当设置左对齐的时候，text.x的值为文字的起始点横坐标；</span><br><span class=\"line\">当设置右对齐的时候，text.x的值为文字的结束点横坐标；</span><br><span class=\"line\">当设置居中对齐的时候，text.x的值为文字的中间点横坐标；</span><br><span class=\"line\">当设置lineWidth会出现中文不换行问题见<span class=\"number\">19</span>；</span><br></pre></td></tr></table></figure></li>\n<li>常见属性和方法<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">demo.x <span class=\"comment\">//设置起始位置横坐标</span></span><br><span class=\"line\">demo.y <span class=\"comment\">//设置起始位置纵坐标</span></span><br><span class=\"line\">demo.alpha <span class=\"comment\">//设置透明度</span></span><br><span class=\"line\">demo.x <span class=\"comment\">//设置起始位置横坐标</span></span><br><span class=\"line\">demo.y <span class=\"comment\">//设置起始位置纵坐标</span></span><br><span class=\"line\">demo.scaleX <span class=\"comment\">//水平变换</span></span><br><span class=\"line\">demo.scaleY <span class=\"comment\">//垂直变换</span></span><br><span class=\"line\">demo.scale  <span class=\"comment\">//整体变换</span></span><br><span class=\"line\">demo.alpha  <span class=\"comment\">//设置透明度</span></span><br><span class=\"line\">demo.mask   <span class=\"comment\">//设置蒙版</span></span><br><span class=\"line\">demo.name   <span class=\"comment\">//设置名称</span></span><br><span class=\"line\">demo.visible <span class=\"comment\">//设置元素是否显示 </span></span><br><span class=\"line\">demo.removeAllChildren(); <span class=\"comment\">//移除所有子元素</span></span><br><span class=\"line\">parent.addChild(child); <span class=\"comment\">//添加子元素</span></span><br><span class=\"line\">parent.setChildIndex(child,parent.getNumChildren()-num);<span class=\"comment\">//设置层级</span></span><br><span class=\"line\">注：</span><br><span class=\"line\"><span class=\"number\">1.</span> 当alpha为<span class=\"number\">0</span>时不能触发事件；</span><br><span class=\"line\"><span class=\"number\">2.</span> mask显示的内容为和蒙版重合的部分，为蒙版不追加入img的父元素中；</span><br></pre></td></tr></table></figure></li>\n<li>雪碧图<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">let</span> data = &#123;</span><br><span class=\"line\">    images: [url],<span class=\"comment\">//图片路径</span></span><br><span class=\"line\">    frames: &#123;<span class=\"attr\">width</span>:w,<span class=\"attr\">height</span>:h,<span class=\"attr\">count</span>:count&#125;,<span class=\"comment\">//w,h是一张精灵图的实际宽高，count的图片数量</span></span><br><span class=\"line\">    animations: &#123;</span><br><span class=\"line\">        run: &#123;</span><br><span class=\"line\">            frames:[<span class=\"number\">0</span>,<span class=\"number\">3</span>],<span class=\"comment\">//显示哪几张图片，0，3为0～3四张</span></span><br><span class=\"line\">            speed:<span class=\"number\">0.5</span> <span class=\"comment\">//图片运动速度</span></span><br><span class=\"line\">        &#125;,</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;;</span><br><span class=\"line\"><span class=\"keyword\">let</span> spriteSheet = <span class=\"keyword\">new</span> createjs.SpriteSheet(data);</span><br><span class=\"line\"><span class=\"keyword\">let</span> animation = <span class=\"keyword\">new</span> createjs.Sprite(spriteSheet,<span class=\"string\">&quot;run&quot;</span>);</span><br><span class=\"line\">nimation.set(&#123;<span class=\"attr\">x</span>:x,<span class=\"attr\">y</span>:y,<span class=\"attr\">scaleX</span>:scaleX,<span class=\"attr\">scaleY</span>:scaleY&#125;);</span><br></pre></td></tr></table></figure></li>\n<li>创建动画<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">createjs.Tween.get(元素).to(&#123;属性:值&#125;,时间)；<span class=\"comment\">//异步执行</span></span><br><span class=\"line\">createjs.Tween.get(元素).to(&#123;属性:值&#125;,时间).call(<span class=\"function\"><span class=\"keyword\">function</span>(<span class=\"params\"></span>)</span>&#123;&#125;)；<span class=\"comment\">//function()和动画同步执行，会在动画结束后执行</span></span><br></pre></td></tr></table></figure></li>\n<li>资源预加载<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">$.when(filePreload()).then(<span class=\"function\"><span class=\"keyword\">function</span>(<span class=\"params\"></span>)</span>&#123;&#125;);</span><br><span class=\"line\"><span class=\"comment\">//预加载完成后在执行then后面的函数</span></span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">function</span> <span class=\"title\">filePreload</span>(<span class=\"params\"></span>)</span>&#123;</span><br><span class=\"line\">    <span class=\"comment\">//deferred对象的含义就是&quot;延迟&quot;到未来某个点再执行。</span></span><br><span class=\"line\">    <span class=\"keyword\">let</span> deferred = <span class=\"keyword\">new</span> $.Deferred();</span><br><span class=\"line\">    <span class=\"comment\">//preload可以方便我们预先加载相关资源</span></span><br><span class=\"line\">    <span class=\"keyword\">let</span> queue = <span class=\"keyword\">new</span> createjs.LoadQueue(<span class=\"literal\">false</span>);</span><br><span class=\"line\">    <span class=\"comment\">//如果载入声音，必须先注册createjs.Sound</span></span><br><span class=\"line\">    queue.installPlugin(createjs.Sound);</span><br><span class=\"line\">    <span class=\"comment\">//将需要预加载的资源放在manifest数组中</span></span><br><span class=\"line\">    <span class=\"comment\">//url：资源的路径</span></span><br><span class=\"line\">    <span class=\"comment\">//id:给资源重新定义的名字，调用改资源时使用</span></span><br><span class=\"line\">    <span class=\"keyword\">let</span> manifest = [</span><br><span class=\"line\">        &#123;<span class=\"attr\">id</span>:id,<span class=\"attr\">src</span>:url<span class=\"string\">&quot;&#125;</span></span><br><span class=\"line\"><span class=\"string\">    ];</span></span><br><span class=\"line\"><span class=\"string\">    //预加载过程中执行的函数</span></span><br><span class=\"line\"><span class=\"string\">    //当调用某一资源时使用bitmapList[id].clone(),且bitmapList需为全局变量</span></span><br><span class=\"line\"><span class=\"string\">    queue.on(&quot;</span>fileload<span class=\"string\">&quot;, function (event) &#123;</span></span><br><span class=\"line\"><span class=\"string\">        if (event.item.type == &quot;</span>image<span class=\"string\">&quot;) &#123;</span></span><br><span class=\"line\"><span class=\"string\">            bitmapList[event.item.id] = new createjs.Bitmap(event.result);</span></span><br><span class=\"line\"><span class=\"string\">            &#125;</span></span><br><span class=\"line\"><span class=\"string\">        &#125;</span></span><br><span class=\"line\"><span class=\"string\">    &#125;, this);</span></span><br><span class=\"line\"><span class=\"string\">    //预加载完成后执行的函数</span></span><br><span class=\"line\"><span class=\"string\">    queue.on(&quot;</span>complete<span class=\"string\">&quot;, function (event) &#123;</span></span><br><span class=\"line\"><span class=\"string\">        deferred.resolve();</span></span><br><span class=\"line\"><span class=\"string\">    &#125;, this);</span></span><br><span class=\"line\"><span class=\"string\">    queue.loadManifest(manifest);</span></span><br><span class=\"line\"><span class=\"string\">    return deferred.promise();</span></span><br><span class=\"line\"><span class=\"string\">&#125;</span></span><br></pre></td></tr></table></figure></li>\n<li>设置旋转(竖屏转成横屏) <figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">stage.rotation = <span class=\"number\">90</span>;</span><br><span class=\"line\">stage.x = screenWidth;</span><br><span class=\"line\">stage.y = <span class=\"number\">0</span>;</span><br><span class=\"line\"><span class=\"keyword\">let</span> temp = screenWidth;</span><br><span class=\"line\">screenWidth = screenHeight;</span><br><span class=\"line\">screenHeight = temp;</span><br><span class=\"line\">注：等号右侧为竖屏宽高，左侧为横屏宽高</span><br></pre></td></tr></table></figure></li>\n<li>当使用高清图片时若图片还是不清晰，可适当扩大画布的倍数；</li>\n<li>当使用onload方法且需要传参时，避免异步的影响<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">//如加载图片时，图片没有加载好就获取图片属性会报错</span></span><br><span class=\"line\"><span class=\"comment\">//若在for循环中，可能计数i会产生影响</span></span><br><span class=\"line\"><span class=\"keyword\">let</span> img = <span class=\"keyword\">new</span> Image();</span><br><span class=\"line\">img.src = url;</span><br><span class=\"line\">img.index = <span class=\"number\">1</span>;</span><br><span class=\"line\">img.onload = <span class=\"function\"><span class=\"keyword\">function</span>(<span class=\"params\"></span>)</span>&#123;</span><br><span class=\"line\">    <span class=\"built_in\">console</span>.log(img.index);</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"><span class=\"comment\">//可推广</span></span><br><span class=\"line\"><span class=\"keyword\">let</span> obj = &#123;&#125;;</span><br><span class=\"line\">obj.x = <span class=\"number\">1</span>;</span><br><span class=\"line\">obg.onload = <span class=\"function\"><span class=\"keyword\">function</span>(<span class=\"params\"></span>)</span>&#123;</span><br><span class=\"line\">    <span class=\"built_in\">console</span>.log(obj.x);</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure></li>\n<li>动态修改shape图形的参数<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">shape.graphics.command.属性 = 值；</span><br></pre></td></tr></table></figure></li>\n<li>实现container的滚动<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">//主函数</span></span><br><span class=\"line\"><span class=\"keyword\">if</span>(createjs.Touch.isSupported() == <span class=\"literal\">true</span>)&#123;</span><br><span class=\"line\">        createjs.Touch.enable(stage)</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"><span class=\"comment\">//设置滚动条件</span></span><br><span class=\"line\"><span class=\"keyword\">let</span> localPos,y;</span><br><span class=\"line\">gameView.addEventListener(<span class=\"string\">&#x27;mousedown&#x27;</span>,<span class=\"function\"><span class=\"keyword\">function</span>(<span class=\"params\">evt</span>)</span>&#123;</span><br><span class=\"line\">    <span class=\"comment\">//滑动开始时的位置</span></span><br><span class=\"line\">    <span class=\"keyword\">let</span> stageX = evt.stageX;</span><br><span class=\"line\">    <span class=\"keyword\">let</span> stageY = evt.stageY;</span><br><span class=\"line\">    <span class=\"comment\">//将gameView对象从舞台（全局）坐标转换为显示对象的（本地）坐标</span></span><br><span class=\"line\">    localPos = stage.globalToLocal(stageX,stageY);</span><br><span class=\"line\">    <span class=\"comment\">//获取gameview对象的坐标</span></span><br><span class=\"line\">    y = gameView.y;</span><br><span class=\"line\">&#125;)</span><br><span class=\"line\">gameView.addEventListener(<span class=\"string\">&#x27;pressmove&#x27;</span>,<span class=\"function\"><span class=\"keyword\">function</span>(<span class=\"params\">evt</span>)</span>&#123;</span><br><span class=\"line\">    <span class=\"comment\">//gameview.y = 滑动结束时滑动点处的y-滑动开始时滑动点处的y+滑动开始时gameview的y</span></span><br><span class=\"line\">    <span class=\"keyword\">let</span> move_y = evt.stageY - localPos.y + y;</span><br><span class=\"line\">    <span class=\"comment\">//通过滑动区域y坐标的大小限制滑动区域</span></span><br><span class=\"line\">    <span class=\"keyword\">if</span>(move_y &gt;= -(滑动区域.y-显示区域.y) &amp;&amp; move_y &lt;= <span class=\"number\">0</span>)&#123;</span><br><span class=\"line\">        gameView.y = move_y;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;)</span><br></pre></td></tr></table></figure></li>\n<li>全局只需要在入口函数设置tick刷新舞台即可；</li>\n<li>适配不同的手机屏幕可通过长宽比例进行适配； </li>\n<li>js合并两个数组<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">arr1 = arr1.concat(arr2);</span><br></pre></td></tr></table></figure></li>\n<li>获取屏幕的宽高<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">let</span> screenWidth = <span class=\"built_in\">window</span>.innerWidth;</span><br><span class=\"line\"><span class=\"keyword\">let</span> screenHeight = <span class=\"built_in\">window</span>.innerHeight;</span><br></pre></td></tr></table></figure></li>\n<li>EaselJS的Text中文不会自动换行的问题<br>修改easeljs的p._drawText方法为<br><a href=\"https://pasteme.cn/135634\">点击</a></li>\n</ol>\n"},{"title":"happyBirthday","abbrlink":10295,"date":"2021-04-30T16:53:58.000Z","_content":"[2019](http://47.94.243.37/birthday-2019/index.html)\n\n[2020](http://47.94.243.37/birthday-2020/index.html)\n\n[2021](http://47.94.243.37/birthday-2021/index.html)\n\n**欢迎打赏哈！**\n\n","source":"_posts/happyBirthday.md","raw":"---\ntitle: happyBirthday\ntags:\n  - happyBirthday\nabbrlink: 10295\ndate: 2021-05-01 00:53:58\n---\n[2019](http://47.94.243.37/birthday-2019/index.html)\n\n[2020](http://47.94.243.37/birthday-2020/index.html)\n\n[2021](http://47.94.243.37/birthday-2021/index.html)\n\n**欢迎打赏哈！**\n\n","slug":"happyBirthday","published":1,"updated":"2021-07-27T14:51:43.518Z","comments":1,"layout":"post","photos":[],"link":"","_id":"ckrmv4jhm001qzrfy1tkqh2bp","content":"<p><a href=\"http://47.94.243.37/birthday-2019/index.html\">2019</a></p>\n<p><a href=\"http://47.94.243.37/birthday-2020/index.html\">2020</a></p>\n<p><a href=\"http://47.94.243.37/birthday-2021/index.html\">2021</a></p>\n<p><strong>欢迎打赏哈！</strong></p>\n","site":{"data":{}},"length":18,"excerpt":"","more":"<p><a href=\"http://47.94.243.37/birthday-2019/index.html\">2019</a></p>\n<p><a href=\"http://47.94.243.37/birthday-2020/index.html\">2020</a></p>\n<p><a href=\"http://47.94.243.37/birthday-2021/index.html\">2021</a></p>\n<p><strong>欢迎打赏哈！</strong></p>\n"},{"title":"hexo+PicGo+gitee图床","abbrlink":13481,"date":"2021-01-05T11:26:41.000Z","_content":"**前言**：我尝试了好几种床图，不是在电脑端加载不出来，就是有各种各样的限制，最后找到了gitee，因为服务器在国内，访问速度也是比较快，空间也没有限制，算是比较理想的一种吧。一开始我用vscode+PicGo插件，等到快成的时候，图片是上传上去了，但是加载不出来，我尝试了`sm.ms`和`github`，最后抛弃了`vsCode+PicGo`插件，选择了`PicGo客户端和gitee`。\n1. **注册gitee账号**\n去官网注册账号[gitee](https://gitee.com/)\n2. **新建gitee仓库**\n![](https://gitee.com/light_trap/for-picgo/raw/master/image/20210105203048.png)\n![](https://gitee.com/light_trap/for-picgo/raw/master/image/20210105203450.png)\n3. **获得gitee的token**\n登录`gitee`官网，点击头像/设置/私人令牌/生成令牌\n![](https://gitee.com/light_trap/for-picgo/raw/master/image/20210105203902.png)\n点击提交后复制生成的令牌，在配置的时候要使用\n4. **下载gitee**\n点击[PicGo](https://github.com/Molunerfinn/PicGo/releases)下载，有不同的版本，都可以\n下载成功后按照提示默认安装即可\n5. **配置gitee**\n默认状态下PicGo是没有`gitee`，因此先安装插件`gitee-uploader`\n![](https://gitee.com/light_trap/for-picgo/raw/master/image/20210105205151.png)\n这时，点击图床设置，已经有`gitee图床`的设置\n![](https://gitee.com/light_trap/for-picgo/raw/master/image/20210105205522.png)\n    ```\n    1:打开新建的仓库，看地址栏，若地址栏为https://gitee.com/A/B,则需要填A/B\n    2:默认为master就可以\n    3:把刚才生成的token粘贴到这里\n    4:path为创建的仓库存放图片的文件夹名，可以为image，可任意填写\n    5:其余开心就好\n    ```\n6. **升华**\n为更方便地获取截图外链，安装`picgo-plugin-quick-capture`,实现截图上传一步搞定\n7. **Typora+PicGo+gitee配置**\n如果用`Typora`写`Markdown`文章，还需要对`Typora`进行配置，找到`文件/偏好设置/图像`\n![](https://gitee.com/light_trap/for-picgo/raw/master/image/20210105212825.png)\n在typora中，当插入本地图片时，会自动转换成gitee外链\n\n**tips**\n1. 通过上面的操作已经实现了快速上传和快速截图上传功能，当我们要用本地图片生成外链时，先复制一下本地图片(就是选中图片按下Ctrl+c),然后按下快速上传的快捷键，此时外链已经生成，在需要插入图片的位置Ctrl+V就可以了\n2. 当使用快速截图上传时，如果是直接截图的话，截完图后直接Ctrl+V就可以了，但如果是截完图后需要写批注，那么截的图并不一定可以自动上传，需要按下快速上传的快捷键，然后再Ctrl+V\n3. 通过PicGo可以查看和删除上传的图片\n![](https://gitee.com/light_trap/for-picgo/raw/master/image/20210105212411.png)\n","source":"_posts/hexo-PicGo-gitee图床.md","raw":"---\ntitle: hexo+PicGo+gitee图床\ntags:\n  - hexo\n  - PicGo\n  - gitee\n  - Typora\n  - 图床\ncategories: hexo\nabbrlink: 13481\ndate: 2021-01-05 19:26:41\n---\n**前言**：我尝试了好几种床图，不是在电脑端加载不出来，就是有各种各样的限制，最后找到了gitee，因为服务器在国内，访问速度也是比较快，空间也没有限制，算是比较理想的一种吧。一开始我用vscode+PicGo插件，等到快成的时候，图片是上传上去了，但是加载不出来，我尝试了`sm.ms`和`github`，最后抛弃了`vsCode+PicGo`插件，选择了`PicGo客户端和gitee`。\n1. **注册gitee账号**\n去官网注册账号[gitee](https://gitee.com/)\n2. **新建gitee仓库**\n![](https://gitee.com/light_trap/for-picgo/raw/master/image/20210105203048.png)\n![](https://gitee.com/light_trap/for-picgo/raw/master/image/20210105203450.png)\n3. **获得gitee的token**\n登录`gitee`官网，点击头像/设置/私人令牌/生成令牌\n![](https://gitee.com/light_trap/for-picgo/raw/master/image/20210105203902.png)\n点击提交后复制生成的令牌，在配置的时候要使用\n4. **下载gitee**\n点击[PicGo](https://github.com/Molunerfinn/PicGo/releases)下载，有不同的版本，都可以\n下载成功后按照提示默认安装即可\n5. **配置gitee**\n默认状态下PicGo是没有`gitee`，因此先安装插件`gitee-uploader`\n![](https://gitee.com/light_trap/for-picgo/raw/master/image/20210105205151.png)\n这时，点击图床设置，已经有`gitee图床`的设置\n![](https://gitee.com/light_trap/for-picgo/raw/master/image/20210105205522.png)\n    ```\n    1:打开新建的仓库，看地址栏，若地址栏为https://gitee.com/A/B,则需要填A/B\n    2:默认为master就可以\n    3:把刚才生成的token粘贴到这里\n    4:path为创建的仓库存放图片的文件夹名，可以为image，可任意填写\n    5:其余开心就好\n    ```\n6. **升华**\n为更方便地获取截图外链，安装`picgo-plugin-quick-capture`,实现截图上传一步搞定\n7. **Typora+PicGo+gitee配置**\n如果用`Typora`写`Markdown`文章，还需要对`Typora`进行配置，找到`文件/偏好设置/图像`\n![](https://gitee.com/light_trap/for-picgo/raw/master/image/20210105212825.png)\n在typora中，当插入本地图片时，会自动转换成gitee外链\n\n**tips**\n1. 通过上面的操作已经实现了快速上传和快速截图上传功能，当我们要用本地图片生成外链时，先复制一下本地图片(就是选中图片按下Ctrl+c),然后按下快速上传的快捷键，此时外链已经生成，在需要插入图片的位置Ctrl+V就可以了\n2. 当使用快速截图上传时，如果是直接截图的话，截完图后直接Ctrl+V就可以了，但如果是截完图后需要写批注，那么截的图并不一定可以自动上传，需要按下快速上传的快捷键，然后再Ctrl+V\n3. 通过PicGo可以查看和删除上传的图片\n![](https://gitee.com/light_trap/for-picgo/raw/master/image/20210105212411.png)\n","slug":"hexo-PicGo-gitee图床","published":1,"updated":"2021-07-27T14:51:43.519Z","comments":1,"layout":"post","photos":[],"link":"","_id":"ckrmv4jho001uzrfy8wdvbf4v","content":"<p><strong>前言</strong>：我尝试了好几种床图，不是在电脑端加载不出来，就是有各种各样的限制，最后找到了gitee，因为服务器在国内，访问速度也是比较快，空间也没有限制，算是比较理想的一种吧。一开始我用vscode+PicGo插件，等到快成的时候，图片是上传上去了，但是加载不出来，我尝试了<code>sm.ms</code>和<code>github</code>，最后抛弃了<code>vsCode+PicGo</code>插件，选择了<code>PicGo客户端和gitee</code>。</p>\n<ol>\n<li><strong>注册gitee账号</strong><br>去官网注册账号<a href=\"https://gitee.com/\">gitee</a></li>\n<li><strong>新建gitee仓库</strong><br><img src=\"https://gitee.com/light_trap/for-picgo/raw/master/image/20210105203048.png\"><br><img src=\"https://gitee.com/light_trap/for-picgo/raw/master/image/20210105203450.png\"></li>\n<li><strong>获得gitee的token</strong><br>登录<code>gitee</code>官网，点击头像/设置/私人令牌/生成令牌<br><img src=\"https://gitee.com/light_trap/for-picgo/raw/master/image/20210105203902.png\"><br>点击提交后复制生成的令牌，在配置的时候要使用</li>\n<li><strong>下载gitee</strong><br>点击<a href=\"https://github.com/Molunerfinn/PicGo/releases\">PicGo</a>下载，有不同的版本，都可以<br>下载成功后按照提示默认安装即可</li>\n<li><strong>配置gitee</strong><br>默认状态下PicGo是没有<code>gitee</code>，因此先安装插件<code>gitee-uploader</code><br><img src=\"https://gitee.com/light_trap/for-picgo/raw/master/image/20210105205151.png\"><br>这时，点击图床设置，已经有<code>gitee图床</code>的设置<br><img src=\"https://gitee.com/light_trap/for-picgo/raw/master/image/20210105205522.png\"> <figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">1:打开新建的仓库，看地址栏，若地址栏为https:&#x2F;&#x2F;gitee.com&#x2F;A&#x2F;B,则需要填A&#x2F;B</span><br><span class=\"line\">2:默认为master就可以</span><br><span class=\"line\">3:把刚才生成的token粘贴到这里</span><br><span class=\"line\">4:path为创建的仓库存放图片的文件夹名，可以为image，可任意填写</span><br><span class=\"line\">5:其余开心就好</span><br></pre></td></tr></table></figure></li>\n<li><strong>升华</strong><br>为更方便地获取截图外链，安装<code>picgo-plugin-quick-capture</code>,实现截图上传一步搞定</li>\n<li><strong>Typora+PicGo+gitee配置</strong><br>如果用<code>Typora</code>写<code>Markdown</code>文章，还需要对<code>Typora</code>进行配置，找到<code>文件/偏好设置/图像</code><br><img src=\"https://gitee.com/light_trap/for-picgo/raw/master/image/20210105212825.png\"><br>在typora中，当插入本地图片时，会自动转换成gitee外链</li>\n</ol>\n<p><strong>tips</strong></p>\n<ol>\n<li>通过上面的操作已经实现了快速上传和快速截图上传功能，当我们要用本地图片生成外链时，先复制一下本地图片(就是选中图片按下Ctrl+c),然后按下快速上传的快捷键，此时外链已经生成，在需要插入图片的位置Ctrl+V就可以了</li>\n<li>当使用快速截图上传时，如果是直接截图的话，截完图后直接Ctrl+V就可以了，但如果是截完图后需要写批注，那么截的图并不一定可以自动上传，需要按下快速上传的快捷键，然后再Ctrl+V</li>\n<li>通过PicGo可以查看和删除上传的图片<br><img src=\"https://gitee.com/light_trap/for-picgo/raw/master/image/20210105212411.png\"></li>\n</ol>\n","site":{"data":{}},"length":918,"excerpt":"","more":"<p><strong>前言</strong>：我尝试了好几种床图，不是在电脑端加载不出来，就是有各种各样的限制，最后找到了gitee，因为服务器在国内，访问速度也是比较快，空间也没有限制，算是比较理想的一种吧。一开始我用vscode+PicGo插件，等到快成的时候，图片是上传上去了，但是加载不出来，我尝试了<code>sm.ms</code>和<code>github</code>，最后抛弃了<code>vsCode+PicGo</code>插件，选择了<code>PicGo客户端和gitee</code>。</p>\n<ol>\n<li><strong>注册gitee账号</strong><br>去官网注册账号<a href=\"https://gitee.com/\">gitee</a></li>\n<li><strong>新建gitee仓库</strong><br><img src=\"https://gitee.com/light_trap/for-picgo/raw/master/image/20210105203048.png\"><br><img src=\"https://gitee.com/light_trap/for-picgo/raw/master/image/20210105203450.png\"></li>\n<li><strong>获得gitee的token</strong><br>登录<code>gitee</code>官网，点击头像/设置/私人令牌/生成令牌<br><img src=\"https://gitee.com/light_trap/for-picgo/raw/master/image/20210105203902.png\"><br>点击提交后复制生成的令牌，在配置的时候要使用</li>\n<li><strong>下载gitee</strong><br>点击<a href=\"https://github.com/Molunerfinn/PicGo/releases\">PicGo</a>下载，有不同的版本，都可以<br>下载成功后按照提示默认安装即可</li>\n<li><strong>配置gitee</strong><br>默认状态下PicGo是没有<code>gitee</code>，因此先安装插件<code>gitee-uploader</code><br><img src=\"https://gitee.com/light_trap/for-picgo/raw/master/image/20210105205151.png\"><br>这时，点击图床设置，已经有<code>gitee图床</code>的设置<br><img src=\"https://gitee.com/light_trap/for-picgo/raw/master/image/20210105205522.png\"> <figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">1:打开新建的仓库，看地址栏，若地址栏为https:&#x2F;&#x2F;gitee.com&#x2F;A&#x2F;B,则需要填A&#x2F;B</span><br><span class=\"line\">2:默认为master就可以</span><br><span class=\"line\">3:把刚才生成的token粘贴到这里</span><br><span class=\"line\">4:path为创建的仓库存放图片的文件夹名，可以为image，可任意填写</span><br><span class=\"line\">5:其余开心就好</span><br></pre></td></tr></table></figure></li>\n<li><strong>升华</strong><br>为更方便地获取截图外链，安装<code>picgo-plugin-quick-capture</code>,实现截图上传一步搞定</li>\n<li><strong>Typora+PicGo+gitee配置</strong><br>如果用<code>Typora</code>写<code>Markdown</code>文章，还需要对<code>Typora</code>进行配置，找到<code>文件/偏好设置/图像</code><br><img src=\"https://gitee.com/light_trap/for-picgo/raw/master/image/20210105212825.png\"><br>在typora中，当插入本地图片时，会自动转换成gitee外链</li>\n</ol>\n<p><strong>tips</strong></p>\n<ol>\n<li>通过上面的操作已经实现了快速上传和快速截图上传功能，当我们要用本地图片生成外链时，先复制一下本地图片(就是选中图片按下Ctrl+c),然后按下快速上传的快捷键，此时外链已经生成，在需要插入图片的位置Ctrl+V就可以了</li>\n<li>当使用快速截图上传时，如果是直接截图的话，截完图后直接Ctrl+V就可以了，但如果是截完图后需要写批注，那么截的图并不一定可以自动上传，需要按下快速上传的快捷键，然后再Ctrl+V</li>\n<li>通过PicGo可以查看和删除上传的图片<br><img src=\"https://gitee.com/light_trap/for-picgo/raw/master/image/20210105212411.png\"></li>\n</ol>\n"},{"title":"hexo备份与恢复","abbrlink":49250,"date":"2021-01-04T10:43:43.000Z","_content":"## 备份\n1. 在github的博客仓库创建新的分支**backup**\n2. 打开git Bash Here，输入\n    ```\n    npm install hexo-git-backup --save\n    ```\n3. 添加提交设置：打开blog/_config.yml在最后添加\n   ```\n    backup:\n    type: git\n    repository:\n    github: git@github.com:Romanticqq/romanticqq.github.io.git,backup(提交的github地址,分支名)\n   ```\n4. 当要对代码备份时，执行`hexo d`即备份成功\n\n## 恢复\n1. 把github的博客仓库**backup**分支的内容下载到本地\n2. 依次执行下列命令\n    ```\n    npm install hexo\n    npm install\n    npm install hexo-deployer-git\n    ```\n3. 本地文件恢复，`hexo s`开启本地服务，在浏览器输入`http://localhost:4000`测试是否正常\n## 当遇到提交失败时\n```php\nOpenSSL SSL_read: Connection was reset, errno 10054\n//在hexo d之前执行命令\ngit config --global http.sslVerify \"false\"\n```","source":"_posts/hexo备份与恢复.md","raw":"---\ntitle: hexo备份与恢复\ntags:\n  - hexo\n  - next\ncategories: hexo\nabbrlink: 49250\ndate: 2021-01-04 18:43:43\n---\n## 备份\n1. 在github的博客仓库创建新的分支**backup**\n2. 打开git Bash Here，输入\n    ```\n    npm install hexo-git-backup --save\n    ```\n3. 添加提交设置：打开blog/_config.yml在最后添加\n   ```\n    backup:\n    type: git\n    repository:\n    github: git@github.com:Romanticqq/romanticqq.github.io.git,backup(提交的github地址,分支名)\n   ```\n4. 当要对代码备份时，执行`hexo d`即备份成功\n\n## 恢复\n1. 把github的博客仓库**backup**分支的内容下载到本地\n2. 依次执行下列命令\n    ```\n    npm install hexo\n    npm install\n    npm install hexo-deployer-git\n    ```\n3. 本地文件恢复，`hexo s`开启本地服务，在浏览器输入`http://localhost:4000`测试是否正常\n## 当遇到提交失败时\n```php\nOpenSSL SSL_read: Connection was reset, errno 10054\n//在hexo d之前执行命令\ngit config --global http.sslVerify \"false\"\n```","slug":"hexo备份与恢复","published":1,"updated":"2021-07-27T14:51:43.520Z","comments":1,"layout":"post","photos":[],"link":"","_id":"ckrmv4jhr001wzrfy819ze1p4","content":"<h2 id=\"备份\"><a href=\"#备份\" class=\"headerlink\" title=\"备份\"></a>备份</h2><ol>\n<li>在github的博客仓库创建新的分支<strong>backup</strong></li>\n<li>打开git Bash Here，输入 <figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">npm install hexo-git-backup --save</span><br></pre></td></tr></table></figure></li>\n<li>添加提交设置：打开blog/_config.yml在最后添加<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">backup:</span><br><span class=\"line\">type: git</span><br><span class=\"line\">repository:</span><br><span class=\"line\">github: git@github.com:Romanticqq&#x2F;romanticqq.github.io.git,backup(提交的github地址,分支名)</span><br></pre></td></tr></table></figure></li>\n<li>当要对代码备份时，执行<code>hexo d</code>即备份成功</li>\n</ol>\n<h2 id=\"恢复\"><a href=\"#恢复\" class=\"headerlink\" title=\"恢复\"></a>恢复</h2><ol>\n<li>把github的博客仓库<strong>backup</strong>分支的内容下载到本地</li>\n<li>依次执行下列命令 <figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">npm install hexo</span><br><span class=\"line\">npm install</span><br><span class=\"line\">npm install hexo-deployer-git</span><br></pre></td></tr></table></figure></li>\n<li>本地文件恢复，<code>hexo s</code>开启本地服务，在浏览器输入<code>http://localhost:4000</code>测试是否正常<h2 id=\"当遇到提交失败时\"><a href=\"#当遇到提交失败时\" class=\"headerlink\" title=\"当遇到提交失败时\"></a>当遇到提交失败时</h2><figure class=\"highlight php\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">OpenSSL SSL_read: Connection was reset, errno <span class=\"number\">10054</span></span><br><span class=\"line\"><span class=\"comment\">//在hexo d之前执行命令</span></span><br><span class=\"line\">git config --<span class=\"keyword\">global</span> http.sslVerify <span class=\"string\">&quot;false&quot;</span></span><br></pre></td></tr></table></figure></li>\n</ol>\n","site":{"data":{}},"length":503,"excerpt":"","more":"<h2 id=\"备份\"><a href=\"#备份\" class=\"headerlink\" title=\"备份\"></a>备份</h2><ol>\n<li>在github的博客仓库创建新的分支<strong>backup</strong></li>\n<li>打开git Bash Here，输入 <figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">npm install hexo-git-backup --save</span><br></pre></td></tr></table></figure></li>\n<li>添加提交设置：打开blog/_config.yml在最后添加<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">backup:</span><br><span class=\"line\">type: git</span><br><span class=\"line\">repository:</span><br><span class=\"line\">github: git@github.com:Romanticqq&#x2F;romanticqq.github.io.git,backup(提交的github地址,分支名)</span><br></pre></td></tr></table></figure></li>\n<li>当要对代码备份时，执行<code>hexo d</code>即备份成功</li>\n</ol>\n<h2 id=\"恢复\"><a href=\"#恢复\" class=\"headerlink\" title=\"恢复\"></a>恢复</h2><ol>\n<li>把github的博客仓库<strong>backup</strong>分支的内容下载到本地</li>\n<li>依次执行下列命令 <figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">npm install hexo</span><br><span class=\"line\">npm install</span><br><span class=\"line\">npm install hexo-deployer-git</span><br></pre></td></tr></table></figure></li>\n<li>本地文件恢复，<code>hexo s</code>开启本地服务，在浏览器输入<code>http://localhost:4000</code>测试是否正常<h2 id=\"当遇到提交失败时\"><a href=\"#当遇到提交失败时\" class=\"headerlink\" title=\"当遇到提交失败时\"></a>当遇到提交失败时</h2><figure class=\"highlight php\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">OpenSSL SSL_read: Connection was reset, errno <span class=\"number\">10054</span></span><br><span class=\"line\"><span class=\"comment\">//在hexo d之前执行命令</span></span><br><span class=\"line\">git config --<span class=\"keyword\">global</span> http.sslVerify <span class=\"string\">&quot;false&quot;</span></span><br></pre></td></tr></table></figure></li>\n</ol>\n"},{"title":"hexo插入图片","abbrlink":16600,"date":"2021-01-05T09:13:17.000Z","_content":"#### 方法一\n1. 在blog的本地文件的根目录中打开git Bash，然后执行\n`    npm install hexo-asset-image --save`\n2. 打开blog根目录下的配置文件_config.yml，修改\n`post_asset_folder: true  //由false改为true`\n此时，当执行`hexo n 文章名`的时候，会在_post目录下新建同名的一个文件夹和一个后缀名为`.md`的文件\n![](https://gitee.com/light_trap/for-picgo/raw/master/image/20210105173654.png)\n![](https://gitee.com/light_trap/for-picgo/raw/master/image/20210105173920.png)\n3. 打开`/node_modules/hexo-asset-image/index.js` 用下面代码替换\n```\n'use strict';\nvar cheerio = require('cheerio');\n\n// http://stackoverflow.com/questions/14480345/how-to-get-the-nth-occurrence-in-a-string\nfunction getPosition(str, m, i) {\n  return str.split(m, i).join(m).length;\n}\n\nvar version = String(hexo.version).split('.');\nhexo.extend.filter.register('after_post_render', function(data){\n  var config = hexo.config;\n  if(config.post_asset_folder){\n        var link = data.permalink;\n    if(version.length > 0 && Number(version[0]) == 3)\n       var beginPos = getPosition(link, '/', 1) + 1;\n    else\n       var beginPos = getPosition(link, '/', 3) + 1;\n    // In hexo 3.1.1, the permalink of \"about\" page is like \".../about/index.html\".\n    var endPos = link.lastIndexOf('/') + 1;\n    link = link.substring(beginPos, endPos);\n\n    var toprocess = ['excerpt', 'more', 'content'];\n    for(var i = 0; i < toprocess.length; i++){\n      var key = toprocess[i];\n \n      var $ = cheerio.load(data[key], {\n        ignoreWhitespace: false,\n        xmlMode: false,\n        lowerCaseTags: false,\n        decodeEntities: false\n      });\n\n      $('img').each(function(){\n        if ($(this).attr('src')){\n            // For windows style path, we replace '\\' to '/'.\n            var src = $(this).attr('src').replace('\\\\', '/');\n            if(!/http[s]*.*|\\/\\/.*/.test(src) &&\n               !/^\\s*\\//.test(src)) {\n              // For \"about\" page, the first part of \"src\" can't be removed.\n              // In addition, to support multi-level local directory.\n              var linkArray = link.split('/').filter(function(elem){\n                return elem != '';\n              });\n              var srcArray = src.split('/').filter(function(elem){\n                return elem != '' && elem != '.';\n              });\n              if(srcArray.length > 1)\n                srcArray.shift();\n              src = srcArray.join('/');\n              $(this).attr('src', config.root + link + src);\n              console.info&&console.info(\"update link as:-->\"+config.root + link + src);\n            }\n        }else{\n            console.info&&console.info(\"no src attr, skipped...\");\n            console.info&&console.info($(this));\n        }\n      });\n      data[key] = $.html();\n    }\n  }\n});\n```\n4. 把自己想用的图片放在新建的文件夹(文章名的文件夹)中，在`test.md`中引用是`![](图片的文件名)`\n![](https://gitee.com/light_trap/for-picgo/raw/master/image/20210105183827.png)\n\n#### 方法二\n1. 在`\\blog\\source`目录下新建`image`文件夹\n![](https://gitee.com/light_trap/for-picgo/raw/master/image/20210105184557.png)\n2. 把想要插入的图片都放入`image`文件夹下\n3. 在插入图片的位置引用`![](/image/图片名)`即可\n**注**：按照这种方式插入可能会在本地图片加载不出来，上传后就可以加载出来了；若上传后还加载不出来，检查blog根目录下的配置文件`_config.yml`的`post_asset_folder:`是否为`false`\n\n#### 方法三\n用图床实现插入图片，也是最推荐的一种，具体见[hexo+PicGo+gitee图床](https://romanticqq.top/2021/01/05/hexo-PicGo-gitee%E5%9B%BE%E5%BA%8A/)","source":"_posts/hexo插入图片.md","raw":"---\ntitle: hexo插入图片\ntags:\n  - hexo\n  - next\n  - 图床\ncategories: hexo\nabbrlink: 16600\ndate: 2021-01-05 17:13:17\n---\n#### 方法一\n1. 在blog的本地文件的根目录中打开git Bash，然后执行\n`    npm install hexo-asset-image --save`\n2. 打开blog根目录下的配置文件_config.yml，修改\n`post_asset_folder: true  //由false改为true`\n此时，当执行`hexo n 文章名`的时候，会在_post目录下新建同名的一个文件夹和一个后缀名为`.md`的文件\n![](https://gitee.com/light_trap/for-picgo/raw/master/image/20210105173654.png)\n![](https://gitee.com/light_trap/for-picgo/raw/master/image/20210105173920.png)\n3. 打开`/node_modules/hexo-asset-image/index.js` 用下面代码替换\n```\n'use strict';\nvar cheerio = require('cheerio');\n\n// http://stackoverflow.com/questions/14480345/how-to-get-the-nth-occurrence-in-a-string\nfunction getPosition(str, m, i) {\n  return str.split(m, i).join(m).length;\n}\n\nvar version = String(hexo.version).split('.');\nhexo.extend.filter.register('after_post_render', function(data){\n  var config = hexo.config;\n  if(config.post_asset_folder){\n        var link = data.permalink;\n    if(version.length > 0 && Number(version[0]) == 3)\n       var beginPos = getPosition(link, '/', 1) + 1;\n    else\n       var beginPos = getPosition(link, '/', 3) + 1;\n    // In hexo 3.1.1, the permalink of \"about\" page is like \".../about/index.html\".\n    var endPos = link.lastIndexOf('/') + 1;\n    link = link.substring(beginPos, endPos);\n\n    var toprocess = ['excerpt', 'more', 'content'];\n    for(var i = 0; i < toprocess.length; i++){\n      var key = toprocess[i];\n \n      var $ = cheerio.load(data[key], {\n        ignoreWhitespace: false,\n        xmlMode: false,\n        lowerCaseTags: false,\n        decodeEntities: false\n      });\n\n      $('img').each(function(){\n        if ($(this).attr('src')){\n            // For windows style path, we replace '\\' to '/'.\n            var src = $(this).attr('src').replace('\\\\', '/');\n            if(!/http[s]*.*|\\/\\/.*/.test(src) &&\n               !/^\\s*\\//.test(src)) {\n              // For \"about\" page, the first part of \"src\" can't be removed.\n              // In addition, to support multi-level local directory.\n              var linkArray = link.split('/').filter(function(elem){\n                return elem != '';\n              });\n              var srcArray = src.split('/').filter(function(elem){\n                return elem != '' && elem != '.';\n              });\n              if(srcArray.length > 1)\n                srcArray.shift();\n              src = srcArray.join('/');\n              $(this).attr('src', config.root + link + src);\n              console.info&&console.info(\"update link as:-->\"+config.root + link + src);\n            }\n        }else{\n            console.info&&console.info(\"no src attr, skipped...\");\n            console.info&&console.info($(this));\n        }\n      });\n      data[key] = $.html();\n    }\n  }\n});\n```\n4. 把自己想用的图片放在新建的文件夹(文章名的文件夹)中，在`test.md`中引用是`![](图片的文件名)`\n![](https://gitee.com/light_trap/for-picgo/raw/master/image/20210105183827.png)\n\n#### 方法二\n1. 在`\\blog\\source`目录下新建`image`文件夹\n![](https://gitee.com/light_trap/for-picgo/raw/master/image/20210105184557.png)\n2. 把想要插入的图片都放入`image`文件夹下\n3. 在插入图片的位置引用`![](/image/图片名)`即可\n**注**：按照这种方式插入可能会在本地图片加载不出来，上传后就可以加载出来了；若上传后还加载不出来，检查blog根目录下的配置文件`_config.yml`的`post_asset_folder:`是否为`false`\n\n#### 方法三\n用图床实现插入图片，也是最推荐的一种，具体见[hexo+PicGo+gitee图床](https://romanticqq.top/2021/01/05/hexo-PicGo-gitee%E5%9B%BE%E5%BA%8A/)","slug":"hexo插入图片","published":1,"updated":"2021-07-27T14:51:43.520Z","comments":1,"layout":"post","photos":[],"link":"","_id":"ckrmv4jht001zzrfybhwz4amg","content":"<h4 id=\"方法一\"><a href=\"#方法一\" class=\"headerlink\" title=\"方法一\"></a>方法一</h4><ol>\n<li>在blog的本地文件的根目录中打开git Bash，然后执行<br><code>    npm install hexo-asset-image --save</code></li>\n<li>打开blog根目录下的配置文件_config.yml，修改<br><code>post_asset_folder: true  //由false改为true</code><br>此时，当执行<code>hexo n 文章名</code>的时候，会在_post目录下新建同名的一个文件夹和一个后缀名为<code>.md</code>的文件<br><img src=\"https://gitee.com/light_trap/for-picgo/raw/master/image/20210105173654.png\"><br><img src=\"https://gitee.com/light_trap/for-picgo/raw/master/image/20210105173920.png\"></li>\n<li>打开<code>/node_modules/hexo-asset-image/index.js</code> 用下面代码替换<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br><span class=\"line\">38</span><br><span class=\"line\">39</span><br><span class=\"line\">40</span><br><span class=\"line\">41</span><br><span class=\"line\">42</span><br><span class=\"line\">43</span><br><span class=\"line\">44</span><br><span class=\"line\">45</span><br><span class=\"line\">46</span><br><span class=\"line\">47</span><br><span class=\"line\">48</span><br><span class=\"line\">49</span><br><span class=\"line\">50</span><br><span class=\"line\">51</span><br><span class=\"line\">52</span><br><span class=\"line\">53</span><br><span class=\"line\">54</span><br><span class=\"line\">55</span><br><span class=\"line\">56</span><br><span class=\"line\">57</span><br><span class=\"line\">58</span><br><span class=\"line\">59</span><br><span class=\"line\">60</span><br><span class=\"line\">61</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">&#39;use strict&#39;;</span><br><span class=\"line\">var cheerio &#x3D; require(&#39;cheerio&#39;);</span><br><span class=\"line\"></span><br><span class=\"line\">&#x2F;&#x2F; http:&#x2F;&#x2F;stackoverflow.com&#x2F;questions&#x2F;14480345&#x2F;how-to-get-the-nth-occurrence-in-a-string</span><br><span class=\"line\">function getPosition(str, m, i) &#123;</span><br><span class=\"line\">  return str.split(m, i).join(m).length;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\">var version &#x3D; String(hexo.version).split(&#39;.&#39;);</span><br><span class=\"line\">hexo.extend.filter.register(&#39;after_post_render&#39;, function(data)&#123;</span><br><span class=\"line\">  var config &#x3D; hexo.config;</span><br><span class=\"line\">  if(config.post_asset_folder)&#123;</span><br><span class=\"line\">        var link &#x3D; data.permalink;</span><br><span class=\"line\">    if(version.length &gt; 0 &amp;&amp; Number(version[0]) &#x3D;&#x3D; 3)</span><br><span class=\"line\">       var beginPos &#x3D; getPosition(link, &#39;&#x2F;&#39;, 1) + 1;</span><br><span class=\"line\">    else</span><br><span class=\"line\">       var beginPos &#x3D; getPosition(link, &#39;&#x2F;&#39;, 3) + 1;</span><br><span class=\"line\">    &#x2F;&#x2F; In hexo 3.1.1, the permalink of &quot;about&quot; page is like &quot;...&#x2F;about&#x2F;index.html&quot;.</span><br><span class=\"line\">    var endPos &#x3D; link.lastIndexOf(&#39;&#x2F;&#39;) + 1;</span><br><span class=\"line\">    link &#x3D; link.substring(beginPos, endPos);</span><br><span class=\"line\"></span><br><span class=\"line\">    var toprocess &#x3D; [&#39;excerpt&#39;, &#39;more&#39;, &#39;content&#39;];</span><br><span class=\"line\">    for(var i &#x3D; 0; i &lt; toprocess.length; i++)&#123;</span><br><span class=\"line\">      var key &#x3D; toprocess[i];</span><br><span class=\"line\"> </span><br><span class=\"line\">      var $ &#x3D; cheerio.load(data[key], &#123;</span><br><span class=\"line\">        ignoreWhitespace: false,</span><br><span class=\"line\">        xmlMode: false,</span><br><span class=\"line\">        lowerCaseTags: false,</span><br><span class=\"line\">        decodeEntities: false</span><br><span class=\"line\">      &#125;);</span><br><span class=\"line\"></span><br><span class=\"line\">      $(&#39;img&#39;).each(function()&#123;</span><br><span class=\"line\">        if ($(this).attr(&#39;src&#39;))&#123;</span><br><span class=\"line\">            &#x2F;&#x2F; For windows style path, we replace &#39;\\&#39; to &#39;&#x2F;&#39;.</span><br><span class=\"line\">            var src &#x3D; $(this).attr(&#39;src&#39;).replace(&#39;\\\\&#39;, &#39;&#x2F;&#39;);</span><br><span class=\"line\">            if(!&#x2F;http[s]*.*|\\&#x2F;\\&#x2F;.*&#x2F;.test(src) &amp;&amp;</span><br><span class=\"line\">               !&#x2F;^\\s*\\&#x2F;&#x2F;.test(src)) &#123;</span><br><span class=\"line\">              &#x2F;&#x2F; For &quot;about&quot; page, the first part of &quot;src&quot; can&#39;t be removed.</span><br><span class=\"line\">              &#x2F;&#x2F; In addition, to support multi-level local directory.</span><br><span class=\"line\">              var linkArray &#x3D; link.split(&#39;&#x2F;&#39;).filter(function(elem)&#123;</span><br><span class=\"line\">                return elem !&#x3D; &#39;&#39;;</span><br><span class=\"line\">              &#125;);</span><br><span class=\"line\">              var srcArray &#x3D; src.split(&#39;&#x2F;&#39;).filter(function(elem)&#123;</span><br><span class=\"line\">                return elem !&#x3D; &#39;&#39; &amp;&amp; elem !&#x3D; &#39;.&#39;;</span><br><span class=\"line\">              &#125;);</span><br><span class=\"line\">              if(srcArray.length &gt; 1)</span><br><span class=\"line\">                srcArray.shift();</span><br><span class=\"line\">              src &#x3D; srcArray.join(&#39;&#x2F;&#39;);</span><br><span class=\"line\">              $(this).attr(&#39;src&#39;, config.root + link + src);</span><br><span class=\"line\">              console.info&amp;&amp;console.info(&quot;update link as:--&gt;&quot;+config.root + link + src);</span><br><span class=\"line\">            &#125;</span><br><span class=\"line\">        &#125;else&#123;</span><br><span class=\"line\">            console.info&amp;&amp;console.info(&quot;no src attr, skipped...&quot;);</span><br><span class=\"line\">            console.info&amp;&amp;console.info($(this));</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">      &#125;);</span><br><span class=\"line\">      data[key] &#x3D; $.html();</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">  &#125;</span><br><span class=\"line\">&#125;);</span><br></pre></td></tr></table></figure></li>\n<li>把自己想用的图片放在新建的文件夹(文章名的文件夹)中，在<code>test.md</code>中引用是<code>![](图片的文件名)</code><br><img src=\"https://gitee.com/light_trap/for-picgo/raw/master/image/20210105183827.png\"></li>\n</ol>\n<h4 id=\"方法二\"><a href=\"#方法二\" class=\"headerlink\" title=\"方法二\"></a>方法二</h4><ol>\n<li>在<code>\\blog\\source</code>目录下新建<code>image</code>文件夹<br><img src=\"https://gitee.com/light_trap/for-picgo/raw/master/image/20210105184557.png\"></li>\n<li>把想要插入的图片都放入<code>image</code>文件夹下</li>\n<li>在插入图片的位置引用<code>![](/image/图片名)</code>即可</li>\n</ol>\n<p><strong>注</strong>：按照这种方式插入可能会在本地图片加载不出来，上传后就可以加载出来了；若上传后还加载不出来，检查blog根目录下的配置文件<code>_config.yml</code>的<code>post_asset_folder:</code>是否为<code>false</code></p>\n<h4 id=\"方法三\"><a href=\"#方法三\" class=\"headerlink\" title=\"方法三\"></a>方法三</h4><p>用图床实现插入图片，也是最推荐的一种，具体见<a href=\"https://romanticqq.top/2021/01/05/hexo-PicGo-gitee%E5%9B%BE%E5%BA%8A/\">hexo+PicGo+gitee图床</a></p>\n","site":{"data":{}},"length":2877,"excerpt":"","more":"<h4 id=\"方法一\"><a href=\"#方法一\" class=\"headerlink\" title=\"方法一\"></a>方法一</h4><ol>\n<li>在blog的本地文件的根目录中打开git Bash，然后执行<br><code>    npm install hexo-asset-image --save</code></li>\n<li>打开blog根目录下的配置文件_config.yml，修改<br><code>post_asset_folder: true  //由false改为true</code><br>此时，当执行<code>hexo n 文章名</code>的时候，会在_post目录下新建同名的一个文件夹和一个后缀名为<code>.md</code>的文件<br><img src=\"https://gitee.com/light_trap/for-picgo/raw/master/image/20210105173654.png\"><br><img src=\"https://gitee.com/light_trap/for-picgo/raw/master/image/20210105173920.png\"></li>\n<li>打开<code>/node_modules/hexo-asset-image/index.js</code> 用下面代码替换<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br><span class=\"line\">38</span><br><span class=\"line\">39</span><br><span class=\"line\">40</span><br><span class=\"line\">41</span><br><span class=\"line\">42</span><br><span class=\"line\">43</span><br><span class=\"line\">44</span><br><span class=\"line\">45</span><br><span class=\"line\">46</span><br><span class=\"line\">47</span><br><span class=\"line\">48</span><br><span class=\"line\">49</span><br><span class=\"line\">50</span><br><span class=\"line\">51</span><br><span class=\"line\">52</span><br><span class=\"line\">53</span><br><span class=\"line\">54</span><br><span class=\"line\">55</span><br><span class=\"line\">56</span><br><span class=\"line\">57</span><br><span class=\"line\">58</span><br><span class=\"line\">59</span><br><span class=\"line\">60</span><br><span class=\"line\">61</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">&#39;use strict&#39;;</span><br><span class=\"line\">var cheerio &#x3D; require(&#39;cheerio&#39;);</span><br><span class=\"line\"></span><br><span class=\"line\">&#x2F;&#x2F; http:&#x2F;&#x2F;stackoverflow.com&#x2F;questions&#x2F;14480345&#x2F;how-to-get-the-nth-occurrence-in-a-string</span><br><span class=\"line\">function getPosition(str, m, i) &#123;</span><br><span class=\"line\">  return str.split(m, i).join(m).length;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\">var version &#x3D; String(hexo.version).split(&#39;.&#39;);</span><br><span class=\"line\">hexo.extend.filter.register(&#39;after_post_render&#39;, function(data)&#123;</span><br><span class=\"line\">  var config &#x3D; hexo.config;</span><br><span class=\"line\">  if(config.post_asset_folder)&#123;</span><br><span class=\"line\">        var link &#x3D; data.permalink;</span><br><span class=\"line\">    if(version.length &gt; 0 &amp;&amp; Number(version[0]) &#x3D;&#x3D; 3)</span><br><span class=\"line\">       var beginPos &#x3D; getPosition(link, &#39;&#x2F;&#39;, 1) + 1;</span><br><span class=\"line\">    else</span><br><span class=\"line\">       var beginPos &#x3D; getPosition(link, &#39;&#x2F;&#39;, 3) + 1;</span><br><span class=\"line\">    &#x2F;&#x2F; In hexo 3.1.1, the permalink of &quot;about&quot; page is like &quot;...&#x2F;about&#x2F;index.html&quot;.</span><br><span class=\"line\">    var endPos &#x3D; link.lastIndexOf(&#39;&#x2F;&#39;) + 1;</span><br><span class=\"line\">    link &#x3D; link.substring(beginPos, endPos);</span><br><span class=\"line\"></span><br><span class=\"line\">    var toprocess &#x3D; [&#39;excerpt&#39;, &#39;more&#39;, &#39;content&#39;];</span><br><span class=\"line\">    for(var i &#x3D; 0; i &lt; toprocess.length; i++)&#123;</span><br><span class=\"line\">      var key &#x3D; toprocess[i];</span><br><span class=\"line\"> </span><br><span class=\"line\">      var $ &#x3D; cheerio.load(data[key], &#123;</span><br><span class=\"line\">        ignoreWhitespace: false,</span><br><span class=\"line\">        xmlMode: false,</span><br><span class=\"line\">        lowerCaseTags: false,</span><br><span class=\"line\">        decodeEntities: false</span><br><span class=\"line\">      &#125;);</span><br><span class=\"line\"></span><br><span class=\"line\">      $(&#39;img&#39;).each(function()&#123;</span><br><span class=\"line\">        if ($(this).attr(&#39;src&#39;))&#123;</span><br><span class=\"line\">            &#x2F;&#x2F; For windows style path, we replace &#39;\\&#39; to &#39;&#x2F;&#39;.</span><br><span class=\"line\">            var src &#x3D; $(this).attr(&#39;src&#39;).replace(&#39;\\\\&#39;, &#39;&#x2F;&#39;);</span><br><span class=\"line\">            if(!&#x2F;http[s]*.*|\\&#x2F;\\&#x2F;.*&#x2F;.test(src) &amp;&amp;</span><br><span class=\"line\">               !&#x2F;^\\s*\\&#x2F;&#x2F;.test(src)) &#123;</span><br><span class=\"line\">              &#x2F;&#x2F; For &quot;about&quot; page, the first part of &quot;src&quot; can&#39;t be removed.</span><br><span class=\"line\">              &#x2F;&#x2F; In addition, to support multi-level local directory.</span><br><span class=\"line\">              var linkArray &#x3D; link.split(&#39;&#x2F;&#39;).filter(function(elem)&#123;</span><br><span class=\"line\">                return elem !&#x3D; &#39;&#39;;</span><br><span class=\"line\">              &#125;);</span><br><span class=\"line\">              var srcArray &#x3D; src.split(&#39;&#x2F;&#39;).filter(function(elem)&#123;</span><br><span class=\"line\">                return elem !&#x3D; &#39;&#39; &amp;&amp; elem !&#x3D; &#39;.&#39;;</span><br><span class=\"line\">              &#125;);</span><br><span class=\"line\">              if(srcArray.length &gt; 1)</span><br><span class=\"line\">                srcArray.shift();</span><br><span class=\"line\">              src &#x3D; srcArray.join(&#39;&#x2F;&#39;);</span><br><span class=\"line\">              $(this).attr(&#39;src&#39;, config.root + link + src);</span><br><span class=\"line\">              console.info&amp;&amp;console.info(&quot;update link as:--&gt;&quot;+config.root + link + src);</span><br><span class=\"line\">            &#125;</span><br><span class=\"line\">        &#125;else&#123;</span><br><span class=\"line\">            console.info&amp;&amp;console.info(&quot;no src attr, skipped...&quot;);</span><br><span class=\"line\">            console.info&amp;&amp;console.info($(this));</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">      &#125;);</span><br><span class=\"line\">      data[key] &#x3D; $.html();</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">  &#125;</span><br><span class=\"line\">&#125;);</span><br></pre></td></tr></table></figure></li>\n<li>把自己想用的图片放在新建的文件夹(文章名的文件夹)中，在<code>test.md</code>中引用是<code>![](图片的文件名)</code><br><img src=\"https://gitee.com/light_trap/for-picgo/raw/master/image/20210105183827.png\"></li>\n</ol>\n<h4 id=\"方法二\"><a href=\"#方法二\" class=\"headerlink\" title=\"方法二\"></a>方法二</h4><ol>\n<li>在<code>\\blog\\source</code>目录下新建<code>image</code>文件夹<br><img src=\"https://gitee.com/light_trap/for-picgo/raw/master/image/20210105184557.png\"></li>\n<li>把想要插入的图片都放入<code>image</code>文件夹下</li>\n<li>在插入图片的位置引用<code>![](/image/图片名)</code>即可</li>\n</ol>\n<p><strong>注</strong>：按照这种方式插入可能会在本地图片加载不出来，上传后就可以加载出来了；若上传后还加载不出来，检查blog根目录下的配置文件<code>_config.yml</code>的<code>post_asset_folder:</code>是否为<code>false</code></p>\n<h4 id=\"方法三\"><a href=\"#方法三\" class=\"headerlink\" title=\"方法三\"></a>方法三</h4><p>用图床实现插入图片，也是最推荐的一种，具体见<a href=\"https://romanticqq.top/2021/01/05/hexo-PicGo-gitee%E5%9B%BE%E5%BA%8A/\">hexo+PicGo+gitee图床</a></p>\n"},{"title":"hexo绑定域名","abbrlink":48994,"date":"2021-01-05T12:08:28.000Z","_content":"1. **注册域名**\n可以挑选[腾讯云](https://cloud.tencent.com/)或[阿里云](https://www.aliyun.com/)，或则其余任何一家进行域名注册\n2. **获取github仓库IP**\n打开`cmd`,`ping 仓库名.github.io`,获取IP\n![](https://gitee.com/light_trap/for-picgo/raw/master/image/20210105215709.png)\n我的这个ping的有点问题，但方法没错\n3. **域名和IP绑定**\n找到控制台，点解析\n![](https://gitee.com/light_trap/for-picgo/raw/master/image/20210105220220.png)\n然后点击修改，按照下面图片提示\n![](https://gitee.com/light_trap/for-picgo/raw/master/image/20210105220540.png)\n4. **创建CNAME文件**\n在`blog/source`目录创建`CNAME(无后缀名)`,把申请的域名填入即可\n![](https://gitee.com/light_trap/for-picgo/raw/master/image/20210105215242.png)\n5. **域名和github仓库绑定**\n打开存放博客的仓库，点击`settings`,找到\n![](https://gitee.com/light_trap/for-picgo/raw/master/image/20210105214939.png)\n在输入框输入申请的域名，然后点击`save`\n6. **访问**\n域名，IP，https://仓库名.github.io，三则都可访问","source":"_posts/hexo绑定域名.md","raw":"---\ntitle: hexo绑定域名\ntags:\n  - hexo\n  - next\ncategories: hexo\nabbrlink: 48994\ndate: 2021-01-05 20:08:28\n---\n1. **注册域名**\n可以挑选[腾讯云](https://cloud.tencent.com/)或[阿里云](https://www.aliyun.com/)，或则其余任何一家进行域名注册\n2. **获取github仓库IP**\n打开`cmd`,`ping 仓库名.github.io`,获取IP\n![](https://gitee.com/light_trap/for-picgo/raw/master/image/20210105215709.png)\n我的这个ping的有点问题，但方法没错\n3. **域名和IP绑定**\n找到控制台，点解析\n![](https://gitee.com/light_trap/for-picgo/raw/master/image/20210105220220.png)\n然后点击修改，按照下面图片提示\n![](https://gitee.com/light_trap/for-picgo/raw/master/image/20210105220540.png)\n4. **创建CNAME文件**\n在`blog/source`目录创建`CNAME(无后缀名)`,把申请的域名填入即可\n![](https://gitee.com/light_trap/for-picgo/raw/master/image/20210105215242.png)\n5. **域名和github仓库绑定**\n打开存放博客的仓库，点击`settings`,找到\n![](https://gitee.com/light_trap/for-picgo/raw/master/image/20210105214939.png)\n在输入框输入申请的域名，然后点击`save`\n6. **访问**\n域名，IP，https://仓库名.github.io，三则都可访问","slug":"hexo绑定域名","published":1,"updated":"2021-07-27T14:51:43.521Z","comments":1,"layout":"post","photos":[],"link":"","_id":"ckrmv4jhu0022zrfy94ojfw5t","content":"<ol>\n<li><strong>注册域名</strong><br>可以挑选<a href=\"https://cloud.tencent.com/\">腾讯云</a>或<a href=\"https://www.aliyun.com/\">阿里云</a>，或则其余任何一家进行域名注册</li>\n<li><strong>获取github仓库IP</strong><br>打开<code>cmd</code>,<code>ping 仓库名.github.io</code>,获取IP<br><img src=\"https://gitee.com/light_trap/for-picgo/raw/master/image/20210105215709.png\"><br>我的这个ping的有点问题，但方法没错</li>\n<li><strong>域名和IP绑定</strong><br>找到控制台，点解析<br><img src=\"https://gitee.com/light_trap/for-picgo/raw/master/image/20210105220220.png\"><br>然后点击修改，按照下面图片提示<br><img src=\"https://gitee.com/light_trap/for-picgo/raw/master/image/20210105220540.png\"></li>\n<li><strong>创建CNAME文件</strong><br>在<code>blog/source</code>目录创建<code>CNAME(无后缀名)</code>,把申请的域名填入即可<br><img src=\"https://gitee.com/light_trap/for-picgo/raw/master/image/20210105215242.png\"></li>\n<li><strong>域名和github仓库绑定</strong><br>打开存放博客的仓库，点击<code>settings</code>,找到<br><img src=\"https://gitee.com/light_trap/for-picgo/raw/master/image/20210105214939.png\"><br>在输入框输入申请的域名，然后点击<code>save</code></li>\n<li><strong>访问</strong><br>域名，IP，https://仓库名.github.io，三则都可访问</li>\n</ol>\n","site":{"data":{}},"length":259,"excerpt":"","more":"<ol>\n<li><strong>注册域名</strong><br>可以挑选<a href=\"https://cloud.tencent.com/\">腾讯云</a>或<a href=\"https://www.aliyun.com/\">阿里云</a>，或则其余任何一家进行域名注册</li>\n<li><strong>获取github仓库IP</strong><br>打开<code>cmd</code>,<code>ping 仓库名.github.io</code>,获取IP<br><img src=\"https://gitee.com/light_trap/for-picgo/raw/master/image/20210105215709.png\"><br>我的这个ping的有点问题，但方法没错</li>\n<li><strong>域名和IP绑定</strong><br>找到控制台，点解析<br><img src=\"https://gitee.com/light_trap/for-picgo/raw/master/image/20210105220220.png\"><br>然后点击修改，按照下面图片提示<br><img src=\"https://gitee.com/light_trap/for-picgo/raw/master/image/20210105220540.png\"></li>\n<li><strong>创建CNAME文件</strong><br>在<code>blog/source</code>目录创建<code>CNAME(无后缀名)</code>,把申请的域名填入即可<br><img src=\"https://gitee.com/light_trap/for-picgo/raw/master/image/20210105215242.png\"></li>\n<li><strong>域名和github仓库绑定</strong><br>打开存放博客的仓库，点击<code>settings</code>,找到<br><img src=\"https://gitee.com/light_trap/for-picgo/raw/master/image/20210105214939.png\"><br>在输入框输入申请的域名，然后点击<code>save</code></li>\n<li><strong>访问</strong><br>域名，IP，https://仓库名.github.io，三则都可访问</li>\n</ol>\n"},{"title":"hexo部署","abbrlink":55230,"date":"2021-01-04T07:48:49.000Z","_content":"## 部署\n1. 注册github账号(有github账号的可跳过)\n2. 登录后，新建一个代码仓库名为：github账号名.github.io,权限为public\n3. 实现git和github的链接\n    1. 鼠标右键打开git Bash Here\n    2. 在git Bash Here中设置\n    ```     \n    git config --global user.name \"Your Name\"\n    git config --global user.email \"email@example.com\"\n    ```\n    3.  然后再输入，获取密钥\n   ```\n   ssh-keygen -t rsa -C \"your_email@example.com\" \n   ```\n   按照提示默认下一步，生成两个文件，按照所给出的路径，用记事本打开id_rsa.pub，并复制\n   4. 打开github的settings/SSH and GPG keys\n   点击SSH keys旁边的新建，在Title处给密钥起一个名字，并把密钥粘贴到Key处，\n   5. 输入` ssh -T git@github.com`判断git和github是否连接成功\n4. 添加提交设置：打开blog/_config.yml在最后添加\n   ```\n    deploy:\n    type: git   \n    repo: https://github.com/Romanticqq/romanticqq.github.io.git //提交的github仓库地址\n    branch: master //分支名\n   ```\n5. 进行部署\n    ```\n    hexo clean //清理public的内容\n    hexo g //生成静态内容\n    hexo d  //部署上传\n    可能在上传时会报错，此时需要执行下面一句命令行\n    npm install hexo-deployer-git --save\n    ```\n6. 访问\n在浏览器地址栏输入`https://仓库名.github.io`,即可访问\n\n\n\n\n","source":"_posts/hexo部署.md","raw":"---\ntitle: hexo部署\ntags:\n  - hexo\n  - next\ncategories: hexo\nabbrlink: 55230\ndate: 2021-01-04 15:48:49\n---\n## 部署\n1. 注册github账号(有github账号的可跳过)\n2. 登录后，新建一个代码仓库名为：github账号名.github.io,权限为public\n3. 实现git和github的链接\n    1. 鼠标右键打开git Bash Here\n    2. 在git Bash Here中设置\n    ```     \n    git config --global user.name \"Your Name\"\n    git config --global user.email \"email@example.com\"\n    ```\n    3.  然后再输入，获取密钥\n   ```\n   ssh-keygen -t rsa -C \"your_email@example.com\" \n   ```\n   按照提示默认下一步，生成两个文件，按照所给出的路径，用记事本打开id_rsa.pub，并复制\n   4. 打开github的settings/SSH and GPG keys\n   点击SSH keys旁边的新建，在Title处给密钥起一个名字，并把密钥粘贴到Key处，\n   5. 输入` ssh -T git@github.com`判断git和github是否连接成功\n4. 添加提交设置：打开blog/_config.yml在最后添加\n   ```\n    deploy:\n    type: git   \n    repo: https://github.com/Romanticqq/romanticqq.github.io.git //提交的github仓库地址\n    branch: master //分支名\n   ```\n5. 进行部署\n    ```\n    hexo clean //清理public的内容\n    hexo g //生成静态内容\n    hexo d  //部署上传\n    可能在上传时会报错，此时需要执行下面一句命令行\n    npm install hexo-deployer-git --save\n    ```\n6. 访问\n在浏览器地址栏输入`https://仓库名.github.io`,即可访问\n\n\n\n\n","slug":"hexo部署","published":1,"updated":"2021-07-27T14:51:43.522Z","comments":1,"layout":"post","photos":[],"link":"","_id":"ckrmv4jhv0025zrfy5pue9ozc","content":"<h2 id=\"部署\"><a href=\"#部署\" class=\"headerlink\" title=\"部署\"></a>部署</h2><ol>\n<li>注册github账号(有github账号的可跳过)</li>\n<li>登录后，新建一个代码仓库名为：github账号名.github.io,权限为public</li>\n<li>实现git和github的链接<ol>\n<li>鼠标右键打开git Bash Here</li>\n<li>在git Bash Here中设置<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">git config --global user.name &quot;Your Name&quot;</span><br><span class=\"line\">git config --global user.email &quot;email@example.com&quot;</span><br></pre></td></tr></table></figure></li>\n<li> 然后再输入，获取密钥<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">ssh-keygen -t rsa -C &quot;your_email@example.com&quot; </span><br></pre></td></tr></table></figure>\n按照提示默认下一步，生成两个文件，按照所给出的路径，用记事本打开id_rsa.pub，并复制</li>\n<li>打开github的settings/SSH and GPG keys<br>点击SSH keys旁边的新建，在Title处给密钥起一个名字，并把密钥粘贴到Key处，</li>\n<li>输入<code> ssh -T git@github.com</code>判断git和github是否连接成功</li>\n</ol>\n</li>\n<li>添加提交设置：打开blog/_config.yml在最后添加<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">deploy:</span><br><span class=\"line\">type: git   </span><br><span class=\"line\">repo: https:&#x2F;&#x2F;github.com&#x2F;Romanticqq&#x2F;romanticqq.github.io.git &#x2F;&#x2F;提交的github仓库地址</span><br><span class=\"line\">branch: master &#x2F;&#x2F;分支名</span><br></pre></td></tr></table></figure></li>\n<li>进行部署 <figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">hexo clean &#x2F;&#x2F;清理public的内容</span><br><span class=\"line\">hexo g &#x2F;&#x2F;生成静态内容</span><br><span class=\"line\">hexo d  &#x2F;&#x2F;部署上传</span><br><span class=\"line\">可能在上传时会报错，此时需要执行下面一句命令行</span><br><span class=\"line\">npm install hexo-deployer-git --save</span><br></pre></td></tr></table></figure></li>\n<li>访问<br>在浏览器地址栏输入<code>https://仓库名.github.io</code>,即可访问</li>\n</ol>\n","site":{"data":{}},"length":802,"excerpt":"","more":"<h2 id=\"部署\"><a href=\"#部署\" class=\"headerlink\" title=\"部署\"></a>部署</h2><ol>\n<li>注册github账号(有github账号的可跳过)</li>\n<li>登录后，新建一个代码仓库名为：github账号名.github.io,权限为public</li>\n<li>实现git和github的链接<ol>\n<li>鼠标右键打开git Bash Here</li>\n<li>在git Bash Here中设置<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">git config --global user.name &quot;Your Name&quot;</span><br><span class=\"line\">git config --global user.email &quot;email@example.com&quot;</span><br></pre></td></tr></table></figure></li>\n<li> 然后再输入，获取密钥<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">ssh-keygen -t rsa -C &quot;your_email@example.com&quot; </span><br></pre></td></tr></table></figure>\n按照提示默认下一步，生成两个文件，按照所给出的路径，用记事本打开id_rsa.pub，并复制</li>\n<li>打开github的settings/SSH and GPG keys<br>点击SSH keys旁边的新建，在Title处给密钥起一个名字，并把密钥粘贴到Key处，</li>\n<li>输入<code> ssh -T git@github.com</code>判断git和github是否连接成功</li>\n</ol>\n</li>\n<li>添加提交设置：打开blog/_config.yml在最后添加<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">deploy:</span><br><span class=\"line\">type: git   </span><br><span class=\"line\">repo: https:&#x2F;&#x2F;github.com&#x2F;Romanticqq&#x2F;romanticqq.github.io.git &#x2F;&#x2F;提交的github仓库地址</span><br><span class=\"line\">branch: master &#x2F;&#x2F;分支名</span><br></pre></td></tr></table></figure></li>\n<li>进行部署 <figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">hexo clean &#x2F;&#x2F;清理public的内容</span><br><span class=\"line\">hexo g &#x2F;&#x2F;生成静态内容</span><br><span class=\"line\">hexo d  &#x2F;&#x2F;部署上传</span><br><span class=\"line\">可能在上传时会报错，此时需要执行下面一句命令行</span><br><span class=\"line\">npm install hexo-deployer-git --save</span><br></pre></td></tr></table></figure></li>\n<li>访问<br>在浏览器地址栏输入<code>https://仓库名.github.io</code>,即可访问</li>\n</ol>\n"},{"title":"Java笔记(第一天)","abbrlink":21767,"date":"2021-04-24T15:33:04.000Z","_content":"1. Java只有单继承，没有多继承；\n2. 命名规则：\n   (1)大驼峰：每个单词首字母大写；\n   (2)小驼峰：除了第一个单词首字母小写，其余都大写；\n3. 重载：在同一个类中，方法名相同的情况下，可以通过参数不同，参数类型不同进行重载(不能用返回值类型不同进行重载)\n4. 代码千万行，规范第一行；格式不规范，码农两行泪；\n5. 数据类型转换：\n   (1)自动类型转换：如int+double会自动转化为double；\n   (2)强制类型转换：如(int)(a+b)；\n   (3)利：可以满足数据类型的一致化；弊：会导致数据类型精度丢失，且不可逆；\n6. 数组两种初始化的方法：\n   (1)动态初始化：如int[] a=new int[5];\n   (2)静态初试化：如int[] a=new int[]{1,2,3};\n   注：数组的长度不可变；标准格式初始化可以拆，动态初始化和静态初始化都可以拆；\n7. 在java中可以用任何数据类型做参数和返回值；特别之是可以用对象作为参数和返回值；\n8. 在写类中对全局变量时，对于Boolean类型的取值是isName，而不是getName；\n9. 字符串用双引号；\n10. 调用自己类里的方法必须为静态方法；\n11. java的内存需要划分为五个部分：\n    (1)栈：存放的都是方法中的局部变量。方法的运行一定要在栈中；\n    作用域：一旦超出作用域，立刻从栈内存当中消失；\n    (2)堆：凡是new出来的东西，都在堆当中；堆内存里面的东西都有一个地址值：16进制；堆内存里面的数据，都有默认值。规则：\n    如果是整数       默认为0\n    如果是浮点数     默认为0.0\n    如果是字符       默认为'\\u0000'\n    如果是布尔       默认为false\n    如果是引用类型   默认为null\n    (3)方法区：存储.class相关信息，包含方法的信息。\n    (4)本地方法栈：与操作系统有关；\n    (5)寄存器：与CPU有关；\n12. 构造方法在new时被调用执行；\n\n","source":"_posts/java笔记(第一天).md","raw":"---\ntitle: Java笔记(第一天)\ntags:\n  - Java\ncategories: Java\nabbrlink: 21767\ndate: 2021-04-24 23:33:04\n---\n1. Java只有单继承，没有多继承；\n2. 命名规则：\n   (1)大驼峰：每个单词首字母大写；\n   (2)小驼峰：除了第一个单词首字母小写，其余都大写；\n3. 重载：在同一个类中，方法名相同的情况下，可以通过参数不同，参数类型不同进行重载(不能用返回值类型不同进行重载)\n4. 代码千万行，规范第一行；格式不规范，码农两行泪；\n5. 数据类型转换：\n   (1)自动类型转换：如int+double会自动转化为double；\n   (2)强制类型转换：如(int)(a+b)；\n   (3)利：可以满足数据类型的一致化；弊：会导致数据类型精度丢失，且不可逆；\n6. 数组两种初始化的方法：\n   (1)动态初始化：如int[] a=new int[5];\n   (2)静态初试化：如int[] a=new int[]{1,2,3};\n   注：数组的长度不可变；标准格式初始化可以拆，动态初始化和静态初始化都可以拆；\n7. 在java中可以用任何数据类型做参数和返回值；特别之是可以用对象作为参数和返回值；\n8. 在写类中对全局变量时，对于Boolean类型的取值是isName，而不是getName；\n9. 字符串用双引号；\n10. 调用自己类里的方法必须为静态方法；\n11. java的内存需要划分为五个部分：\n    (1)栈：存放的都是方法中的局部变量。方法的运行一定要在栈中；\n    作用域：一旦超出作用域，立刻从栈内存当中消失；\n    (2)堆：凡是new出来的东西，都在堆当中；堆内存里面的东西都有一个地址值：16进制；堆内存里面的数据，都有默认值。规则：\n    如果是整数       默认为0\n    如果是浮点数     默认为0.0\n    如果是字符       默认为'\\u0000'\n    如果是布尔       默认为false\n    如果是引用类型   默认为null\n    (3)方法区：存储.class相关信息，包含方法的信息。\n    (4)本地方法栈：与操作系统有关；\n    (5)寄存器：与CPU有关；\n12. 构造方法在new时被调用执行；\n\n","slug":"java笔记(第一天)","published":1,"updated":"2021-07-27T14:51:43.523Z","comments":1,"layout":"post","photos":[],"link":"","_id":"ckrmv4jhx0028zrfygq7747m0","content":"<ol>\n<li>Java只有单继承，没有多继承；</li>\n<li>命名规则：<br>(1)大驼峰：每个单词首字母大写；<br>(2)小驼峰：除了第一个单词首字母小写，其余都大写；</li>\n<li>重载：在同一个类中，方法名相同的情况下，可以通过参数不同，参数类型不同进行重载(不能用返回值类型不同进行重载)</li>\n<li>代码千万行，规范第一行；格式不规范，码农两行泪；</li>\n<li>数据类型转换：<br>(1)自动类型转换：如int+double会自动转化为double；<br>(2)强制类型转换：如(int)(a+b)；<br>(3)利：可以满足数据类型的一致化；弊：会导致数据类型精度丢失，且不可逆；</li>\n<li>数组两种初始化的方法：<br>(1)动态初始化：如int[] a=new int[5];<br>(2)静态初试化：如int[] a=new int[]{1,2,3};<br>注：数组的长度不可变；标准格式初始化可以拆，动态初始化和静态初始化都可以拆；</li>\n<li>在java中可以用任何数据类型做参数和返回值；特别之是可以用对象作为参数和返回值；</li>\n<li>在写类中对全局变量时，对于Boolean类型的取值是isName，而不是getName；</li>\n<li>字符串用双引号；</li>\n<li>调用自己类里的方法必须为静态方法；</li>\n<li>java的内存需要划分为五个部分：<br>(1)栈：存放的都是方法中的局部变量。方法的运行一定要在栈中；<br>作用域：一旦超出作用域，立刻从栈内存当中消失；<br>(2)堆：凡是new出来的东西，都在堆当中；堆内存里面的东西都有一个地址值：16进制；堆内存里面的数据，都有默认值。规则：<br>如果是整数       默认为0<br>如果是浮点数     默认为0.0<br>如果是字符       默认为’\\u0000’<br>如果是布尔       默认为false<br>如果是引用类型   默认为null<br>(3)方法区：存储.class相关信息，包含方法的信息。<br>(4)本地方法栈：与操作系统有关；<br>(5)寄存器：与CPU有关；</li>\n<li>构造方法在new时被调用执行；</li>\n</ol>\n","site":{"data":{}},"length":732,"excerpt":"","more":"<ol>\n<li>Java只有单继承，没有多继承；</li>\n<li>命名规则：<br>(1)大驼峰：每个单词首字母大写；<br>(2)小驼峰：除了第一个单词首字母小写，其余都大写；</li>\n<li>重载：在同一个类中，方法名相同的情况下，可以通过参数不同，参数类型不同进行重载(不能用返回值类型不同进行重载)</li>\n<li>代码千万行，规范第一行；格式不规范，码农两行泪；</li>\n<li>数据类型转换：<br>(1)自动类型转换：如int+double会自动转化为double；<br>(2)强制类型转换：如(int)(a+b)；<br>(3)利：可以满足数据类型的一致化；弊：会导致数据类型精度丢失，且不可逆；</li>\n<li>数组两种初始化的方法：<br>(1)动态初始化：如int[] a=new int[5];<br>(2)静态初试化：如int[] a=new int[]{1,2,3};<br>注：数组的长度不可变；标准格式初始化可以拆，动态初始化和静态初始化都可以拆；</li>\n<li>在java中可以用任何数据类型做参数和返回值；特别之是可以用对象作为参数和返回值；</li>\n<li>在写类中对全局变量时，对于Boolean类型的取值是isName，而不是getName；</li>\n<li>字符串用双引号；</li>\n<li>调用自己类里的方法必须为静态方法；</li>\n<li>java的内存需要划分为五个部分：<br>(1)栈：存放的都是方法中的局部变量。方法的运行一定要在栈中；<br>作用域：一旦超出作用域，立刻从栈内存当中消失；<br>(2)堆：凡是new出来的东西，都在堆当中；堆内存里面的东西都有一个地址值：16进制；堆内存里面的数据，都有默认值。规则：<br>如果是整数       默认为0<br>如果是浮点数     默认为0.0<br>如果是字符       默认为’\\u0000’<br>如果是布尔       默认为false<br>如果是引用类型   默认为null<br>(3)方法区：存储.class相关信息，包含方法的信息。<br>(4)本地方法栈：与操作系统有关；<br>(5)寄存器：与CPU有关；</li>\n<li>构造方法在new时被调用执行；</li>\n</ol>\n"},{"title":"js文件的写法","abbrlink":7375,"date":"2021-03-09T00:54:12.000Z","_content":"```javascript\n(function(owner){\n\towner.btn=function(){\n\t\talert(\"aaa\");\n\t}\n}(window.test={})) //test是js的文件名\n```\n","source":"_posts/js文件的写法.md","raw":"---\ntitle: js文件的写法\ntags:\n  - 前端\ncategories: 前端\nabbrlink: 7375\ndate: 2021-03-09 08:54:12\n---\n```javascript\n(function(owner){\n\towner.btn=function(){\n\t\talert(\"aaa\");\n\t}\n}(window.test={})) //test是js的文件名\n```\n","slug":"js文件的写法","published":1,"updated":"2021-07-27T14:51:43.524Z","comments":1,"layout":"post","photos":[],"link":"","_id":"ckrmv4jhy002czrfy6c7j7v90","content":"<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">(<span class=\"function\"><span class=\"keyword\">function</span>(<span class=\"params\">owner</span>)</span>&#123;</span><br><span class=\"line\">\towner.btn=<span class=\"function\"><span class=\"keyword\">function</span>(<span class=\"params\"></span>)</span>&#123;</span><br><span class=\"line\">\t\talert(<span class=\"string\">&quot;aaa&quot;</span>);</span><br><span class=\"line\">\t&#125;</span><br><span class=\"line\">&#125;(<span class=\"built_in\">window</span>.test=&#123;&#125;)) <span class=\"comment\">//test是js的文件名</span></span><br></pre></td></tr></table></figure>\n","site":{"data":{}},"length":128,"excerpt":"","more":"<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">(<span class=\"function\"><span class=\"keyword\">function</span>(<span class=\"params\">owner</span>)</span>&#123;</span><br><span class=\"line\">\towner.btn=<span class=\"function\"><span class=\"keyword\">function</span>(<span class=\"params\"></span>)</span>&#123;</span><br><span class=\"line\">\t\talert(<span class=\"string\">&quot;aaa&quot;</span>);</span><br><span class=\"line\">\t&#125;</span><br><span class=\"line\">&#125;(<span class=\"built_in\">window</span>.test=&#123;&#125;)) <span class=\"comment\">//test是js的文件名</span></span><br></pre></td></tr></table></figure>\n"},{"title":"laravel8路由","abbrlink":30139,"date":"2021-06-03T14:28:38.000Z","_content":"1. get请求\n    ```php\n    Route::get('/aaa',function (){\n        echo 'aaa';\n    });\n    \n    Route::get('/aaa',[TestController::class,'form']);\n    ```\n\n2. post请求\n    ```php\n    Route::post('/aaa',function (){\n    echo 'aaa';\n    });\n    \n    Route::post('/aaa',[TestController::class,'form']);\n    ```\n\n3. 一个路由响应多个http请求动作\n    ```php\n       Route::match(['get', 'post'], 'foo', function () {\n           return 'This is a request from get or post';\n       });\n    ```\n\n4. 一个路由来响应所有 HTTP 请求动作\n    ```php\n    Route::any('bar', function () {\n    return 'This is a request from any HTTP verb';\n    });\n    ```\n\n5. 重定向路由\n    ```php\n    Route::redirect('/here','/aaa');\n    ```\n6. 视图路由\n    ```php\n    Route::view('hello', 'hello', ['name' => '学院君']);\n    <h1>\n        Hello, {{ $name }}!\n    </h1>\n    注：在view中第一个参数为URL，第二个参数为视图名称，第三个参数可选为需要传到视图文件的值\n\n\n7. 路由参数\n    ```php\n    //必选参数\n    Route::get('user/{id}', function ($id) {\n        return 'User ' . $id;\n    });\n    //可选参数  可以设置默认值\n    Route::get('user/{id？}', function ($id=1) {\n        return 'User ' . $id;\n    });\n    //多个参数\n    Route::get('posts/{post}/{comment}', function ($postId, $commentId) {\n        return $postId . '-' . $commentId;\n    });\n\n\n8. 正则约束\n   ```php\n   //判断一个值\n   Route::get('user/{id}', function ($id) {\n       // $id 必须是数字\n   })->where('id', '[0-9]+');\n   //判断多个值\n   Route::get('user/{id}', function ($id) {\n       // $id 必须是数字\n   })->where('id', '[0-9]+');\n\n9. 全局约束\n\n   ```php\n   //需要在 RouteServiceProvider 类的 boot 方法中定义这种约束模式\n   public function boot()\n   {\n       Route::pattern('id', '[0-9]+');\n   }\n   Route::get('user/{id}', function ($id) {\n       // 只有当 {id} 是数字时才会被调用\n   });\n\n\n10. 分组前缀\n    ```php\n    Route::prefix('sss')->group(function (){\n    Route::get('index',function (){\n    return 33;\n    });\n    Route::get('welcome',function (){\n    return 44;\n    });\n    });\n    //访问时路由为/sss/index或/sss/welcome\n\n","source":"_posts/laravel8路由.md","raw":"---\ntitle: laravel8路由\ntags:\n  - laravel\n  - php\ncategories: 后端\nabbrlink: 30139\ndate: 2021-06-03 22:28:38\n---\n1. get请求\n    ```php\n    Route::get('/aaa',function (){\n        echo 'aaa';\n    });\n    \n    Route::get('/aaa',[TestController::class,'form']);\n    ```\n\n2. post请求\n    ```php\n    Route::post('/aaa',function (){\n    echo 'aaa';\n    });\n    \n    Route::post('/aaa',[TestController::class,'form']);\n    ```\n\n3. 一个路由响应多个http请求动作\n    ```php\n       Route::match(['get', 'post'], 'foo', function () {\n           return 'This is a request from get or post';\n       });\n    ```\n\n4. 一个路由来响应所有 HTTP 请求动作\n    ```php\n    Route::any('bar', function () {\n    return 'This is a request from any HTTP verb';\n    });\n    ```\n\n5. 重定向路由\n    ```php\n    Route::redirect('/here','/aaa');\n    ```\n6. 视图路由\n    ```php\n    Route::view('hello', 'hello', ['name' => '学院君']);\n    <h1>\n        Hello, {{ $name }}!\n    </h1>\n    注：在view中第一个参数为URL，第二个参数为视图名称，第三个参数可选为需要传到视图文件的值\n\n\n7. 路由参数\n    ```php\n    //必选参数\n    Route::get('user/{id}', function ($id) {\n        return 'User ' . $id;\n    });\n    //可选参数  可以设置默认值\n    Route::get('user/{id？}', function ($id=1) {\n        return 'User ' . $id;\n    });\n    //多个参数\n    Route::get('posts/{post}/{comment}', function ($postId, $commentId) {\n        return $postId . '-' . $commentId;\n    });\n\n\n8. 正则约束\n   ```php\n   //判断一个值\n   Route::get('user/{id}', function ($id) {\n       // $id 必须是数字\n   })->where('id', '[0-9]+');\n   //判断多个值\n   Route::get('user/{id}', function ($id) {\n       // $id 必须是数字\n   })->where('id', '[0-9]+');\n\n9. 全局约束\n\n   ```php\n   //需要在 RouteServiceProvider 类的 boot 方法中定义这种约束模式\n   public function boot()\n   {\n       Route::pattern('id', '[0-9]+');\n   }\n   Route::get('user/{id}', function ($id) {\n       // 只有当 {id} 是数字时才会被调用\n   });\n\n\n10. 分组前缀\n    ```php\n    Route::prefix('sss')->group(function (){\n    Route::get('index',function (){\n    return 33;\n    });\n    Route::get('welcome',function (){\n    return 44;\n    });\n    });\n    //访问时路由为/sss/index或/sss/welcome\n\n","slug":"laravel8路由","published":1,"updated":"2021-07-27T14:51:43.525Z","comments":1,"layout":"post","photos":[],"link":"","_id":"ckrmv4ji0002gzrfyej3kc8fj","content":"<ol>\n<li><p>get请求</p>\n <figure class=\"highlight php\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">Route::get(<span class=\"string\">&#x27;/aaa&#x27;</span>,<span class=\"function\"><span class=\"keyword\">function</span> (<span class=\"params\"></span>)</span>&#123;</span><br><span class=\"line\">    <span class=\"keyword\">echo</span> <span class=\"string\">&#x27;aaa&#x27;</span>;</span><br><span class=\"line\">&#125;);</span><br><span class=\"line\"></span><br><span class=\"line\">Route::get(<span class=\"string\">&#x27;/aaa&#x27;</span>,[TestController::class,<span class=\"string\">&#x27;form&#x27;</span>]);</span><br></pre></td></tr></table></figure>\n</li>\n<li><p>post请求</p>\n <figure class=\"highlight php\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">Route::post(<span class=\"string\">&#x27;/aaa&#x27;</span>,<span class=\"function\"><span class=\"keyword\">function</span> (<span class=\"params\"></span>)</span>&#123;</span><br><span class=\"line\"><span class=\"keyword\">echo</span> <span class=\"string\">&#x27;aaa&#x27;</span>;</span><br><span class=\"line\">&#125;);</span><br><span class=\"line\"></span><br><span class=\"line\">Route::post(<span class=\"string\">&#x27;/aaa&#x27;</span>,[TestController::class,<span class=\"string\">&#x27;form&#x27;</span>]);</span><br></pre></td></tr></table></figure>\n</li>\n<li><p>一个路由响应多个http请求动作</p>\n <figure class=\"highlight php\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">Route::match([<span class=\"string\">&#x27;get&#x27;</span>, <span class=\"string\">&#x27;post&#x27;</span>], <span class=\"string\">&#x27;foo&#x27;</span>, <span class=\"function\"><span class=\"keyword\">function</span> (<span class=\"params\"></span>) </span>&#123;</span><br><span class=\"line\">    <span class=\"keyword\">return</span> <span class=\"string\">&#x27;This is a request from get or post&#x27;</span>;</span><br><span class=\"line\">&#125;);</span><br></pre></td></tr></table></figure>\n</li>\n<li><p>一个路由来响应所有 HTTP 请求动作</p>\n <figure class=\"highlight php\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">Route::any(<span class=\"string\">&#x27;bar&#x27;</span>, <span class=\"function\"><span class=\"keyword\">function</span> (<span class=\"params\"></span>) </span>&#123;</span><br><span class=\"line\"><span class=\"keyword\">return</span> <span class=\"string\">&#x27;This is a request from any HTTP verb&#x27;</span>;</span><br><span class=\"line\">&#125;);</span><br></pre></td></tr></table></figure>\n</li>\n<li><p>重定向路由</p>\n <figure class=\"highlight php\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">Route::redirect(<span class=\"string\">&#x27;/here&#x27;</span>,<span class=\"string\">&#x27;/aaa&#x27;</span>);</span><br></pre></td></tr></table></figure></li>\n<li><p>视图路由</p>\n<pre><code class=\"php\">Route::view(&#39;hello&#39;, &#39;hello&#39;, [&#39;name&#39; =&gt; &#39;学院君&#39;]);\n&lt;h1&gt;\n    Hello, &#123;&#123; $name &#125;&#125;!\n&lt;/h1&gt;\n注：在view中第一个参数为URL，第二个参数为视图名称，第三个参数可选为需要传到视图文件的值\n\n</code></pre>\n</li>\n</ol>\n<ol start=\"7\">\n<li>路由参数<pre><code class=\"php\">//必选参数\nRoute::get(&#39;user/&#123;id&#125;&#39;, function ($id) &#123;\n    return &#39;User &#39; . $id;\n&#125;);\n//可选参数  可以设置默认值\nRoute::get(&#39;user/&#123;id？&#125;&#39;, function ($id=1) &#123;\n    return &#39;User &#39; . $id;\n&#125;);\n//多个参数\nRoute::get(&#39;posts/&#123;post&#125;/&#123;comment&#125;&#39;, function ($postId, $commentId) &#123;\n    return $postId . &#39;-&#39; . $commentId;\n&#125;);\n\n</code></pre>\n</li>\n</ol>\n<ol start=\"8\">\n<li><p>正则约束</p>\n<pre><code class=\"php\">//判断一个值\nRoute::get(&#39;user/&#123;id&#125;&#39;, function ($id) &#123;\n    // $id 必须是数字\n&#125;)-&gt;where(&#39;id&#39;, &#39;[0-9]+&#39;);\n//判断多个值\nRoute::get(&#39;user/&#123;id&#125;&#39;, function ($id) &#123;\n    // $id 必须是数字\n&#125;)-&gt;where(&#39;id&#39;, &#39;[0-9]+&#39;);</code></pre>\n</li>\n<li><p>全局约束</p>\n<pre><code class=\"php\">//需要在 RouteServiceProvider 类的 boot 方法中定义这种约束模式\npublic function boot()\n&#123;\n    Route::pattern(&#39;id&#39;, &#39;[0-9]+&#39;);\n&#125;\nRoute::get(&#39;user/&#123;id&#125;&#39;, function ($id) &#123;\n    // 只有当 &#123;id&#125; 是数字时才会被调用\n&#125;);\n\n</code></pre>\n</li>\n</ol>\n<ol start=\"10\">\n<li>分组前缀<pre><code class=\"php\">Route::prefix(&#39;sss&#39;)-&gt;group(function ()&#123;\nRoute::get(&#39;index&#39;,function ()&#123;\nreturn 33;\n&#125;);\nRoute::get(&#39;welcome&#39;,function ()&#123;\nreturn 44;\n&#125;);\n&#125;);\n//访问时路由为/sss/index或/sss/welcome\n</code></pre>\n</li>\n</ol>\n","site":{"data":{}},"length":1882,"excerpt":"","more":"<ol>\n<li><p>get请求</p>\n <figure class=\"highlight php\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">Route::get(<span class=\"string\">&#x27;/aaa&#x27;</span>,<span class=\"function\"><span class=\"keyword\">function</span> (<span class=\"params\"></span>)</span>&#123;</span><br><span class=\"line\">    <span class=\"keyword\">echo</span> <span class=\"string\">&#x27;aaa&#x27;</span>;</span><br><span class=\"line\">&#125;);</span><br><span class=\"line\"></span><br><span class=\"line\">Route::get(<span class=\"string\">&#x27;/aaa&#x27;</span>,[TestController::class,<span class=\"string\">&#x27;form&#x27;</span>]);</span><br></pre></td></tr></table></figure>\n</li>\n<li><p>post请求</p>\n <figure class=\"highlight php\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">Route::post(<span class=\"string\">&#x27;/aaa&#x27;</span>,<span class=\"function\"><span class=\"keyword\">function</span> (<span class=\"params\"></span>)</span>&#123;</span><br><span class=\"line\"><span class=\"keyword\">echo</span> <span class=\"string\">&#x27;aaa&#x27;</span>;</span><br><span class=\"line\">&#125;);</span><br><span class=\"line\"></span><br><span class=\"line\">Route::post(<span class=\"string\">&#x27;/aaa&#x27;</span>,[TestController::class,<span class=\"string\">&#x27;form&#x27;</span>]);</span><br></pre></td></tr></table></figure>\n</li>\n<li><p>一个路由响应多个http请求动作</p>\n <figure class=\"highlight php\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">Route::match([<span class=\"string\">&#x27;get&#x27;</span>, <span class=\"string\">&#x27;post&#x27;</span>], <span class=\"string\">&#x27;foo&#x27;</span>, <span class=\"function\"><span class=\"keyword\">function</span> (<span class=\"params\"></span>) </span>&#123;</span><br><span class=\"line\">    <span class=\"keyword\">return</span> <span class=\"string\">&#x27;This is a request from get or post&#x27;</span>;</span><br><span class=\"line\">&#125;);</span><br></pre></td></tr></table></figure>\n</li>\n<li><p>一个路由来响应所有 HTTP 请求动作</p>\n <figure class=\"highlight php\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">Route::any(<span class=\"string\">&#x27;bar&#x27;</span>, <span class=\"function\"><span class=\"keyword\">function</span> (<span class=\"params\"></span>) </span>&#123;</span><br><span class=\"line\"><span class=\"keyword\">return</span> <span class=\"string\">&#x27;This is a request from any HTTP verb&#x27;</span>;</span><br><span class=\"line\">&#125;);</span><br></pre></td></tr></table></figure>\n</li>\n<li><p>重定向路由</p>\n <figure class=\"highlight php\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">Route::redirect(<span class=\"string\">&#x27;/here&#x27;</span>,<span class=\"string\">&#x27;/aaa&#x27;</span>);</span><br></pre></td></tr></table></figure></li>\n<li><p>视图路由</p>\n<pre><code class=\"php\">Route::view(&#39;hello&#39;, &#39;hello&#39;, [&#39;name&#39; =&gt; &#39;学院君&#39;]);\n&lt;h1&gt;\n    Hello, &#123;&#123; $name &#125;&#125;!\n&lt;/h1&gt;\n注：在view中第一个参数为URL，第二个参数为视图名称，第三个参数可选为需要传到视图文件的值\n\n</code></pre>\n</li>\n</ol>\n<ol start=\"7\">\n<li>路由参数<pre><code class=\"php\">//必选参数\nRoute::get(&#39;user/&#123;id&#125;&#39;, function ($id) &#123;\n    return &#39;User &#39; . $id;\n&#125;);\n//可选参数  可以设置默认值\nRoute::get(&#39;user/&#123;id？&#125;&#39;, function ($id=1) &#123;\n    return &#39;User &#39; . $id;\n&#125;);\n//多个参数\nRoute::get(&#39;posts/&#123;post&#125;/&#123;comment&#125;&#39;, function ($postId, $commentId) &#123;\n    return $postId . &#39;-&#39; . $commentId;\n&#125;);\n\n</code></pre>\n</li>\n</ol>\n<ol start=\"8\">\n<li><p>正则约束</p>\n<pre><code class=\"php\">//判断一个值\nRoute::get(&#39;user/&#123;id&#125;&#39;, function ($id) &#123;\n    // $id 必须是数字\n&#125;)-&gt;where(&#39;id&#39;, &#39;[0-9]+&#39;);\n//判断多个值\nRoute::get(&#39;user/&#123;id&#125;&#39;, function ($id) &#123;\n    // $id 必须是数字\n&#125;)-&gt;where(&#39;id&#39;, &#39;[0-9]+&#39;);</code></pre>\n</li>\n<li><p>全局约束</p>\n<pre><code class=\"php\">//需要在 RouteServiceProvider 类的 boot 方法中定义这种约束模式\npublic function boot()\n&#123;\n    Route::pattern(&#39;id&#39;, &#39;[0-9]+&#39;);\n&#125;\nRoute::get(&#39;user/&#123;id&#125;&#39;, function ($id) &#123;\n    // 只有当 &#123;id&#125; 是数字时才会被调用\n&#125;);\n\n</code></pre>\n</li>\n</ol>\n<ol start=\"10\">\n<li>分组前缀<pre><code class=\"php\">Route::prefix(&#39;sss&#39;)-&gt;group(function ()&#123;\nRoute::get(&#39;index&#39;,function ()&#123;\nreturn 33;\n&#125;);\nRoute::get(&#39;welcome&#39;,function ()&#123;\nreturn 44;\n&#125;);\n&#125;);\n//访问时路由为/sss/index或/sss/welcome\n</code></pre>\n</li>\n</ol>\n"},{"title":"单例模式","abbrlink":46132,"date":"2021-05-29T07:25:23.000Z","_content":"#### 单例模式\n1. 单例模式的简述：\n   单例模式就是确保某个类只有一个实例，而且这个实例一般都是自行实例化，不需要再去new这个类，通过一个全局访问点去访问，一般常见的如类名。\n2. 为什么要使用单例模式：\n   在开发过程中，经常会遇到一些对象，这样的对象在全局当中仅仅存在一个就可以了，如执行SQL语句时连接数据库的操作。如果这种对象出现过多的话，可能会出现各种意外错误。\n3. 单例类\n    ```php\n    <?php\n    class Football{\n        private static  $fb = null;\n        /*\n        * 构造方法私有化，不能让其他程序去new对象\n        * 要想取得该对象，必须由该类提供方法\n        * */\n        final private function __construct(){\n        }\n        /*\n        * 该方法必须是一个静态方法，只有通过类名才可以调用\n        * 先去判断这个对象是否被创建\n        * 如果没有则创建；如果存在则返回创建好的对象\n        * 以保证该对象只有一个实例\n        * */\n        public static function getInstance(){\n            if(static::$fb === null){\n                static::$fb = new Football();\n            }\n            return static::$fb;\n        }\n    }\n\n    ```\n4. 测试类\n   ```php\n    <?php\n    require 'Football.class.php';\n    header(\"Content-Type:text/html;charset=utf-8\");\n    //class test {\n    //    public function test(){\n    //        $fb1 = Football::getInstance();\n    //        $fb2 = Football::getInstance();\n    //        if ($fb1 === $fb2){\n    //            echo \"fb1和fb2为同一个对象\";\n    //        }\n    //    }\n    //}\n    $fb1 = Football::getInstance();\n    $fb2 = Football::getInstance();\n    /*\n    * 去判断$fb1和$fb2是否为同一个实例\n    * */\n    if ($fb1 === $fb2){\n        echo \"fb1和fb2为同一个对象\";\n    }\n\n   ```\n\n","source":"_posts/单例模式.md","raw":"---\ntitle: 单例模式\ntags:\n  - 设计模式\ncategories: 设计模式\nabbrlink: 46132\ndate: 2021-05-29 15:25:23\n---\n#### 单例模式\n1. 单例模式的简述：\n   单例模式就是确保某个类只有一个实例，而且这个实例一般都是自行实例化，不需要再去new这个类，通过一个全局访问点去访问，一般常见的如类名。\n2. 为什么要使用单例模式：\n   在开发过程中，经常会遇到一些对象，这样的对象在全局当中仅仅存在一个就可以了，如执行SQL语句时连接数据库的操作。如果这种对象出现过多的话，可能会出现各种意外错误。\n3. 单例类\n    ```php\n    <?php\n    class Football{\n        private static  $fb = null;\n        /*\n        * 构造方法私有化，不能让其他程序去new对象\n        * 要想取得该对象，必须由该类提供方法\n        * */\n        final private function __construct(){\n        }\n        /*\n        * 该方法必须是一个静态方法，只有通过类名才可以调用\n        * 先去判断这个对象是否被创建\n        * 如果没有则创建；如果存在则返回创建好的对象\n        * 以保证该对象只有一个实例\n        * */\n        public static function getInstance(){\n            if(static::$fb === null){\n                static::$fb = new Football();\n            }\n            return static::$fb;\n        }\n    }\n\n    ```\n4. 测试类\n   ```php\n    <?php\n    require 'Football.class.php';\n    header(\"Content-Type:text/html;charset=utf-8\");\n    //class test {\n    //    public function test(){\n    //        $fb1 = Football::getInstance();\n    //        $fb2 = Football::getInstance();\n    //        if ($fb1 === $fb2){\n    //            echo \"fb1和fb2为同一个对象\";\n    //        }\n    //    }\n    //}\n    $fb1 = Football::getInstance();\n    $fb2 = Football::getInstance();\n    /*\n    * 去判断$fb1和$fb2是否为同一个实例\n    * */\n    if ($fb1 === $fb2){\n        echo \"fb1和fb2为同一个对象\";\n    }\n\n   ```\n\n","slug":"单例模式","published":1,"updated":"2021-07-27T14:51:43.526Z","comments":1,"layout":"post","photos":[],"link":"","_id":"ckrmv4ji1002kzrfy4zy55gsc","content":"<h4 id=\"单例模式\"><a href=\"#单例模式\" class=\"headerlink\" title=\"单例模式\"></a>单例模式</h4><ol>\n<li>单例模式的简述：<br>单例模式就是确保某个类只有一个实例，而且这个实例一般都是自行实例化，不需要再去new这个类，通过一个全局访问点去访问，一般常见的如类名。</li>\n<li>为什么要使用单例模式：<br>在开发过程中，经常会遇到一些对象，这样的对象在全局当中仅仅存在一个就可以了，如执行SQL语句时连接数据库的操作。如果这种对象出现过多的话，可能会出现各种意外错误。</li>\n<li>单例类 <figure class=\"highlight php\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"meta\">&lt;?php</span></span><br><span class=\"line\"><span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">Football</span></span>&#123;</span><br><span class=\"line\">    <span class=\"keyword\">private</span> <span class=\"built_in\">static</span>  <span class=\"variable\">$fb</span> = <span class=\"literal\">null</span>;</span><br><span class=\"line\">    <span class=\"comment\">/*</span></span><br><span class=\"line\"><span class=\"comment\">    * 构造方法私有化，不能让其他程序去new对象</span></span><br><span class=\"line\"><span class=\"comment\">    * 要想取得该对象，必须由该类提供方法</span></span><br><span class=\"line\"><span class=\"comment\">    * */</span></span><br><span class=\"line\">    <span class=\"keyword\">final</span> <span class=\"keyword\">private</span> <span class=\"function\"><span class=\"keyword\">function</span> <span class=\"title\">__construct</span>(<span class=\"params\"></span>)</span>&#123;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    <span class=\"comment\">/*</span></span><br><span class=\"line\"><span class=\"comment\">    * 该方法必须是一个静态方法，只有通过类名才可以调用</span></span><br><span class=\"line\"><span class=\"comment\">    * 先去判断这个对象是否被创建</span></span><br><span class=\"line\"><span class=\"comment\">    * 如果没有则创建；如果存在则返回创建好的对象</span></span><br><span class=\"line\"><span class=\"comment\">    * 以保证该对象只有一个实例</span></span><br><span class=\"line\"><span class=\"comment\">    * */</span></span><br><span class=\"line\">    <span class=\"keyword\">public</span> <span class=\"built_in\">static</span> <span class=\"function\"><span class=\"keyword\">function</span> <span class=\"title\">getInstance</span>(<span class=\"params\"></span>)</span>&#123;</span><br><span class=\"line\">        <span class=\"keyword\">if</span>(<span class=\"built_in\">static</span>::<span class=\"variable\">$fb</span> === <span class=\"literal\">null</span>)&#123;</span><br><span class=\"line\">            <span class=\"built_in\">static</span>::<span class=\"variable\">$fb</span> = <span class=\"keyword\">new</span> Football();</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">        <span class=\"keyword\">return</span> <span class=\"built_in\">static</span>::<span class=\"variable\">$fb</span>;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br></pre></td></tr></table></figure></li>\n<li>测试类<figure class=\"highlight php\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"meta\">&lt;?php</span></span><br><span class=\"line\"><span class=\"keyword\">require</span> <span class=\"string\">&#x27;Football.class.php&#x27;</span>;</span><br><span class=\"line\">header(<span class=\"string\">&quot;Content-Type:text/html;charset=utf-8&quot;</span>);</span><br><span class=\"line\"><span class=\"comment\">//class test &#123;</span></span><br><span class=\"line\"><span class=\"comment\">//    public function test()&#123;</span></span><br><span class=\"line\"><span class=\"comment\">//        $fb1 = Football::getInstance();</span></span><br><span class=\"line\"><span class=\"comment\">//        $fb2 = Football::getInstance();</span></span><br><span class=\"line\"><span class=\"comment\">//        if ($fb1 === $fb2)&#123;</span></span><br><span class=\"line\"><span class=\"comment\">//            echo &quot;fb1和fb2为同一个对象&quot;;</span></span><br><span class=\"line\"><span class=\"comment\">//        &#125;</span></span><br><span class=\"line\"><span class=\"comment\">//    &#125;</span></span><br><span class=\"line\"><span class=\"comment\">//&#125;</span></span><br><span class=\"line\"><span class=\"variable\">$fb1</span> = Football::getInstance();</span><br><span class=\"line\"><span class=\"variable\">$fb2</span> = Football::getInstance();</span><br><span class=\"line\"><span class=\"comment\">/*</span></span><br><span class=\"line\"><span class=\"comment\">* 去判断$fb1和$fb2是否为同一个实例</span></span><br><span class=\"line\"><span class=\"comment\">* */</span></span><br><span class=\"line\"><span class=\"keyword\">if</span> (<span class=\"variable\">$fb1</span> === <span class=\"variable\">$fb2</span>)&#123;</span><br><span class=\"line\">    <span class=\"keyword\">echo</span> <span class=\"string\">&quot;fb1和fb2为同一个对象&quot;</span>;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br></pre></td></tr></table></figure>\n\n</li>\n</ol>\n","site":{"data":{}},"length":1025,"excerpt":"","more":"<h4 id=\"单例模式\"><a href=\"#单例模式\" class=\"headerlink\" title=\"单例模式\"></a>单例模式</h4><ol>\n<li>单例模式的简述：<br>单例模式就是确保某个类只有一个实例，而且这个实例一般都是自行实例化，不需要再去new这个类，通过一个全局访问点去访问，一般常见的如类名。</li>\n<li>为什么要使用单例模式：<br>在开发过程中，经常会遇到一些对象，这样的对象在全局当中仅仅存在一个就可以了，如执行SQL语句时连接数据库的操作。如果这种对象出现过多的话，可能会出现各种意外错误。</li>\n<li>单例类 <figure class=\"highlight php\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"meta\">&lt;?php</span></span><br><span class=\"line\"><span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">Football</span></span>&#123;</span><br><span class=\"line\">    <span class=\"keyword\">private</span> <span class=\"built_in\">static</span>  <span class=\"variable\">$fb</span> = <span class=\"literal\">null</span>;</span><br><span class=\"line\">    <span class=\"comment\">/*</span></span><br><span class=\"line\"><span class=\"comment\">    * 构造方法私有化，不能让其他程序去new对象</span></span><br><span class=\"line\"><span class=\"comment\">    * 要想取得该对象，必须由该类提供方法</span></span><br><span class=\"line\"><span class=\"comment\">    * */</span></span><br><span class=\"line\">    <span class=\"keyword\">final</span> <span class=\"keyword\">private</span> <span class=\"function\"><span class=\"keyword\">function</span> <span class=\"title\">__construct</span>(<span class=\"params\"></span>)</span>&#123;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    <span class=\"comment\">/*</span></span><br><span class=\"line\"><span class=\"comment\">    * 该方法必须是一个静态方法，只有通过类名才可以调用</span></span><br><span class=\"line\"><span class=\"comment\">    * 先去判断这个对象是否被创建</span></span><br><span class=\"line\"><span class=\"comment\">    * 如果没有则创建；如果存在则返回创建好的对象</span></span><br><span class=\"line\"><span class=\"comment\">    * 以保证该对象只有一个实例</span></span><br><span class=\"line\"><span class=\"comment\">    * */</span></span><br><span class=\"line\">    <span class=\"keyword\">public</span> <span class=\"built_in\">static</span> <span class=\"function\"><span class=\"keyword\">function</span> <span class=\"title\">getInstance</span>(<span class=\"params\"></span>)</span>&#123;</span><br><span class=\"line\">        <span class=\"keyword\">if</span>(<span class=\"built_in\">static</span>::<span class=\"variable\">$fb</span> === <span class=\"literal\">null</span>)&#123;</span><br><span class=\"line\">            <span class=\"built_in\">static</span>::<span class=\"variable\">$fb</span> = <span class=\"keyword\">new</span> Football();</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">        <span class=\"keyword\">return</span> <span class=\"built_in\">static</span>::<span class=\"variable\">$fb</span>;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br></pre></td></tr></table></figure></li>\n<li>测试类<figure class=\"highlight php\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"meta\">&lt;?php</span></span><br><span class=\"line\"><span class=\"keyword\">require</span> <span class=\"string\">&#x27;Football.class.php&#x27;</span>;</span><br><span class=\"line\">header(<span class=\"string\">&quot;Content-Type:text/html;charset=utf-8&quot;</span>);</span><br><span class=\"line\"><span class=\"comment\">//class test &#123;</span></span><br><span class=\"line\"><span class=\"comment\">//    public function test()&#123;</span></span><br><span class=\"line\"><span class=\"comment\">//        $fb1 = Football::getInstance();</span></span><br><span class=\"line\"><span class=\"comment\">//        $fb2 = Football::getInstance();</span></span><br><span class=\"line\"><span class=\"comment\">//        if ($fb1 === $fb2)&#123;</span></span><br><span class=\"line\"><span class=\"comment\">//            echo &quot;fb1和fb2为同一个对象&quot;;</span></span><br><span class=\"line\"><span class=\"comment\">//        &#125;</span></span><br><span class=\"line\"><span class=\"comment\">//    &#125;</span></span><br><span class=\"line\"><span class=\"comment\">//&#125;</span></span><br><span class=\"line\"><span class=\"variable\">$fb1</span> = Football::getInstance();</span><br><span class=\"line\"><span class=\"variable\">$fb2</span> = Football::getInstance();</span><br><span class=\"line\"><span class=\"comment\">/*</span></span><br><span class=\"line\"><span class=\"comment\">* 去判断$fb1和$fb2是否为同一个实例</span></span><br><span class=\"line\"><span class=\"comment\">* */</span></span><br><span class=\"line\"><span class=\"keyword\">if</span> (<span class=\"variable\">$fb1</span> === <span class=\"variable\">$fb2</span>)&#123;</span><br><span class=\"line\">    <span class=\"keyword\">echo</span> <span class=\"string\">&quot;fb1和fb2为同一个对象&quot;</span>;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br></pre></td></tr></table></figure>\n\n</li>\n</ol>\n"},{"title":"学习Python遇到的坑(更新中)","abbrlink":4895,"date":"2021-01-08T04:55:56.000Z","_content":"1. ### 在cmd中输入Python打开软件商店\n&nbsp;&nbsp;&nbsp;&nbsp;原因：在系统环境变量和用户环境变量的`path`中，当`WindowsApps`在`python`所配置的环境变量前的时候，就会先打开`WindowsApps`\n&nbsp;&nbsp;&nbsp;&nbsp;解决方法：1.在系统环境和用户环境变量的`path`中删掉`WindowsApps`这一项；2.在系统环境和用户环境变量的`path`中将`WindowsApps`这一项移动到`python`环境变量的下面，这样`python`环境变量就会先被执行，不会造成那样的意外\n![](https://gitee.com/light_trap/for-picgo/raw/master/image/20210108143304.png)","source":"_posts/学习Python遇到的坑(更新中).md","raw":"---\ntitle: 学习Python遇到的坑(更新中)\ntags:\n  - Python\ncategories: Python\nabbrlink: 4895\ndate: 2021-01-08 12:55:56\n---\n1. ### 在cmd中输入Python打开软件商店\n&nbsp;&nbsp;&nbsp;&nbsp;原因：在系统环境变量和用户环境变量的`path`中，当`WindowsApps`在`python`所配置的环境变量前的时候，就会先打开`WindowsApps`\n&nbsp;&nbsp;&nbsp;&nbsp;解决方法：1.在系统环境和用户环境变量的`path`中删掉`WindowsApps`这一项；2.在系统环境和用户环境变量的`path`中将`WindowsApps`这一项移动到`python`环境变量的下面，这样`python`环境变量就会先被执行，不会造成那样的意外\n![](https://gitee.com/light_trap/for-picgo/raw/master/image/20210108143304.png)","slug":"学习Python遇到的坑(更新中)","published":1,"updated":"2021-07-27T14:51:43.527Z","comments":1,"layout":"post","photos":[],"link":"","_id":"ckrmv4ji3002ozrfy7r1n9e6w","content":"<ol>\n<li><h3 id=\"在cmd中输入Python打开软件商店\"><a href=\"#在cmd中输入Python打开软件商店\" class=\"headerlink\" title=\"在cmd中输入Python打开软件商店\"></a>在cmd中输入Python打开软件商店</h3>&nbsp;&nbsp;&nbsp;&nbsp;原因：在系统环境变量和用户环境变量的<code>path</code>中，当<code>WindowsApps</code>在<code>python</code>所配置的环境变量前的时候，就会先打开<code>WindowsApps</code><br>&nbsp;&nbsp;&nbsp;&nbsp;解决方法：1.在系统环境和用户环境变量的<code>path</code>中删掉<code>WindowsApps</code>这一项；2.在系统环境和用户环境变量的<code>path</code>中将<code>WindowsApps</code>这一项移动到<code>python</code>环境变量的下面，这样<code>python</code>环境变量就会先被执行，不会造成那样的意外<br><img src=\"https://gitee.com/light_trap/for-picgo/raw/master/image/20210108143304.png\"></li>\n</ol>\n","site":{"data":{}},"length":261,"excerpt":"","more":"<ol>\n<li><h3 id=\"在cmd中输入Python打开软件商店\"><a href=\"#在cmd中输入Python打开软件商店\" class=\"headerlink\" title=\"在cmd中输入Python打开软件商店\"></a>在cmd中输入Python打开软件商店</h3>&nbsp;&nbsp;&nbsp;&nbsp;原因：在系统环境变量和用户环境变量的<code>path</code>中，当<code>WindowsApps</code>在<code>python</code>所配置的环境变量前的时候，就会先打开<code>WindowsApps</code><br>&nbsp;&nbsp;&nbsp;&nbsp;解决方法：1.在系统环境和用户环境变量的<code>path</code>中删掉<code>WindowsApps</code>这一项；2.在系统环境和用户环境变量的<code>path</code>中将<code>WindowsApps</code>这一项移动到<code>python</code>环境变量的下面，这样<code>python</code>环境变量就会先被执行，不会造成那样的意外<br><img src=\"https://gitee.com/light_trap/for-picgo/raw/master/image/20210108143304.png\"></li>\n</ol>\n"},{"title":"搭建hexo个人博客","abbrlink":13713,"date":"2021-01-03T07:37:20.000Z","_content":"## 准备工作\n 1. 下载[node.js](https://nodejs.org/en/)\n 2. 下载[git](https://git-scm.com/downloads)\n 3. 配置环境变量\n    1. 在node.js的安装目录下创建的创建两个文件夹，分别为node_global和node_cache\n    2. 配置：此电脑/属性/高级系统设置/环境变量,先找到用户环境变量Path，然后点击编辑，新建，把node_global的绝对路径添加上去，确定\n    3. 然后找到系统环境变量的Path,点击编辑、新建，把nodejs的安装目录的绝对路径添加上去 \n 4. 更换node.js的源\n    1. 设置淘宝镜像源\n    `npm config set registry https://registry.npm.taobao.org`\n    1. 查看使用的镜像源\n    `npm config get registry`\n    1. 安装淘宝镜像源\n    `npm install -g cnpm --registry=https://registry.npm.taobao.org`\n    **注**：可以更改也可以不更改，更换成国内的源后下载速度会变快，更改后以后执行npm命令要换成cnpm\n\n## 在本地搭建hexo\n 1. 在本地的任何一个磁盘创建一个文件夹blog(名字随意起)，为本地存储博客的文件夹\n 2. 依次执行下列代码\n ```\nnpm install hexo-cli -g\nhexo init blog\ncd blog\nnpm install\nhexo server\n   ```\n3. 访问`http://localhost:4000`\n\n## 选择自己喜欢的主题\n1. 打开[hexo主题](https://hexo.io/themes/)官网，选择自己喜欢的主题下载\n2. 下载完成后放在博客本地的文件夹里面，路径如：F:\\blog\\themes\n3. 修改配置文件F:\\blog\\_config.yml\n   搜索：**theme**关键字\n   修改theme后的主题名，例如\n   `theme: next`(切记：冒号和next之间有一个空格)\n4. 再次访问`http://localhost:4000`，看主题是否发生了变化,若主题改变了则说明主题修改成功了。\n5. 此时，博客本地搭建的已经成功了！\n   \n\n\n\n","source":"_posts/搭建hexo个人博客.md","raw":"---\ntitle: 搭建hexo个人博客\ntags:\n  - hexo\n  - next\ncategories: hexo\nabbrlink: 13713\ndate: 2021-01-03 15:37:20\n---\n## 准备工作\n 1. 下载[node.js](https://nodejs.org/en/)\n 2. 下载[git](https://git-scm.com/downloads)\n 3. 配置环境变量\n    1. 在node.js的安装目录下创建的创建两个文件夹，分别为node_global和node_cache\n    2. 配置：此电脑/属性/高级系统设置/环境变量,先找到用户环境变量Path，然后点击编辑，新建，把node_global的绝对路径添加上去，确定\n    3. 然后找到系统环境变量的Path,点击编辑、新建，把nodejs的安装目录的绝对路径添加上去 \n 4. 更换node.js的源\n    1. 设置淘宝镜像源\n    `npm config set registry https://registry.npm.taobao.org`\n    1. 查看使用的镜像源\n    `npm config get registry`\n    1. 安装淘宝镜像源\n    `npm install -g cnpm --registry=https://registry.npm.taobao.org`\n    **注**：可以更改也可以不更改，更换成国内的源后下载速度会变快，更改后以后执行npm命令要换成cnpm\n\n## 在本地搭建hexo\n 1. 在本地的任何一个磁盘创建一个文件夹blog(名字随意起)，为本地存储博客的文件夹\n 2. 依次执行下列代码\n ```\nnpm install hexo-cli -g\nhexo init blog\ncd blog\nnpm install\nhexo server\n   ```\n3. 访问`http://localhost:4000`\n\n## 选择自己喜欢的主题\n1. 打开[hexo主题](https://hexo.io/themes/)官网，选择自己喜欢的主题下载\n2. 下载完成后放在博客本地的文件夹里面，路径如：F:\\blog\\themes\n3. 修改配置文件F:\\blog\\_config.yml\n   搜索：**theme**关键字\n   修改theme后的主题名，例如\n   `theme: next`(切记：冒号和next之间有一个空格)\n4. 再次访问`http://localhost:4000`，看主题是否发生了变化,若主题改变了则说明主题修改成功了。\n5. 此时，博客本地搭建的已经成功了！\n   \n\n\n\n","slug":"搭建hexo个人博客","published":1,"updated":"2021-07-27T14:51:43.527Z","comments":1,"layout":"post","photos":[],"link":"","_id":"ckrmv4ji4002szrfyedlefx4o","content":"<h2 id=\"准备工作\"><a href=\"#准备工作\" class=\"headerlink\" title=\"准备工作\"></a>准备工作</h2><ol>\n<li>下载<a href=\"https://nodejs.org/en/\">node.js</a></li>\n<li>下载<a href=\"https://git-scm.com/downloads\">git</a></li>\n<li>配置环境变量<ol>\n<li>在node.js的安装目录下创建的创建两个文件夹，分别为node_global和node_cache</li>\n<li>配置：此电脑/属性/高级系统设置/环境变量,先找到用户环境变量Path，然后点击编辑，新建，把node_global的绝对路径添加上去，确定</li>\n<li>然后找到系统环境变量的Path,点击编辑、新建，把nodejs的安装目录的绝对路径添加上去 </li>\n</ol>\n</li>\n<li>更换node.js的源<ol>\n<li>设置淘宝镜像源<br><code>npm config set registry https://registry.npm.taobao.org</code></li>\n<li>查看使用的镜像源<br><code>npm config get registry</code></li>\n<li>安装淘宝镜像源<br><code>npm install -g cnpm --registry=https://registry.npm.taobao.org</code></li>\n</ol>\n<strong>注</strong>：可以更改也可以不更改，更换成国内的源后下载速度会变快，更改后以后执行npm命令要换成cnpm</li>\n</ol>\n<h2 id=\"在本地搭建hexo\"><a href=\"#在本地搭建hexo\" class=\"headerlink\" title=\"在本地搭建hexo\"></a>在本地搭建hexo</h2><ol>\n<li>在本地的任何一个磁盘创建一个文件夹blog(名字随意起)，为本地存储博客的文件夹</li>\n<li>依次执行下列代码<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">npm install hexo-cli -g</span><br><span class=\"line\">hexo init blog</span><br><span class=\"line\">cd blog</span><br><span class=\"line\">npm install</span><br><span class=\"line\">hexo server</span><br></pre></td></tr></table></figure></li>\n<li>访问<code>http://localhost:4000</code></li>\n</ol>\n<h2 id=\"选择自己喜欢的主题\"><a href=\"#选择自己喜欢的主题\" class=\"headerlink\" title=\"选择自己喜欢的主题\"></a>选择自己喜欢的主题</h2><ol>\n<li>打开<a href=\"https://hexo.io/themes/\">hexo主题</a>官网，选择自己喜欢的主题下载</li>\n<li>下载完成后放在博客本地的文件夹里面，路径如：F:\\blog\\themes</li>\n<li>修改配置文件F:\\blog_config.yml<br>搜索：<strong>theme</strong>关键字<br>修改theme后的主题名，例如<br><code>theme: next</code>(切记：冒号和next之间有一个空格)</li>\n<li>再次访问<code>http://localhost:4000</code>，看主题是否发生了变化,若主题改变了则说明主题修改成功了。</li>\n<li>此时，博客本地搭建的已经成功了！</li>\n</ol>\n","site":{"data":{}},"length":758,"excerpt":"","more":"<h2 id=\"准备工作\"><a href=\"#准备工作\" class=\"headerlink\" title=\"准备工作\"></a>准备工作</h2><ol>\n<li>下载<a href=\"https://nodejs.org/en/\">node.js</a></li>\n<li>下载<a href=\"https://git-scm.com/downloads\">git</a></li>\n<li>配置环境变量<ol>\n<li>在node.js的安装目录下创建的创建两个文件夹，分别为node_global和node_cache</li>\n<li>配置：此电脑/属性/高级系统设置/环境变量,先找到用户环境变量Path，然后点击编辑，新建，把node_global的绝对路径添加上去，确定</li>\n<li>然后找到系统环境变量的Path,点击编辑、新建，把nodejs的安装目录的绝对路径添加上去 </li>\n</ol>\n</li>\n<li>更换node.js的源<ol>\n<li>设置淘宝镜像源<br><code>npm config set registry https://registry.npm.taobao.org</code></li>\n<li>查看使用的镜像源<br><code>npm config get registry</code></li>\n<li>安装淘宝镜像源<br><code>npm install -g cnpm --registry=https://registry.npm.taobao.org</code></li>\n</ol>\n<strong>注</strong>：可以更改也可以不更改，更换成国内的源后下载速度会变快，更改后以后执行npm命令要换成cnpm</li>\n</ol>\n<h2 id=\"在本地搭建hexo\"><a href=\"#在本地搭建hexo\" class=\"headerlink\" title=\"在本地搭建hexo\"></a>在本地搭建hexo</h2><ol>\n<li>在本地的任何一个磁盘创建一个文件夹blog(名字随意起)，为本地存储博客的文件夹</li>\n<li>依次执行下列代码<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">npm install hexo-cli -g</span><br><span class=\"line\">hexo init blog</span><br><span class=\"line\">cd blog</span><br><span class=\"line\">npm install</span><br><span class=\"line\">hexo server</span><br></pre></td></tr></table></figure></li>\n<li>访问<code>http://localhost:4000</code></li>\n</ol>\n<h2 id=\"选择自己喜欢的主题\"><a href=\"#选择自己喜欢的主题\" class=\"headerlink\" title=\"选择自己喜欢的主题\"></a>选择自己喜欢的主题</h2><ol>\n<li>打开<a href=\"https://hexo.io/themes/\">hexo主题</a>官网，选择自己喜欢的主题下载</li>\n<li>下载完成后放在博客本地的文件夹里面，路径如：F:\\blog\\themes</li>\n<li>修改配置文件F:\\blog_config.yml<br>搜索：<strong>theme</strong>关键字<br>修改theme后的主题名，例如<br><code>theme: next</code>(切记：冒号和next之间有一个空格)</li>\n<li>再次访问<code>http://localhost:4000</code>，看主题是否发生了变化,若主题改变了则说明主题修改成功了。</li>\n<li>此时，博客本地搭建的已经成功了！</li>\n</ol>\n"},{"title":"第一次来北京","abbrlink":8642,"date":"2021-05-29T11:07:38.000Z","_content":"&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;说实话，以前也来过两次北京，与其说来过，不如说是路过。这是算是真正意义的来北京吧，顺利成为北漂的一员。\n&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;北京给我的印象是贵：下面简单算一下每天的日常开销吧。首先早上上班坐地铁5元，早餐一杯豆浆3.5元，中午定外卖大约20元，下班坐地铁5元，晚餐一碗鸡蛋汤和四个煎包6元，房租水电65元，共计105元；一个月下来不买零食、不买生活用品、不买衣服、没有任何事情，需要3150元，但是不可能没有别的事，也不可能什么都不买，因此一个月四千元在北京应该算是基本开销了吧。\n&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;北京给我的印象是人多：感觉在地铁上能坐到座位的概率应该跟中彩票差不多了吧。虽然有点夸张，但事实是我上下班确实没有坐到过位置，即使是始发站。\n&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;北京给我的印象是机会多：我面了将近十家公司，各种各样的都有，只有你想工作，应该都能找到相对合适的，但前提是你要一个一个去面，面完了你才能知道适不适合你。\n","source":"_posts/生活杂记.md","raw":"---\ntitle: 第一次来北京\ntags:\n  - 碎碎念\ncategories: 碎碎念\nabbrlink: 8642\ndate: 2021-05-29 19:07:38\n---\n&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;说实话，以前也来过两次北京，与其说来过，不如说是路过。这是算是真正意义的来北京吧，顺利成为北漂的一员。\n&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;北京给我的印象是贵：下面简单算一下每天的日常开销吧。首先早上上班坐地铁5元，早餐一杯豆浆3.5元，中午定外卖大约20元，下班坐地铁5元，晚餐一碗鸡蛋汤和四个煎包6元，房租水电65元，共计105元；一个月下来不买零食、不买生活用品、不买衣服、没有任何事情，需要3150元，但是不可能没有别的事，也不可能什么都不买，因此一个月四千元在北京应该算是基本开销了吧。\n&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;北京给我的印象是人多：感觉在地铁上能坐到座位的概率应该跟中彩票差不多了吧。虽然有点夸张，但事实是我上下班确实没有坐到过位置，即使是始发站。\n&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;北京给我的印象是机会多：我面了将近十家公司，各种各样的都有，只有你想工作，应该都能找到相对合适的，但前提是你要一个一个去面，面完了你才能知道适不适合你。\n","slug":"生活杂记","published":1,"updated":"2021-07-27T14:51:43.529Z","comments":1,"layout":"post","photos":[],"link":"","_id":"ckrmv4ji6002wzrfyenx646jp","content":"<p>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;说实话，以前也来过两次北京，与其说来过，不如说是路过。这是算是真正意义的来北京吧，顺利成为北漂的一员。<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;北京给我的印象是贵：下面简单算一下每天的日常开销吧。首先早上上班坐地铁5元，早餐一杯豆浆3.5元，中午定外卖大约20元，下班坐地铁5元，晚餐一碗鸡蛋汤和四个煎包6元，房租水电65元，共计105元；一个月下来不买零食、不买生活用品、不买衣服、没有任何事情，需要3150元，但是不可能没有别的事，也不可能什么都不买，因此一个月四千元在北京应该算是基本开销了吧。<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;北京给我的印象是人多：感觉在地铁上能坐到座位的概率应该跟中彩票差不多了吧。虽然有点夸张，但事实是我上下班确实没有坐到过位置，即使是始发站。<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;北京给我的印象是机会多：我面了将近十家公司，各种各样的都有，只有你想工作，应该都能找到相对合适的，但前提是你要一个一个去面，面完了你才能知道适不适合你。</p>\n","site":{"data":{}},"length":542,"excerpt":"","more":"<p>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;说实话，以前也来过两次北京，与其说来过，不如说是路过。这是算是真正意义的来北京吧，顺利成为北漂的一员。<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;北京给我的印象是贵：下面简单算一下每天的日常开销吧。首先早上上班坐地铁5元，早餐一杯豆浆3.5元，中午定外卖大约20元，下班坐地铁5元，晚餐一碗鸡蛋汤和四个煎包6元，房租水电65元，共计105元；一个月下来不买零食、不买生活用品、不买衣服、没有任何事情，需要3150元，但是不可能没有别的事，也不可能什么都不买，因此一个月四千元在北京应该算是基本开销了吧。<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;北京给我的印象是人多：感觉在地铁上能坐到座位的概率应该跟中彩票差不多了吧。虽然有点夸张，但事实是我上下班确实没有坐到过位置，即使是始发站。<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;北京给我的印象是机会多：我面了将近十家公司，各种各样的都有，只有你想工作，应该都能找到相对合适的，但前提是你要一个一个去面，面完了你才能知道适不适合你。</p>\n"},{"title":"解决createjs适配手机横屏的问题","abbrlink":12082,"date":"2021-06-23T12:14:21.000Z","_content":"当用createjs做手机游戏开发，通常会遇到游戏横屏的问题，此时难以开发，下面通过一些代码去解决这一问题。\n\n当开发时，可以通过谷歌浏览器打开手机横屏调试界面，进行页面的布局，并在布局前通过下面代码或得手机屏幕的宽高，然后进行适配:\n```\n//测试\n// var gameScale = screenWidth/375;\n// gameView.rotation = 90;\n// gameView.x = screenWidth;\n// gameView.y = 0;\n// screenWidth = window.innerHeight;\n// screenHeight = window.innerWidth;\n//开发\nscreenWidth = window.innerWidth;\nscreenHeight = window.innerHeight;\n```\n\n当测试时，可以通过旋转屏幕的方式查看手机横屏后的效果：\n```\n//测试\n var gameScale = screenWidth/375;\n gameView.rotation = 90;\n gameView.x = screenWidth;\n gameView.y = 0;\n screenWidth = window.innerHeight;\n screenHeight = window.innerWidth;\n//开发\n//screenWidth = window.innerWidth;\n//screenHeight = window.innerHeight;\n```","source":"_posts/解决createjs适配手机横屏的问题.md","raw":"---\ntitle: 解决createjs适配手机横屏的问题\ntags:\n  - 前端\n  - createjs\ncategories: 前端\nabbrlink: 12082\ndate: 2021-06-23 20:14:21\n---\n当用createjs做手机游戏开发，通常会遇到游戏横屏的问题，此时难以开发，下面通过一些代码去解决这一问题。\n\n当开发时，可以通过谷歌浏览器打开手机横屏调试界面，进行页面的布局，并在布局前通过下面代码或得手机屏幕的宽高，然后进行适配:\n```\n//测试\n// var gameScale = screenWidth/375;\n// gameView.rotation = 90;\n// gameView.x = screenWidth;\n// gameView.y = 0;\n// screenWidth = window.innerHeight;\n// screenHeight = window.innerWidth;\n//开发\nscreenWidth = window.innerWidth;\nscreenHeight = window.innerHeight;\n```\n\n当测试时，可以通过旋转屏幕的方式查看手机横屏后的效果：\n```\n//测试\n var gameScale = screenWidth/375;\n gameView.rotation = 90;\n gameView.x = screenWidth;\n gameView.y = 0;\n screenWidth = window.innerHeight;\n screenHeight = window.innerWidth;\n//开发\n//screenWidth = window.innerWidth;\n//screenHeight = window.innerHeight;\n```","slug":"解决createjs适配手机横屏的问题","published":1,"updated":"2021-07-27T14:51:43.530Z","comments":1,"layout":"post","photos":[],"link":"","_id":"ckrmv4ji80030zrfydwuph80r","content":"<p>当用createjs做手机游戏开发，通常会遇到游戏横屏的问题，此时难以开发，下面通过一些代码去解决这一问题。</p>\n<p>当开发时，可以通过谷歌浏览器打开手机横屏调试界面，进行页面的布局，并在布局前通过下面代码或得手机屏幕的宽高，然后进行适配:</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">&#x2F;&#x2F;测试</span><br><span class=\"line\">&#x2F;&#x2F; var gameScale &#x3D; screenWidth&#x2F;375;</span><br><span class=\"line\">&#x2F;&#x2F; gameView.rotation &#x3D; 90;</span><br><span class=\"line\">&#x2F;&#x2F; gameView.x &#x3D; screenWidth;</span><br><span class=\"line\">&#x2F;&#x2F; gameView.y &#x3D; 0;</span><br><span class=\"line\">&#x2F;&#x2F; screenWidth &#x3D; window.innerHeight;</span><br><span class=\"line\">&#x2F;&#x2F; screenHeight &#x3D; window.innerWidth;</span><br><span class=\"line\">&#x2F;&#x2F;开发</span><br><span class=\"line\">screenWidth &#x3D; window.innerWidth;</span><br><span class=\"line\">screenHeight &#x3D; window.innerHeight;</span><br></pre></td></tr></table></figure>\n\n<p>当测试时，可以通过旋转屏幕的方式查看手机横屏后的效果：</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">&#x2F;&#x2F;测试</span><br><span class=\"line\"> var gameScale &#x3D; screenWidth&#x2F;375;</span><br><span class=\"line\"> gameView.rotation &#x3D; 90;</span><br><span class=\"line\"> gameView.x &#x3D; screenWidth;</span><br><span class=\"line\"> gameView.y &#x3D; 0;</span><br><span class=\"line\"> screenWidth &#x3D; window.innerHeight;</span><br><span class=\"line\"> screenHeight &#x3D; window.innerWidth;</span><br><span class=\"line\">&#x2F;&#x2F;开发</span><br><span class=\"line\">&#x2F;&#x2F;screenWidth &#x3D; window.innerWidth;</span><br><span class=\"line\">&#x2F;&#x2F;screenHeight &#x3D; window.innerHeight;</span><br></pre></td></tr></table></figure>","site":{"data":{}},"length":826,"excerpt":"","more":"<p>当用createjs做手机游戏开发，通常会遇到游戏横屏的问题，此时难以开发，下面通过一些代码去解决这一问题。</p>\n<p>当开发时，可以通过谷歌浏览器打开手机横屏调试界面，进行页面的布局，并在布局前通过下面代码或得手机屏幕的宽高，然后进行适配:</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">&#x2F;&#x2F;测试</span><br><span class=\"line\">&#x2F;&#x2F; var gameScale &#x3D; screenWidth&#x2F;375;</span><br><span class=\"line\">&#x2F;&#x2F; gameView.rotation &#x3D; 90;</span><br><span class=\"line\">&#x2F;&#x2F; gameView.x &#x3D; screenWidth;</span><br><span class=\"line\">&#x2F;&#x2F; gameView.y &#x3D; 0;</span><br><span class=\"line\">&#x2F;&#x2F; screenWidth &#x3D; window.innerHeight;</span><br><span class=\"line\">&#x2F;&#x2F; screenHeight &#x3D; window.innerWidth;</span><br><span class=\"line\">&#x2F;&#x2F;开发</span><br><span class=\"line\">screenWidth &#x3D; window.innerWidth;</span><br><span class=\"line\">screenHeight &#x3D; window.innerHeight;</span><br></pre></td></tr></table></figure>\n\n<p>当测试时，可以通过旋转屏幕的方式查看手机横屏后的效果：</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">&#x2F;&#x2F;测试</span><br><span class=\"line\"> var gameScale &#x3D; screenWidth&#x2F;375;</span><br><span class=\"line\"> gameView.rotation &#x3D; 90;</span><br><span class=\"line\"> gameView.x &#x3D; screenWidth;</span><br><span class=\"line\"> gameView.y &#x3D; 0;</span><br><span class=\"line\"> screenWidth &#x3D; window.innerHeight;</span><br><span class=\"line\"> screenHeight &#x3D; window.innerWidth;</span><br><span class=\"line\">&#x2F;&#x2F;开发</span><br><span class=\"line\">&#x2F;&#x2F;screenWidth &#x3D; window.innerWidth;</span><br><span class=\"line\">&#x2F;&#x2F;screenHeight &#x3D; window.innerHeight;</span><br></pre></td></tr></table></figure>"},{"title":"解决innerHTML不能解析数据","abbrlink":31746,"date":"2021-01-15T07:25:23.000Z","_content":"当使用`document.('div').innerHTML=`` `向页面追加内容时可能会出现变量不解析的情况。\n正确姿势：`=`后面是` `` `,而不是单引号或双引号,只有` `` `才能解析。\n```html\ndocument.querySelector('div').innerHTML=`<h2>编号：${resp.id}</h2>`\t\n```\n","source":"_posts/解决innerHTML不能解析数据.md","raw":"---\ntitle: 解决innerHTML不能解析数据\ntags:\n  - 前端\ncategories: 前端\nabbrlink: 31746\ndate: 2021-01-15 15:25:23\n---\n当使用`document.('div').innerHTML=`` `向页面追加内容时可能会出现变量不解析的情况。\n正确姿势：`=`后面是` `` `,而不是单引号或双引号,只有` `` `才能解析。\n```html\ndocument.querySelector('div').innerHTML=`<h2>编号：${resp.id}</h2>`\t\n```\n","slug":"解决innerHTML不能解析数据","published":1,"updated":"2021-07-27T14:51:43.531Z","comments":1,"layout":"post","photos":[],"link":"","_id":"ckrmv4ji90034zrfy3uw364sy","content":"<p>当使用<code>document.(&#39;div&#39;).innerHTML=`` </code>向页面追加内容时可能会出现变量不解析的情况。<br>正确姿势：<code>=</code>后面是<code>``</code>,而不是单引号或双引号,只有<code>``</code>才能解析。</p>\n<figure class=\"highlight html\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">document.querySelector(&#x27;div&#x27;).innerHTML=`<span class=\"tag\">&lt;<span class=\"name\">h2</span>&gt;</span>编号：$&#123;resp.id&#125;<span class=\"tag\">&lt;/<span class=\"name\">h2</span>&gt;</span>`\t</span><br></pre></td></tr></table></figure>\n","site":{"data":{}},"length":191,"excerpt":"","more":"<p>当使用<code>document.(&#39;div&#39;).innerHTML=`` </code>向页面追加内容时可能会出现变量不解析的情况。<br>正确姿势：<code>=</code>后面是<code>``</code>,而不是单引号或双引号,只有<code>``</code>才能解析。</p>\n<figure class=\"highlight html\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">document.querySelector(&#x27;div&#x27;).innerHTML=`<span class=\"tag\">&lt;<span class=\"name\">h2</span>&gt;</span>编号：$&#123;resp.id&#125;<span class=\"tag\">&lt;/<span class=\"name\">h2</span>&gt;</span>`\t</span><br></pre></td></tr></table></figure>\n"},{"title":"解决php中跨域问题","abbrlink":60349,"date":"2021-01-15T06:50:19.000Z","_content":"由于同源策略，经常会出现跨域问题，只需要在php代码前加上下面这些代码即可\n```php\nheader(\"Access-Control-Allow-Origin:*\");\nheader('Access-Control-Allow-Methods:POST');\nheader('Access-Control-Allow-Headers:x-requested-with, content-type');\n```\n","source":"_posts/解决php中跨域问题.md","raw":"---\ntitle: 解决php中跨域问题\ntags:\n  - php\ncategories: 后端\nabbrlink: 60349\ndate: 2021-01-15 14:50:19\n---\n由于同源策略，经常会出现跨域问题，只需要在php代码前加上下面这些代码即可\n```php\nheader(\"Access-Control-Allow-Origin:*\");\nheader('Access-Control-Allow-Methods:POST');\nheader('Access-Control-Allow-Headers:x-requested-with, content-type');\n```\n","slug":"解决php中跨域问题","published":1,"updated":"2021-07-27T14:51:43.532Z","comments":1,"layout":"post","photos":[],"link":"","_id":"ckrmv4jib0038zrfy0y0g7uq1","content":"<p>由于同源策略，经常会出现跨域问题，只需要在php代码前加上下面这些代码即可</p>\n<figure class=\"highlight php\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">header(<span class=\"string\">&quot;Access-Control-Allow-Origin:*&quot;</span>);</span><br><span class=\"line\">header(<span class=\"string\">&#x27;Access-Control-Allow-Methods:POST&#x27;</span>);</span><br><span class=\"line\">header(<span class=\"string\">&#x27;Access-Control-Allow-Headers:x-requested-with, content-type&#x27;</span>);</span><br></pre></td></tr></table></figure>\n","site":{"data":{}},"length":223,"excerpt":"","more":"<p>由于同源策略，经常会出现跨域问题，只需要在php代码前加上下面这些代码即可</p>\n<figure class=\"highlight php\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">header(<span class=\"string\">&quot;Access-Control-Allow-Origin:*&quot;</span>);</span><br><span class=\"line\">header(<span class=\"string\">&#x27;Access-Control-Allow-Methods:POST&#x27;</span>);</span><br><span class=\"line\">header(<span class=\"string\">&#x27;Access-Control-Allow-Headers:x-requested-with, content-type&#x27;</span>);</span><br></pre></td></tr></table></figure>\n"},{"title":"解决空html页面有hight的问题","abbrlink":20921,"date":"2021-06-23T12:03:06.000Z","_content":"可能是由于meta的标签的问题，更换成下面meta标签中的内容。\n```javascript\n<meta content=\"width=device-width,initial-scale=1,user-scalable=no\" name=\"viewport\">\n```\n","source":"_posts/解决空html页面有hight的问题.md","raw":"---\ntitle: 解决空html页面有hight的问题\ntags:\n  - 前端\ncategories: 前端\nabbrlink: 20921\ndate: 2021-06-23 20:03:06\n---\n可能是由于meta的标签的问题，更换成下面meta标签中的内容。\n```javascript\n<meta content=\"width=device-width,initial-scale=1,user-scalable=no\" name=\"viewport\">\n```\n","slug":"解决空html页面有hight的问题","published":1,"updated":"2021-07-27T14:51:43.533Z","comments":1,"layout":"post","photos":[],"link":"","_id":"ckrmv4jid003czrfygek6cnp9","content":"<p>可能是由于meta的标签的问题，更换成下面meta标签中的内容。</p>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">&lt;meta content=<span class=\"string\">&quot;width=device-width,initial-scale=1,user-scalable=no&quot;</span> name=<span class=\"string\">&quot;viewport&quot;</span>&gt;</span><br></pre></td></tr></table></figure>\n","site":{"data":{}},"length":141,"excerpt":"","more":"<p>可能是由于meta的标签的问题，更换成下面meta标签中的内容。</p>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">&lt;meta content=<span class=\"string\">&quot;width=device-width,initial-scale=1,user-scalable=no&quot;</span> name=<span class=\"string\">&quot;viewport&quot;</span>&gt;</span><br></pre></td></tr></table></figure>\n"},{"title":"第一次面试经历","abbrlink":48614,"date":"2021-05-29T11:01:31.000Z","_content":"&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;终于稳定下来了，一直想把最近的面试经历记录下来，可是由于一直在忙着找房子和工作，今天终于有时间可以写一写了。\n&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;在上一周面试了大概有十家左右，虽然每天跑的感觉特别疲惫，但从失败的教训中确实也学到了好多东西。在面试的过程中，一般都会先要求自我介绍，然后给一些笔试题做一下，再就是技术面试。这几场面试下来，给我的感觉不仅是一些知识自己没有熟练掌握，更重要的是有些技术自己根本就没有听说过、考虑过或使用过。以前在学校的时候感觉在同学中应该还算个中等水平，现在感觉自己就是一个井底之蛙，我觉得这才是最可怕的地方。\n&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;在这么多面试官中给我留下印象最深刻的是乔，他面了我三次，最然他最后没有录用我，但是我觉得他给了我更重要的东西。一面是电话面试，他简单的问了我一些计算机专业的知识，然后让我给他介绍毕设；二面的时候是在公司，他指出我毕设数据库表的设计有问题，并现场让我改正，写了对数据库的增删改查的一些功能。这里要说了，这是我所有的面试中唯一一个让现场写代码的。一开始我以为是个特例，后来问了同学，他们说他们面的时候也需要现场写。后来由于他有事，他给我布置了两个问题，让我写一下，问题分别是：(1)写一个单例模式，并写出对它的理解；(2)根据对数据库的修改去修改响应的代码；三面的时候，第一个问题写单例模式，虽然最后写出来了，但是写的特别慢，又问我你还看了别的设计模式了吗？我说没有；后来看到我写的文档数据库表中字段名起的规则不一致，说我命名不严谨；最后问我在二面的时候代码中那个bug修改了没有，我说没有；结果可想而知，我肯定是被pass掉了。原因：他说单例模式你虽然写出来了但是写的太慢了，你在关注这个模式的时候没有去考虑别的设计模式；遇到的bug这都好几天了，你应该已经解决了但是你并没有解决了，给我的感觉是你并没有那么喜欢计算机这个行业；还有就是对数据库字段命名的时候没有自己的原则，可见没有良好的代码习惯。纵使我说我很喜欢，但是靠嘴说是没有用的。随后他给我讲了一些计算机大面上的东西，虽然不是具体知识上面的，但我感觉确实受益匪浅。其中有一个问题就是：你喜欢广度优先还是深度优先？还告诉我要有长期的目标，以及产品、需求和代码之间的关系等。虽然当时我没有通过面试，心情非常失落，但是我获得了更重要的东西。我特别特别感谢他，他一下子把我拍醒了，让我对自己有了一个更加清楚的认识。从这次面试失败的经历中，我感觉到有两点特别重要：\n```php\n1. 细节决定成败；\n2. 对于遇到的问题要及时去解决，问题本身就是最宝贵的；\n```\n&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;有些话一直在说，但是没有教训的话，可能体会的并没有那么深刻。\n##### 遇到的频率比较高的问题\n1. 时间复杂度；\n2. 队列和栈； \n3. 冒泡排序和快排；\n4. 五层模型和七层模型；\n5. http和https；\n6. TCP和UDP；\n7. 线程和进程；\n8. 数据库优化；\n9. 事务；\n10. SQL语句的书写；\n    ","source":"_posts/面试.md","raw":"---\ntitle: 第一次面试经历\ntags:\n  - 面试\ncategories: 面试\nabbrlink: 48614\ndate: 2021-05-29 19:01:31\n---\n&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;终于稳定下来了，一直想把最近的面试经历记录下来，可是由于一直在忙着找房子和工作，今天终于有时间可以写一写了。\n&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;在上一周面试了大概有十家左右，虽然每天跑的感觉特别疲惫，但从失败的教训中确实也学到了好多东西。在面试的过程中，一般都会先要求自我介绍，然后给一些笔试题做一下，再就是技术面试。这几场面试下来，给我的感觉不仅是一些知识自己没有熟练掌握，更重要的是有些技术自己根本就没有听说过、考虑过或使用过。以前在学校的时候感觉在同学中应该还算个中等水平，现在感觉自己就是一个井底之蛙，我觉得这才是最可怕的地方。\n&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;在这么多面试官中给我留下印象最深刻的是乔，他面了我三次，最然他最后没有录用我，但是我觉得他给了我更重要的东西。一面是电话面试，他简单的问了我一些计算机专业的知识，然后让我给他介绍毕设；二面的时候是在公司，他指出我毕设数据库表的设计有问题，并现场让我改正，写了对数据库的增删改查的一些功能。这里要说了，这是我所有的面试中唯一一个让现场写代码的。一开始我以为是个特例，后来问了同学，他们说他们面的时候也需要现场写。后来由于他有事，他给我布置了两个问题，让我写一下，问题分别是：(1)写一个单例模式，并写出对它的理解；(2)根据对数据库的修改去修改响应的代码；三面的时候，第一个问题写单例模式，虽然最后写出来了，但是写的特别慢，又问我你还看了别的设计模式了吗？我说没有；后来看到我写的文档数据库表中字段名起的规则不一致，说我命名不严谨；最后问我在二面的时候代码中那个bug修改了没有，我说没有；结果可想而知，我肯定是被pass掉了。原因：他说单例模式你虽然写出来了但是写的太慢了，你在关注这个模式的时候没有去考虑别的设计模式；遇到的bug这都好几天了，你应该已经解决了但是你并没有解决了，给我的感觉是你并没有那么喜欢计算机这个行业；还有就是对数据库字段命名的时候没有自己的原则，可见没有良好的代码习惯。纵使我说我很喜欢，但是靠嘴说是没有用的。随后他给我讲了一些计算机大面上的东西，虽然不是具体知识上面的，但我感觉确实受益匪浅。其中有一个问题就是：你喜欢广度优先还是深度优先？还告诉我要有长期的目标，以及产品、需求和代码之间的关系等。虽然当时我没有通过面试，心情非常失落，但是我获得了更重要的东西。我特别特别感谢他，他一下子把我拍醒了，让我对自己有了一个更加清楚的认识。从这次面试失败的经历中，我感觉到有两点特别重要：\n```php\n1. 细节决定成败；\n2. 对于遇到的问题要及时去解决，问题本身就是最宝贵的；\n```\n&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;有些话一直在说，但是没有教训的话，可能体会的并没有那么深刻。\n##### 遇到的频率比较高的问题\n1. 时间复杂度；\n2. 队列和栈； \n3. 冒泡排序和快排；\n4. 五层模型和七层模型；\n5. http和https；\n6. TCP和UDP；\n7. 线程和进程；\n8. 数据库优化；\n9. 事务；\n10. SQL语句的书写；\n    ","slug":"面试","published":1,"updated":"2021-07-27T14:51:43.534Z","comments":1,"layout":"post","photos":[],"link":"","_id":"ckrmv4jie003gzrfy3dt447og","content":"<p>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;终于稳定下来了，一直想把最近的面试经历记录下来，可是由于一直在忙着找房子和工作，今天终于有时间可以写一写了。<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;在上一周面试了大概有十家左右，虽然每天跑的感觉特别疲惫，但从失败的教训中确实也学到了好多东西。在面试的过程中，一般都会先要求自我介绍，然后给一些笔试题做一下，再就是技术面试。这几场面试下来，给我的感觉不仅是一些知识自己没有熟练掌握，更重要的是有些技术自己根本就没有听说过、考虑过或使用过。以前在学校的时候感觉在同学中应该还算个中等水平，现在感觉自己就是一个井底之蛙，我觉得这才是最可怕的地方。<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;在这么多面试官中给我留下印象最深刻的是乔，他面了我三次，最然他最后没有录用我，但是我觉得他给了我更重要的东西。一面是电话面试，他简单的问了我一些计算机专业的知识，然后让我给他介绍毕设；二面的时候是在公司，他指出我毕设数据库表的设计有问题，并现场让我改正，写了对数据库的增删改查的一些功能。这里要说了，这是我所有的面试中唯一一个让现场写代码的。一开始我以为是个特例，后来问了同学，他们说他们面的时候也需要现场写。后来由于他有事，他给我布置了两个问题，让我写一下，问题分别是：(1)写一个单例模式，并写出对它的理解；(2)根据对数据库的修改去修改响应的代码；三面的时候，第一个问题写单例模式，虽然最后写出来了，但是写的特别慢，又问我你还看了别的设计模式了吗？我说没有；后来看到我写的文档数据库表中字段名起的规则不一致，说我命名不严谨；最后问我在二面的时候代码中那个bug修改了没有，我说没有；结果可想而知，我肯定是被pass掉了。原因：他说单例模式你虽然写出来了但是写的太慢了，你在关注这个模式的时候没有去考虑别的设计模式；遇到的bug这都好几天了，你应该已经解决了但是你并没有解决了，给我的感觉是你并没有那么喜欢计算机这个行业；还有就是对数据库字段命名的时候没有自己的原则，可见没有良好的代码习惯。纵使我说我很喜欢，但是靠嘴说是没有用的。随后他给我讲了一些计算机大面上的东西，虽然不是具体知识上面的，但我感觉确实受益匪浅。其中有一个问题就是：你喜欢广度优先还是深度优先？还告诉我要有长期的目标，以及产品、需求和代码之间的关系等。虽然当时我没有通过面试，心情非常失落，但是我获得了更重要的东西。我特别特别感谢他，他一下子把我拍醒了，让我对自己有了一个更加清楚的认识。从这次面试失败的经历中，我感觉到有两点特别重要：</p>\n<figure class=\"highlight php\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"number\">1.</span> 细节决定成败；</span><br><span class=\"line\"><span class=\"number\">2.</span> 对于遇到的问题要及时去解决，问题本身就是最宝贵的；</span><br></pre></td></tr></table></figure>\n<p>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;有些话一直在说，但是没有教训的话，可能体会的并没有那么深刻。</p>\n<h5 id=\"遇到的频率比较高的问题\"><a href=\"#遇到的频率比较高的问题\" class=\"headerlink\" title=\"遇到的频率比较高的问题\"></a>遇到的频率比较高的问题</h5><ol>\n<li>时间复杂度；</li>\n<li>队列和栈； </li>\n<li>冒泡排序和快排；</li>\n<li>五层模型和七层模型；</li>\n<li>http和https；</li>\n<li>TCP和UDP；</li>\n<li>线程和进程；</li>\n<li>数据库优化；</li>\n<li>事务；</li>\n<li>SQL语句的书写；</li>\n</ol>\n","site":{"data":{}},"length":1324,"excerpt":"","more":"<p>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;终于稳定下来了，一直想把最近的面试经历记录下来，可是由于一直在忙着找房子和工作，今天终于有时间可以写一写了。<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;在上一周面试了大概有十家左右，虽然每天跑的感觉特别疲惫，但从失败的教训中确实也学到了好多东西。在面试的过程中，一般都会先要求自我介绍，然后给一些笔试题做一下，再就是技术面试。这几场面试下来，给我的感觉不仅是一些知识自己没有熟练掌握，更重要的是有些技术自己根本就没有听说过、考虑过或使用过。以前在学校的时候感觉在同学中应该还算个中等水平，现在感觉自己就是一个井底之蛙，我觉得这才是最可怕的地方。<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;在这么多面试官中给我留下印象最深刻的是乔，他面了我三次，最然他最后没有录用我，但是我觉得他给了我更重要的东西。一面是电话面试，他简单的问了我一些计算机专业的知识，然后让我给他介绍毕设；二面的时候是在公司，他指出我毕设数据库表的设计有问题，并现场让我改正，写了对数据库的增删改查的一些功能。这里要说了，这是我所有的面试中唯一一个让现场写代码的。一开始我以为是个特例，后来问了同学，他们说他们面的时候也需要现场写。后来由于他有事，他给我布置了两个问题，让我写一下，问题分别是：(1)写一个单例模式，并写出对它的理解；(2)根据对数据库的修改去修改响应的代码；三面的时候，第一个问题写单例模式，虽然最后写出来了，但是写的特别慢，又问我你还看了别的设计模式了吗？我说没有；后来看到我写的文档数据库表中字段名起的规则不一致，说我命名不严谨；最后问我在二面的时候代码中那个bug修改了没有，我说没有；结果可想而知，我肯定是被pass掉了。原因：他说单例模式你虽然写出来了但是写的太慢了，你在关注这个模式的时候没有去考虑别的设计模式；遇到的bug这都好几天了，你应该已经解决了但是你并没有解决了，给我的感觉是你并没有那么喜欢计算机这个行业；还有就是对数据库字段命名的时候没有自己的原则，可见没有良好的代码习惯。纵使我说我很喜欢，但是靠嘴说是没有用的。随后他给我讲了一些计算机大面上的东西，虽然不是具体知识上面的，但我感觉确实受益匪浅。其中有一个问题就是：你喜欢广度优先还是深度优先？还告诉我要有长期的目标，以及产品、需求和代码之间的关系等。虽然当时我没有通过面试，心情非常失落，但是我获得了更重要的东西。我特别特别感谢他，他一下子把我拍醒了，让我对自己有了一个更加清楚的认识。从这次面试失败的经历中，我感觉到有两点特别重要：</p>\n<figure class=\"highlight php\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"number\">1.</span> 细节决定成败；</span><br><span class=\"line\"><span class=\"number\">2.</span> 对于遇到的问题要及时去解决，问题本身就是最宝贵的；</span><br></pre></td></tr></table></figure>\n<p>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;有些话一直在说，但是没有教训的话，可能体会的并没有那么深刻。</p>\n<h5 id=\"遇到的频率比较高的问题\"><a href=\"#遇到的频率比较高的问题\" class=\"headerlink\" title=\"遇到的频率比较高的问题\"></a>遇到的频率比较高的问题</h5><ol>\n<li>时间复杂度；</li>\n<li>队列和栈； </li>\n<li>冒泡排序和快排；</li>\n<li>五层模型和七层模型；</li>\n<li>http和https；</li>\n<li>TCP和UDP；</li>\n<li>线程和进程；</li>\n<li>数据库优化；</li>\n<li>事务；</li>\n<li>SQL语句的书写；</li>\n</ol>\n"}],"PostAsset":[],"PostCategory":[{"post_id":"ckrmv4jgc0001zrfycnfs1qpo","category_id":"ckrmv4jgj0004zrfyeq40cue8","_id":"ckrmv4jgw000jzrfya3sn5ux8"},{"post_id":"ckrmv4jgp000bzrfyg1o11bdy","category_id":"ckrmv4jgj0004zrfyeq40cue8","_id":"ckrmv4jgz000nzrfy2yx0291d"},{"post_id":"ckrmv4jgg0003zrfyek75eoul","category_id":"ckrmv4jgq000czrfyht1leq4q","_id":"ckrmv4jh2000rzrfydv0v3voz"},{"post_id":"ckrmv4jgl0007zrfy1f2oduyl","category_id":"ckrmv4jgq000czrfyht1leq4q","_id":"ckrmv4jh4000vzrfy68y7gd0f"},{"post_id":"ckrmv4jgn0009zrfy6u0l434d","category_id":"ckrmv4jh1000qzrfy4ltg4u3v","_id":"ckrmv4jh70012zrfy1b72dl9j"},{"post_id":"ckrmv4jgs000gzrfyaulu7p1p","category_id":"ckrmv4jh5000wzrfyh2apefee","_id":"ckrmv4jha0018zrfy3myo4dkm"},{"post_id":"ckrmv4jgv000izrfy0khl1v6w","category_id":"ckrmv4jh80013zrfy09avhtd9","_id":"ckrmv4jhh001fzrfy7tnh6bb1"},{"post_id":"ckrmv4jhf001dzrfybric0rva","category_id":"ckrmv4jhb001azrfyd3orh6c3","_id":"ckrmv4jhk001lzrfy91b4b0nd"},{"post_id":"ckrmv4jgy000mzrfy6q1oeji2","category_id":"ckrmv4jhb001azrfyd3orh6c3","_id":"ckrmv4jhm001pzrfygros54mz"},{"post_id":"ckrmv4jhg001ezrfy441c9bgl","category_id":"ckrmv4jhb001azrfyd3orh6c3","_id":"ckrmv4jhn001rzrfydjr92zoc"},{"post_id":"ckrmv4jhi001izrfy9d2o40z9","category_id":"ckrmv4jhb001azrfyd3orh6c3","_id":"ckrmv4jhp001vzrfy1jp69jmk"},{"post_id":"ckrmv4jh0000pzrfybgao4o3e","category_id":"ckrmv4jh1000qzrfy4ltg4u3v","_id":"ckrmv4jhs001xzrfy12iggmc9"},{"post_id":"ckrmv4jhj001kzrfygqwydb4x","category_id":"ckrmv4jhb001azrfyd3orh6c3","_id":"ckrmv4jht0020zrfyf1lp9tna"},{"post_id":"ckrmv4jhl001ozrfy39iscnhl","category_id":"ckrmv4jgq000czrfyht1leq4q","_id":"ckrmv4jhu0023zrfyck157p7m"},{"post_id":"ckrmv4jh2000tzrfy6rtl8zfo","category_id":"ckrmv4jhb001azrfyd3orh6c3","_id":"ckrmv4jhw0026zrfy1q0garq4"},{"post_id":"ckrmv4jh4000uzrfyencd55q5","category_id":"ckrmv4jhb001azrfyd3orh6c3","_id":"ckrmv4jhx0029zrfydzvx6k60"},{"post_id":"ckrmv4jh6000yzrfybjzod1j3","category_id":"ckrmv4jhb001azrfyd3orh6c3","_id":"ckrmv4jhz002dzrfy7yljb1pr"},{"post_id":"ckrmv4jh70010zrfy37vngxuo","category_id":"ckrmv4jhb001azrfyd3orh6c3","_id":"ckrmv4ji1002jzrfycxyb9ft9"},{"post_id":"ckrmv4jhx0028zrfygq7747m0","category_id":"ckrmv4jh5000wzrfyh2apefee","_id":"ckrmv4ji2002mzrfyhw5ch4ya"},{"post_id":"ckrmv4jhy002czrfy6c7j7v90","category_id":"ckrmv4jgq000czrfyht1leq4q","_id":"ckrmv4ji4002rzrfy89fcdopg"},{"post_id":"ckrmv4jh80015zrfy1lnw0528","category_id":"ckrmv4jhb001azrfyd3orh6c3","_id":"ckrmv4ji5002uzrfy797j7okp"},{"post_id":"ckrmv4ji0002gzrfyej3kc8fj","category_id":"ckrmv4jh80013zrfy09avhtd9","_id":"ckrmv4ji7002zzrfy4u0scn62"},{"post_id":"ckrmv4jh90017zrfy8k4e8k72","category_id":"ckrmv4jhb001azrfyd3orh6c3","_id":"ckrmv4ji80032zrfyezb2hpzm"},{"post_id":"ckrmv4ji3002ozrfy7r1n9e6w","category_id":"ckrmv4jhb001azrfyd3orh6c3","_id":"ckrmv4jia0036zrfyhhl7ewce"},{"post_id":"ckrmv4jha0019zrfy66pd2skb","category_id":"ckrmv4jhb001azrfyd3orh6c3","_id":"ckrmv4jic003azrfycj3fhlcn"},{"post_id":"ckrmv4ji80030zrfydwuph80r","category_id":"ckrmv4jgq000czrfyht1leq4q","_id":"ckrmv4jie003ezrfy2qkh9qzp"},{"post_id":"ckrmv4jho001uzrfy8wdvbf4v","category_id":"ckrmv4ji7002yzrfy9j8d0tok","_id":"ckrmv4jik003izrfy0f8y4mbv"},{"post_id":"ckrmv4ji90034zrfy3uw364sy","category_id":"ckrmv4jgq000czrfyht1leq4q","_id":"ckrmv4jil003lzrfyexpe3bfb"},{"post_id":"ckrmv4jib0038zrfy0y0g7uq1","category_id":"ckrmv4jh80013zrfy09avhtd9","_id":"ckrmv4jim003ozrfyh5mqc437"},{"post_id":"ckrmv4jhr001wzrfy819ze1p4","category_id":"ckrmv4ji7002yzrfy9j8d0tok","_id":"ckrmv4jim003rzrfydkoicmyg"},{"post_id":"ckrmv4jid003czrfygek6cnp9","category_id":"ckrmv4jgq000czrfyht1leq4q","_id":"ckrmv4jin003uzrfy13li4six"},{"post_id":"ckrmv4jht001zzrfybhwz4amg","category_id":"ckrmv4ji7002yzrfy9j8d0tok","_id":"ckrmv4jio003xzrfy9kqqbggf"},{"post_id":"ckrmv4jhu0022zrfy94ojfw5t","category_id":"ckrmv4ji7002yzrfy9j8d0tok","_id":"ckrmv4jio0040zrfyhpif7dnt"},{"post_id":"ckrmv4jhv0025zrfy5pue9ozc","category_id":"ckrmv4ji7002yzrfy9j8d0tok","_id":"ckrmv4jip0043zrfy67bj6qn5"},{"post_id":"ckrmv4ji1002kzrfy4zy55gsc","category_id":"ckrmv4jio003yzrfy07rb2bn6","_id":"ckrmv4jir0048zrfy5d6mafir"},{"post_id":"ckrmv4ji4002szrfyedlefx4o","category_id":"ckrmv4ji7002yzrfy9j8d0tok","_id":"ckrmv4jis004bzrfy04fgcte1"},{"post_id":"ckrmv4ji6002wzrfyenx646jp","category_id":"ckrmv4jir0047zrfy73qt5gc8","_id":"ckrmv4jit004fzrfy3o5mdftx"},{"post_id":"ckrmv4jie003gzrfy3dt447og","category_id":"ckrmv4jis004czrfya06xg5t5","_id":"ckrmv4jiu004izrfy4t875js5"}],"PostTag":[{"post_id":"ckrmv4jgc0001zrfycnfs1qpo","tag_id":"ckrmv4jgk0005zrfy079t8ccb","_id":"ckrmv4jgr000ezrfy3pku0k7g"},{"post_id":"ckrmv4jgg0003zrfyek75eoul","tag_id":"ckrmv4jgq000dzrfy480cbeuy","_id":"ckrmv4jgz000ozrfy49974gng"},{"post_id":"ckrmv4jgl0007zrfy1f2oduyl","tag_id":"ckrmv4jgq000dzrfy480cbeuy","_id":"ckrmv4jh6000zzrfy37twa19m"},{"post_id":"ckrmv4jgl0007zrfy1f2oduyl","tag_id":"ckrmv4jh2000szrfy7vxf7di2","_id":"ckrmv4jh70011zrfy0is7hh5d"},{"post_id":"ckrmv4jgn0009zrfy6u0l434d","tag_id":"ckrmv4jh5000xzrfy6nzafrmw","_id":"ckrmv4jh90016zrfy4rlp2xkc"},{"post_id":"ckrmv4jgp000bzrfyg1o11bdy","tag_id":"ckrmv4jh80014zrfy0irxdze4","_id":"ckrmv4jhf001czrfybwr6a2jy"},{"post_id":"ckrmv4jgs000gzrfyaulu7p1p","tag_id":"ckrmv4jhb001bzrfy0ncw33mk","_id":"ckrmv4jhj001jzrfygl4eb8dc"},{"post_id":"ckrmv4jgv000izrfy0khl1v6w","tag_id":"ckrmv4jhh001hzrfy3f5d6sf0","_id":"ckrmv4jhx002azrfydg757vwu"},{"post_id":"ckrmv4jgv000izrfy0khl1v6w","tag_id":"ckrmv4jhl001nzrfy20rz6z43","_id":"ckrmv4jhz002ezrfy6cqoerag"},{"post_id":"ckrmv4jgv000izrfy0khl1v6w","tag_id":"ckrmv4jho001tzrfy71irgees","_id":"ckrmv4ji0002hzrfy8ud3bna2"},{"post_id":"ckrmv4jgv000izrfy0khl1v6w","tag_id":"ckrmv4jht0021zrfyd5r20z24","_id":"ckrmv4ji2002lzrfy17yx6wpa"},{"post_id":"ckrmv4jhx0028zrfygq7747m0","tag_id":"ckrmv4jhb001bzrfy0ncw33mk","_id":"ckrmv4ji3002pzrfy2obg37og"},{"post_id":"ckrmv4jgy000mzrfy6q1oeji2","tag_id":"ckrmv4jhw0027zrfy7g32h346","_id":"ckrmv4ji5002tzrfydwabficw"},{"post_id":"ckrmv4jhy002czrfy6c7j7v90","tag_id":"ckrmv4jgq000dzrfy480cbeuy","_id":"ckrmv4ji7002xzrfy637ubzlb"},{"post_id":"ckrmv4jh0000pzrfybgao4o3e","tag_id":"ckrmv4jh5000xzrfy6nzafrmw","_id":"ckrmv4ji80031zrfyavio1zms"},{"post_id":"ckrmv4ji3002ozrfy7r1n9e6w","tag_id":"ckrmv4jhw0027zrfy7g32h346","_id":"ckrmv4jia0035zrfy0pimc5ed"},{"post_id":"ckrmv4jh2000tzrfy6rtl8zfo","tag_id":"ckrmv4jhw0027zrfy7g32h346","_id":"ckrmv4jic0039zrfyfwcj3z1c"},{"post_id":"ckrmv4jh4000uzrfyencd55q5","tag_id":"ckrmv4jhw0027zrfy7g32h346","_id":"ckrmv4jid003dzrfybcjn1bdd"},{"post_id":"ckrmv4ji90034zrfy3uw364sy","tag_id":"ckrmv4jgq000dzrfy480cbeuy","_id":"ckrmv4jik003hzrfybv4f3yms"},{"post_id":"ckrmv4jh6000yzrfybjzod1j3","tag_id":"ckrmv4jhw0027zrfy7g32h346","_id":"ckrmv4jil003kzrfybpemah8b"},{"post_id":"ckrmv4jib0038zrfy0y0g7uq1","tag_id":"ckrmv4jht0021zrfyd5r20z24","_id":"ckrmv4jim003nzrfye0fda45w"},{"post_id":"ckrmv4jid003czrfygek6cnp9","tag_id":"ckrmv4jgq000dzrfy480cbeuy","_id":"ckrmv4jim003qzrfyberdcbf8"},{"post_id":"ckrmv4jh70010zrfy37vngxuo","tag_id":"ckrmv4jhw0027zrfy7g32h346","_id":"ckrmv4jin003tzrfydpan0zef"},{"post_id":"ckrmv4jh80015zrfy1lnw0528","tag_id":"ckrmv4jhw0027zrfy7g32h346","_id":"ckrmv4jio003wzrfy4yahdwsz"},{"post_id":"ckrmv4jh90017zrfy8k4e8k72","tag_id":"ckrmv4jhw0027zrfy7g32h346","_id":"ckrmv4jio003zzrfygpuj0qh0"},{"post_id":"ckrmv4jha0019zrfy66pd2skb","tag_id":"ckrmv4jhw0027zrfy7g32h346","_id":"ckrmv4jip0042zrfy5jyb2guy"},{"post_id":"ckrmv4jhf001dzrfybric0rva","tag_id":"ckrmv4jhw0027zrfy7g32h346","_id":"ckrmv4jir0046zrfy6cqvg22e"},{"post_id":"ckrmv4jhg001ezrfy441c9bgl","tag_id":"ckrmv4jhw0027zrfy7g32h346","_id":"ckrmv4jis004azrfyh0xe8bnb"},{"post_id":"ckrmv4jhi001izrfy9d2o40z9","tag_id":"ckrmv4jhw0027zrfy7g32h346","_id":"ckrmv4jit004ezrfy45xz3svm"},{"post_id":"ckrmv4jhj001kzrfygqwydb4x","tag_id":"ckrmv4jhw0027zrfy7g32h346","_id":"ckrmv4jit004hzrfy1bhy9h9p"},{"post_id":"ckrmv4jhl001ozrfy39iscnhl","tag_id":"ckrmv4jgq000dzrfy480cbeuy","_id":"ckrmv4jiu004kzrfya8hd067g"},{"post_id":"ckrmv4jhl001ozrfy39iscnhl","tag_id":"ckrmv4jit004gzrfy7ql1bp09","_id":"ckrmv4jiu004lzrfybem44oe3"},{"post_id":"ckrmv4jhm001qzrfy1tkqh2bp","tag_id":"ckrmv4jiu004jzrfy7c36250q","_id":"ckrmv4jiu004nzrfydx8z8epq"},{"post_id":"ckrmv4jho001uzrfy8wdvbf4v","tag_id":"ckrmv4jiu004mzrfy2ajj1szt","_id":"ckrmv4jix004tzrfy87c7fdpp"},{"post_id":"ckrmv4jho001uzrfy8wdvbf4v","tag_id":"ckrmv4jiv004ozrfy5k1m0h1c","_id":"ckrmv4jix004uzrfy36fydgp1"},{"post_id":"ckrmv4jho001uzrfy8wdvbf4v","tag_id":"ckrmv4jiv004pzrfyd2kpez1c","_id":"ckrmv4jiy004wzrfyfme6dq9d"},{"post_id":"ckrmv4jho001uzrfy8wdvbf4v","tag_id":"ckrmv4jiw004qzrfyhp3p28h0","_id":"ckrmv4jiy004xzrfy7pr8aqkc"},{"post_id":"ckrmv4jho001uzrfy8wdvbf4v","tag_id":"ckrmv4jiw004rzrfy40nt9p0g","_id":"ckrmv4jiy004zzrfy6egmdd8y"},{"post_id":"ckrmv4jhr001wzrfy819ze1p4","tag_id":"ckrmv4jiu004mzrfy2ajj1szt","_id":"ckrmv4jiy0050zrfyeqsy21er"},{"post_id":"ckrmv4jhr001wzrfy819ze1p4","tag_id":"ckrmv4jix004vzrfyftc73y9y","_id":"ckrmv4jiz0052zrfy9gqp5csy"},{"post_id":"ckrmv4jht001zzrfybhwz4amg","tag_id":"ckrmv4jiu004mzrfy2ajj1szt","_id":"ckrmv4jj00055zrfy7upp8npr"},{"post_id":"ckrmv4jht001zzrfybhwz4amg","tag_id":"ckrmv4jix004vzrfyftc73y9y","_id":"ckrmv4jj00056zrfy20bk085l"},{"post_id":"ckrmv4jht001zzrfybhwz4amg","tag_id":"ckrmv4jiw004rzrfy40nt9p0g","_id":"ckrmv4jj00058zrfy3m6sg8xi"},{"post_id":"ckrmv4jhu0022zrfy94ojfw5t","tag_id":"ckrmv4jiu004mzrfy2ajj1szt","_id":"ckrmv4jj1005azrfy0o1e34nq"},{"post_id":"ckrmv4jhu0022zrfy94ojfw5t","tag_id":"ckrmv4jix004vzrfyftc73y9y","_id":"ckrmv4jj1005bzrfy8b17751r"},{"post_id":"ckrmv4jhv0025zrfy5pue9ozc","tag_id":"ckrmv4jiu004mzrfy2ajj1szt","_id":"ckrmv4jj2005ezrfy0fw8hlfg"},{"post_id":"ckrmv4jhv0025zrfy5pue9ozc","tag_id":"ckrmv4jix004vzrfyftc73y9y","_id":"ckrmv4jj2005fzrfy4tltare9"},{"post_id":"ckrmv4ji0002gzrfyej3kc8fj","tag_id":"ckrmv4jj2005dzrfy1djv7w0f","_id":"ckrmv4jj2005hzrfy6tzb91h2"},{"post_id":"ckrmv4ji0002gzrfyej3kc8fj","tag_id":"ckrmv4jht0021zrfyd5r20z24","_id":"ckrmv4jj3005izrfyhjdt78hq"},{"post_id":"ckrmv4ji1002kzrfy4zy55gsc","tag_id":"ckrmv4jj2005gzrfy2hgo1vod","_id":"ckrmv4jj3005kzrfy2iv8819i"},{"post_id":"ckrmv4ji4002szrfyedlefx4o","tag_id":"ckrmv4jiu004mzrfy2ajj1szt","_id":"ckrmv4jj4005nzrfy2bh15w3m"},{"post_id":"ckrmv4ji4002szrfyedlefx4o","tag_id":"ckrmv4jix004vzrfyftc73y9y","_id":"ckrmv4jj4005ozrfyfaqe2mz2"},{"post_id":"ckrmv4ji6002wzrfyenx646jp","tag_id":"ckrmv4jj4005mzrfyabmzc1ao","_id":"ckrmv4jj5005qzrfybdf6epne"},{"post_id":"ckrmv4ji80030zrfydwuph80r","tag_id":"ckrmv4jgq000dzrfy480cbeuy","_id":"ckrmv4jj5005szrfy7neogsih"},{"post_id":"ckrmv4ji80030zrfydwuph80r","tag_id":"ckrmv4jit004gzrfy7ql1bp09","_id":"ckrmv4jj5005tzrfy3anb00du"},{"post_id":"ckrmv4jie003gzrfy3dt447og","tag_id":"ckrmv4jj5005rzrfyfjr2dcla","_id":"ckrmv4jj5005uzrfy81pihu0n"}],"Tag":[{"name":"F021程序设计","_id":"ckrmv4jgk0005zrfy079t8ccb"},{"name":"前端","_id":"ckrmv4jgq000dzrfy480cbeuy"},{"name":"Ajax","_id":"ckrmv4jh2000szrfy7vxf7di2"},{"name":"机器学习","_id":"ckrmv4jh5000xzrfy6nzafrmw"},{"name":"C语言","_id":"ckrmv4jh80014zrfy0irxdze4"},{"name":"Java","_id":"ckrmv4jhb001bzrfy0ncw33mk"},{"name":"Linux","_id":"ckrmv4jhh001hzrfy3f5d6sf0"},{"name":"LAMP","_id":"ckrmv4jhl001nzrfy20rz6z43"},{"name":"服务器","_id":"ckrmv4jho001tzrfy71irgees"},{"name":"php","_id":"ckrmv4jht0021zrfyd5r20z24"},{"name":"Python","_id":"ckrmv4jhw0027zrfy7g32h346"},{"name":"createjs","_id":"ckrmv4jit004gzrfy7ql1bp09"},{"name":"happyBirthday","_id":"ckrmv4jiu004jzrfy7c36250q"},{"name":"hexo","_id":"ckrmv4jiu004mzrfy2ajj1szt"},{"name":"PicGo","_id":"ckrmv4jiv004ozrfy5k1m0h1c"},{"name":"gitee","_id":"ckrmv4jiv004pzrfyd2kpez1c"},{"name":"Typora","_id":"ckrmv4jiw004qzrfyhp3p28h0"},{"name":"图床","_id":"ckrmv4jiw004rzrfy40nt9p0g"},{"name":"next","_id":"ckrmv4jix004vzrfyftc73y9y"},{"name":"laravel","_id":"ckrmv4jj2005dzrfy1djv7w0f"},{"name":"设计模式","_id":"ckrmv4jj2005gzrfy2hgo1vod"},{"name":"碎碎念","_id":"ckrmv4jj4005mzrfyabmzc1ao"},{"name":"面试","_id":"ckrmv4jj5005rzrfyfjr2dcla"}]}}